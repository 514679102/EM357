###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.4.54170/W32 for ARM     02/Jul/2013  21:36:24 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\hal\micro #
#                    \cortexm3\bootloader-interface-standalone.c              #
#    Command line =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\hal\micro #
#                    \cortexm3\bootloader-interface-standalone.c -D DEBUG -D  #
#                    "BOARD_HEADER=\"hal/micro/cortexm3/em35x/board/dev0680.h #
#                    \"" -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/ia #
#                    r.h\"" -D HAL_MICRO -D CORTEXM3 -D CORTEXM3_EM357 -D     #
#                    PHY_EM3XX -D BOARD_DEV0680 -D                            #
#                    "CONFIGURATION_HEADER=\"app/sensor/sensor-configuration. #
#                    h\"" -D SINK_APP -D EMBER_SERIAL1_MODE=EMBER_SERIAL_FIFO #
#                     -D EMBER_SERIAL1_TX_QUEUE_SIZE=128 -D                   #
#                    EMBER_SERIAL1_RX_QUEUE_SIZE=16 -D EMBER_SERIAL0_DEBUG    #
#                    -D EMBER_SERIAL0_MODE=EMBER_SERIAL_FIFO -D               #
#                    EMBER_SERIAL0_TX_QUEUE_SIZE=128 -D                       #
#                    EMBER_SERIAL0_RX_QUEUE_SIZE=64 -D                        #
#                    SCAN_DEBUG_PRINT_ENABLE -D USE_BOOTLOADER_LIB -D         #
#                    "__SOURCEFILE__=\"bootloader-interface-standalone.c\""   #
#                    -lC F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build #
#                    \sink-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\        #
#                    --diag_suppress Pa050 -o F:\Firmware\emberZNet\firmware\ #
#                    EmberZNet\EM35x\build\sink-cortexm3-iar-em357-em3xx-dev0 #
#                    680-debug\Obj\ --debug --endian=little --cpu=Cortex-M3   #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I F:\Firmware\emberZNet\firmware\EmberZNet\EM35x #
#                    \hal\micro\cortexm3\ -I F:\Firmware\emberZNet\firmware\E #
#                    mberZNet\EM35x\app\sensor\ewb-em357\..\..\..\ -I         #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\STACK\ -I                           #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\HAL\ -I                             #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\ -Ohz --use_c++_inline              #
#    List file    =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\bootloader- #
#                    interface-standalone.lst                                 #
#    Object file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Obj\bootloader- #
#                    interface-standalone.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\hal\micro\cortexm3\bootloader-interface-standalone.c
      1          /*
      2           * File: bootloader-interface-standalone.c
      3           * Description: EM3XX-specific standalone bootloader HAL functions
      4           *
      5           * Copyright 2008 by Ember Corporation. All rights reserved.                *80*
      6           */
      7          
      8          #include PLATFORM_HEADER
      9          #include "stack/include/ember-types.h"
     10          #include "stack/include/error.h"
     11          #include "stack/include/stack-info.h"
     12          #include "hal/hal.h"
     13          #include "hal/micro/cortexm3/memmap.h"
     14          #include "hal/micro/cortexm3/diagnostic.h"
     15          
     16          extern int8u emGetPhyRadioChannel(void);
     17          extern int8s emGetPhyRadioPower(void);
     18          

   \                                 In section .text, align 2, keep-with-next
     19          EmberStatus halLaunchStandaloneBootloader(int8u mode)
     20          {
   \                     halLaunchStandaloneBootloader:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     21            if(BOOTLOADER_BASE_TYPE(halBootloaderAddressTable.bootloaderType) 
     22               == BL_TYPE_STANDALONE) {
   \   00000002   0x....             LDR.N    R2,??DataTable1
   \   00000004   0x8B11             LDRH     R1,[R2, #+24]
   \   00000006   0x0A09             LSRS     R1,R1,#+8
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD123             BNE.N    ??halLaunchStandaloneBootloader_0
     23              // should never return
     24              if(mode == STANDALONE_BOOTLOADER_NORMAL_MODE) {
   \   0000000C   0xF240 0x2102      MOVW     R1,#+514
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD11B             BNE.N    ??halLaunchStandaloneBootloader_1
     25                // Version 0x0106 is where OTA bootloader support was added and the 
     26                //  RESET_BOOTLOADER_OTAVALID reset type was introduced.
     27                if(halBootloaderAddressTable.baseTable.version < 0x0106) {
   \   00000014   0x8A50             LDRH     R0,[R2, #+18]
   \   00000016   0xF5B0 0x7F83      CMP      R0,#+262
   \   0000001A   0xD318             BCC.N    ??halLaunchStandaloneBootloader_2
     28                  halInternalSysReset(RESET_BOOTLOADER_BOOTLOAD);
     29                } else {
     30                  tokTypeStackCalData calData;
     31                  // Convert channel number to index (bootloader only uses index).
     32                  int8u channelIndex =  emGetPhyRadioChannel() - 11;
   \   0000001C   0x.... 0x....      BL       emGetPhyRadioChannel
   \   00000020   0xF1A0 0x040B      SUB      R4,R0,#+11
     33          
     34                  halCommonGetIndexedToken(&calData, TOKEN_STACK_CAL_DATA, channelIndex);
   \   00000024   0x2304             MOVS     R3,#+4
   \   00000026   0xB2E2             UXTB     R2,R4
   \   00000028   0x210B             MOVS     R1,#+11
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      BL       halInternalGetTokenData
     35                  halResetInfo.boot.panId        = PAN_ID_REG;
   \   00000030   0x....             LDR.N    R5,??DataTable1_1
   \   00000032   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40002090
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x80A8             STRH     R0,[R5, #+4]
     36                  halResetInfo.boot.radioChannel = channelIndex;
   \   00000038   0x71AC             STRB     R4,[R5, #+6]
     37                  halResetInfo.boot.radioPower   = emGetPhyRadioPower();
   \   0000003A   0x.... 0x....      BL       emGetPhyRadioPower
   \   0000003E   0x71E8             STRB     R0,[R5, #+7]
     38                  halResetInfo.boot.radioLnaCal  = calData.lna;
   \   00000040   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000044   0x7228             STRB     R0,[R5, #+8]
     39                  // ota parameters valid bootloader reset
     40                  halInternalSysReset(RESET_BOOTLOADER_OTAVALID);
   \   00000046   0xF240 0x2006      MOVW     R0,#+518
   \   0000004A   0xE001             B.N      ??halLaunchStandaloneBootloader_3
     41                }
     42              } else if(mode == STANDALONE_BOOTLOADER_RECOVERY_MODE) {
   \                     ??halLaunchStandaloneBootloader_1:
   \   0000004C   0xB910             CBNZ.N   R0,??halLaunchStandaloneBootloader_0
     43                // standard bootloader reset
     44                halInternalSysReset(RESET_BOOTLOADER_BOOTLOAD);
   \                     ??halLaunchStandaloneBootloader_2:
   \   0000004E   0x4608             MOV      R0,R1
   \                     ??halLaunchStandaloneBootloader_3:
   \   00000050   0x.... 0x....      BL       halInternalSysReset
     45              }
     46            }
     47            return EMBER_ERR_FATAL;
   \                     ??halLaunchStandaloneBootloader_0:
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     48          }
     49          

   \                                 In section .text, align 2, keep-with-next
     50          int16u halGetStandaloneBootloaderVersion(void)
     51          {
     52            if(BOOTLOADER_BASE_TYPE(halBootloaderAddressTable.bootloaderType) 
     53               == BL_TYPE_STANDALONE) {
   \                     halGetStandaloneBootloaderVersion:
   \   00000000   0x....             LDR.N    R0,??DataTable1
   \   00000002   0x8B00             LDRH     R0,[R0, #+24]
   \   00000004   0x0A00             LSRS     R0,R0,#+8
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xBF08             IT       EQ 
   \   0000000A   0x.... 0x....      BEQ.W    halGetBootloaderVersion
     54              return halGetBootloaderVersion();
     55            } else {
     56              return BOOTLOADER_INVALID_VERSION;
   \   0000000E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000012   0x4770             BX       LR               ;; return
     57            }
     58          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     halBootloaderAddressTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     halResetInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40002090         DC32     0x40002090

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  halGetStandaloneBootloaderVersion
              0 -> halGetBootloaderVersion
       16  halLaunchStandaloneBootloader
             16 -> emGetPhyRadioChannel
             16 -> emGetPhyRadioPower
             16 -> halInternalGetTokenData
             16 -> halInternalSysReset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
      20  halGetStandaloneBootloaderVersion
      88  halLaunchStandaloneBootloader

 
 120 bytes in section .text
 
 120 bytes of CODE memory

Errors: none
Warnings: none
