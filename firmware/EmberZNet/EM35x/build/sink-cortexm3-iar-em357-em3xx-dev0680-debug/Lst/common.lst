###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.4.54170/W32 for ARM     02/Jul/2013  21:36:28 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\common.c                                               #
#    Command line =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\common.c -D DEBUG -D "BOARD_HEADER=\"hal/micro/cortexm #
#                    3/em35x/board/dev0680.h\"" -D                            #
#                    "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\""  #
#                    -D HAL_MICRO -D CORTEXM3 -D CORTEXM3_EM357 -D PHY_EM3XX  #
#                    -D BOARD_DEV0680 -D "CONFIGURATION_HEADER=\"app/sensor/s #
#                    ensor-configuration.h\"" -D SINK_APP -D                  #
#                    EMBER_SERIAL1_MODE=EMBER_SERIAL_FIFO -D                  #
#                    EMBER_SERIAL1_TX_QUEUE_SIZE=128 -D                       #
#                    EMBER_SERIAL1_RX_QUEUE_SIZE=16 -D EMBER_SERIAL0_DEBUG    #
#                    -D EMBER_SERIAL0_MODE=EMBER_SERIAL_FIFO -D               #
#                    EMBER_SERIAL0_TX_QUEUE_SIZE=128 -D                       #
#                    EMBER_SERIAL0_RX_QUEUE_SIZE=64 -D                        #
#                    SCAN_DEBUG_PRINT_ENABLE -D USE_BOOTLOADER_LIB -D         #
#                    "__SOURCEFILE__=\"common.c\"" -lC                        #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\            #
#                    --diag_suppress Pa050 -o F:\Firmware\emberZNet\firmware\ #
#                    EmberZNet\EM35x\build\sink-cortexm3-iar-em357-em3xx-dev0 #
#                    680-debug\Obj\ --debug --endian=little --cpu=Cortex-M3   #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I F:\Firmware\emberZNet\firmware\EmberZNet\EM35x #
#                    \app\sensor\ -I F:\Firmware\emberZNet\firmware\EmberZNet #
#                    \EM35x\app\sensor\ewb-em357\..\..\..\ -I                 #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\STACK\ -I                           #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\HAL\ -I                             #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\ -Ohz --use_c++_inline              #
#    List file    =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\common.lst  #
#    Object file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Obj\common.o    #
#                                                                             #
#                                                                             #
###############################################################################

F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\sensor\common.c
      1          // *******************************************************************
      2          //  common.c
      3          //
      4          //  common functions for sensor sample app
      5          //
      6          //  Copyright 2005 by Ember Corporation. All rights reserved.              *80*
      7          // *******************************************************************
      8          
      9          #include "app/sensor/common.h"
     10          #include "app/util/security/security.h"
     11          
     12          #ifdef SINK_APP
     13          extern int16u ticksSinceLastHeard[];
     14          #endif
     15          
     16          #ifdef SENSOR_APP
     17          void printDataMode(void);
     18          #endif
     19          
     20          
     21          
     22          // *********************************
     23          // utility function, used below in printing the security keys that are set
     24          // *********************************

   \                                 In section .text, align 2, keep-with-next
     25          void sensorPrintKeyOptions(EmberKeyStruct* key)
     26          {
   \                     sensorPrintKeyOptions:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     27            
     28            // sequence number
     29            emberSerialPrintf(APP_SERIAL, "\r\n    seqNum [");
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\n    seqNum [">`
   \   00000008   0x.... 0x....      BL       ??Subroutine0_0
     30            if ((key->bitmask) & EMBER_KEY_HAS_SEQUENCE_NUMBER) {
   \                     ??CrossCallReturnLabel_36:
   \   0000000C   0x.... 0x....      ADR.W    R5,`?<Constant "none] ">`
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x07C0             LSLS     R0,R0,#+31
   \   00000014   0xD505             BPL.N    ??sensorPrintKeyOptions_0
     31              emberSerialPrintf(APP_SERIAL, "%x] ", key->sequenceNumber);
   \   00000016   0x7F22             LDRB     R2,[R4, #+28]
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "%x] ">`
   \   0000001C   0x.... 0x....      BL       ??Subroutine2_0
     32            } else {
   \                     ??CrossCallReturnLabel_89:
   \   00000020   0xE002             B.N      ??CrossCallReturnLabel_35
     33              emberSerialPrintf(APP_SERIAL, "none] ");
   \                     ??sensorPrintKeyOptions_0:
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x.... 0x....      BL       ??Subroutine0_0
     34            }
     35            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_35:
   \   00000028   0x.... 0x....      BL       ?Subroutine1
     36          
     37            // outgoing frame counter
     38            emberSerialPrintf(APP_SERIAL, "\r\n    outFC [");
   \                     ??CrossCallReturnLabel_68:
   \   0000002C   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\n    outFC [">`
   \   00000030   0x.... 0x....      BL       ??Subroutine0_0
     39            if (key->bitmask & EMBER_KEY_HAS_OUTGOING_FRAME_COUNTER ) {
   \                     ??CrossCallReturnLabel_34:
   \   00000034   0x.... 0x....      ADR.W    R6,`?<Constant "%4x] ">`
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0x0780             LSLS     R0,R0,#+30
   \   0000003C   0xD503             BPL.N    ??sensorPrintKeyOptions_1
     40              emberSerialPrintf(APP_SERIAL, "%4x] ", key->outgoingFrameCounter);
   \   0000003E   0x6962             LDR      R2,[R4, #+20]
   \   00000040   0x.... 0x....      BL       ?Subroutine2
     41            } else {
   \                     ??CrossCallReturnLabel_92:
   \   00000044   0xE002             B.N      ??CrossCallReturnLabel_33
     42              emberSerialPrintf(APP_SERIAL, "none] ");
   \                     ??sensorPrintKeyOptions_1:
   \   00000046   0x4629             MOV      R1,R5
   \   00000048   0x.... 0x....      BL       ??Subroutine0_0
     43            }
     44            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_33:
   \   0000004C   0x.... 0x....      BL       ?Subroutine1
     45          
     46            // incoming frame counter
     47            emberSerialPrintf(APP_SERIAL, "\r\n    inFC [");
   \                     ??CrossCallReturnLabel_67:
   \   00000050   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\n    inFC [">`
   \   00000054   0x.... 0x....      BL       ??Subroutine0_0
     48            if (key->bitmask & EMBER_KEY_HAS_INCOMING_FRAME_COUNTER ) {
   \                     ??CrossCallReturnLabel_32:
   \   00000058   0x7820             LDRB     R0,[R4, #+0]
   \   0000005A   0x0740             LSLS     R0,R0,#+29
   \   0000005C   0xD503             BPL.N    ??sensorPrintKeyOptions_2
     49              emberSerialPrintf(APP_SERIAL, "%4x] ",
     50                                key->incomingFrameCounter);
   \   0000005E   0x69A2             LDR      R2,[R4, #+24]
   \   00000060   0x.... 0x....      BL       ?Subroutine2
     51            } else {
   \                     ??CrossCallReturnLabel_91:
   \   00000064   0xE002             B.N      ??CrossCallReturnLabel_31
     52              emberSerialPrintf(APP_SERIAL, "none] ");
   \                     ??sensorPrintKeyOptions_2:
   \   00000066   0x4629             MOV      R1,R5
   \   00000068   0x.... 0x....      BL       ??Subroutine0_0
     53            }
     54            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_31:
   \   0000006C   0x.... 0x....      BL       ?Subroutine1
     55          
     56            // partner EUI
     57            emberSerialPrintf(APP_SERIAL, "\r\n    partner [");
   \                     ??CrossCallReturnLabel_66:
   \   00000070   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\n    partner [">`
   \   00000074   0x.... 0x....      BL       ??Subroutine0_0
     58            if (key->bitmask & EMBER_KEY_HAS_PARTNER_EUI64) {
   \                     ??CrossCallReturnLabel_30:
   \   00000078   0x7820             LDRB     R0,[R4, #+0]
   \   0000007A   0x0700             LSLS     R0,R0,#+28
   \   0000007C   0xD506             BPL.N    ??sensorPrintKeyOptions_3
     59              printEUI64(APP_SERIAL, (EmberEUI64*) key->partnerEUI64);
   \   0000007E   0xF104 0x011D      ADD      R1,R4,#+29
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      BL       printEUI64
     60              emberSerialPrintf(APP_SERIAL, "]");
   \   00000088   0x....             ADR.N    R1,??DataTable85  ;; "]"
   \   0000008A   0xE001             B.N      ??sensorPrintKeyOptions_4
     61            } else {
     62              emberSerialPrintf(APP_SERIAL, "None] ");
   \                     ??sensorPrintKeyOptions_3:
   \   0000008C   0x.... 0x....      ADR.W    R1,`?<Constant "None] ">`
     63            }
   \                     ??sensorPrintKeyOptions_4:
   \   00000090   0x.... 0x....      BL       ??Subroutine0_0
     64            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_29:
   \   00000094   0x.... 0x....      BL       ?Subroutine1
     65          
     66            // is key authorized
     67            emberSerialPrintf(APP_SERIAL, "\r\n    auth [");
   \                     ??CrossCallReturnLabel_65:
   \   00000098   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\n    auth [">`
   \   0000009C   0x.... 0x....      BL       ??Subroutine0_0
     68            if (key->bitmask & EMBER_KEY_IS_AUTHORIZED) {
   \                     ??CrossCallReturnLabel_28:
   \   000000A0   0x7820             LDRB     R0,[R4, #+0]
   \   000000A2   0x06C0             LSLS     R0,R0,#+27
   \   000000A4   0xBF4C             ITE      MI 
   \   000000A6   0x....             ADRMI.N  R1,??DataTable85_1  ;; "Y] "
   \   000000A8   0x....             ADRPL.N  R1,??DataTable85_2  ;; "N] "
     69              emberSerialPrintf(APP_SERIAL, "Y] ");
     70            } else {
     71              emberSerialPrintf(APP_SERIAL, "N] ");
   \   000000AA   0x.... 0x....      BL       ??Subroutine0_0
     72            }
     73            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_27:
   \   000000AE   0x.... 0x....      BL       ?Subroutine1
     74            emberSerialPrintf(APP_SERIAL, "\r\n");
   \                     ??CrossCallReturnLabel_64:
   \   000000B2   0x....             ADR.N    R1,??DataTable85_3  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000BA   0x.... 0x....      B.W      emberSerialPrintf
     75            
     76            
     77          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberSerialWaitSend

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x4631             MOV      R1,R6
   \                     ??Subroutine2_0:
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      emberSerialPrintf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x....             ADR.N    R1,??DataTable95  ;; 0x0D, 0x0A, 0x00, 0x00
   \                     ??Subroutine0_0:
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      emberSerialPrintf
     78          
     79          // *********************************
     80          // utility function, used below in printing the security keys that are set
     81          // *********************************

   \                                 In section .text, align 2, keep-with-next
     82          void sensorCommonPrint16ByteKey(int8u* key) 
     83          {
   \                     sensorCommonPrint16ByteKey:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
     84            int8u i;
     85            for (i=0; i<EMBER_ENCRYPTION_KEY_SIZE; i+=8) {
   \   00000006   0x.... 0x....      ADR.W    R5,`?<Constant "%X %X %X %X %X %X %X %X ">`
     86              // To save on buffers, we reduce the number of calls to 
     87              // emberSerialPrintf().
     88              emberSerialPrintf(APP_SERIAL, "%X %X %X %X %X %X %X %X ", 
     89                                key[i+0], key[i+1], key[i+2], key[i+3],
     90                                key[i+4], key[i+5], key[i+6], key[i+7]);
   \   0000000A   0x79E0             LDRB     R0,[R4, #+7]
   \   0000000C   0x9005             STR      R0,[SP, #+20]
   \   0000000E   0x79A0             LDRB     R0,[R4, #+6]
   \   00000010   0x9004             STR      R0,[SP, #+16]
   \   00000012   0x7960             LDRB     R0,[R4, #+5]
   \   00000014   0x9003             STR      R0,[SP, #+12]
   \   00000016   0x7920             LDRB     R0,[R4, #+4]
   \   00000018   0x9002             STR      R0,[SP, #+8]
   \   0000001A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0x7863             LDRB     R3,[R4, #+1]
   \   00000024   0x7822             LDRB     R2,[R4, #+0]
   \   00000026   0x.... 0x....      BL       ?Subroutine4
     91              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_99:
   \   0000002A   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_63:
   \   0000002E   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000030   0x9005             STR      R0,[SP, #+20]
   \   00000032   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000034   0x9004             STR      R0,[SP, #+16]
   \   00000036   0x7B60             LDRB     R0,[R4, #+13]
   \   00000038   0x9003             STR      R0,[SP, #+12]
   \   0000003A   0x7B20             LDRB     R0,[R4, #+12]
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   \   0000003E   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000040   0x9001             STR      R0,[SP, #+4]
   \   00000042   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x7A63             LDRB     R3,[R4, #+9]
   \   00000048   0x7A22             LDRB     R2,[R4, #+8]
   \   0000004A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_98:
   \   0000004E   0x.... 0x....      BL       ?Subroutine1
     92            }
     93            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_62:
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0xB007             ADD      SP,SP,#+28
   \   00000056   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000005A   0x.... 0x....      B.W      emberSerialWaitSend
     94            
     95          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x4629             MOV      R1,R5
   \                     ??Subroutine4_0:
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      emberSerialPrintf
     96          
     97          
     98          
     99          // *********************************
    100          // Set the security keys and the security state - specific to this 
    101          // application, all variants of this application (sink, sensor, 
    102          // sleepy-sensor, mobile-sensor) need to use the same security setup.
    103          // *********************************

   \                                 In section .text, align 2, keep-with-next
    104          void sensorCommonSetupSecurity(void)
    105          {
   \                     sensorCommonSetupSecurity:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    106            boolean status;
    107          
    108            // this application chooses to use a preconfigured link key. This means
    109            // the link key is set on each device.
    110            EmberKeyData preconfiguredLinkKey =
    111              {'Z','i','g','b','e','e',' ','S','e','c','u','r','i','t','y','!'};
   \   00000004   0xA804             ADD      R0,SP,#+16
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant {{90, 105, 103, 98, 101, 101, 32, 8`
   \   0000000A   0x2210             MOVS     R2,#+16
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    112          
    113          #ifdef SINK_APP
    114            // the sink is the security trust center. The trust center needs to
    115            // set the network security key. Other devices besides the trust center 
    116            // do not need to set the network security key.
    117            EmberKeyData networkKey =
    118              {'e','m','b','e','r',' ','E','M','2','5','0',' ','c','h','i','p'};
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant {{101, 109, 98, 101, 114, 32, 69, 7`
   \   00000016   0x2210             MOVS     R2,#+16
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy4
    119          
    120            // this call is located in app/util/security/trust-center.c. This 
    121            // call sets the preconfigured link key, the network key, sets up 
    122            // the correct EmberInitialSecurityState bitmask and sets the 
    123            // networkKeySequenceNumber to 0. If the preconfiguredLinkKey passed
    124            // in is NULL, this picks a random one and assumes joining devices 
    125            // dont have the key. If the preconfiguredLinkKey passed in is a 
    126            // correct key, then it assumes joining devices do have the link
    127            // key preconfigured.
    128            status = trustCenterInit(&preconfiguredLinkKey, &networkKey);
    129           
    130          #else // SINK_APP
    131          
    132            // setup the secutity on non-trust center devices. 
    133            // this call is located in app/util/security/node.c
    134            status = nodeSecurityInit(&preconfiguredLinkKey);
    135          #endif // SINK_APP
    136          
    137          
    138            // print error if necessary
    139            if (!status) {
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0xA804             ADD      R0,SP,#+16
   \   00000020   0x.... 0x....      BL       trustCenterInit
   \   00000024   0xB928             CBNZ.N   R0,??sensorCommonSetupSecurity_0
    140              emberSerialPrintf(APP_SERIAL, "ERROR: initializing security\r\n", 
    141                                status);
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: initializing s...">`
   \   0000002C   0x.... 0x....      BL       ??Subroutine2_0
    142            } else {
   \                     ??CrossCallReturnLabel_88:
   \   00000030   0xE00D             B.N      ??sensorCommonSetupSecurity_1
    143              // if no error, print the keys that were set. Here we print the keys
    144              // that we passed in, we don't use emberGetKey since this only
    145              // returns the correct key if a device is joined.
    146              emberSerialPrintf(APP_SERIAL, "INFO : link key set to: ");
   \                     ??sensorCommonSetupSecurity_0:
   \   00000032   0x.... 0x....      ADR.W    R1,`?<Constant "INFO : link key set to: ">`
   \   00000036   0x.... 0x....      BL       ??Subroutine0_0
    147              sensorCommonPrint16ByteKey(preconfiguredLinkKey.contents);
   \                     ??CrossCallReturnLabel_26:
   \   0000003A   0xA804             ADD      R0,SP,#+16
   \   0000003C   0x.... 0x....      BL       sensorCommonPrint16ByteKey
    148          #ifdef SINK_APP
    149              emberSerialPrintf(APP_SERIAL, "INFO : nwk key set to:  ");
   \   00000040   0x.... 0x....      ADR.W    R1,`?<Constant "INFO : nwk key set to:  ">`
   \   00000044   0x.... 0x....      BL       ??Subroutine0_0
    150              sensorCommonPrint16ByteKey(networkKey.contents);
   \                     ??CrossCallReturnLabel_25:
   \   00000048   0xA800             ADD      R0,SP,#+0
   \   0000004A   0x.... 0x....      BL       sensorCommonPrint16ByteKey
    151          #endif // SINK_APP
    152            }
    153          
    154          }
   \                     ??sensorCommonSetupSecurity_1:
   \   0000004E   0xB009             ADD      SP,SP,#+36
   \   00000050   0xBD00             POP      {PC}             ;; return
    155          
    156          
    157          // *********************************
    158          // print the extendedPanId
    159          // *********************************

   \                                 In section .text, align 2, keep-with-next
    160          void printExtendedPanId(int8u port, int8u *extendedPanId) {
   \                     printExtendedPanId:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    161            int8u i;
    162            emberSerialPrintf(port, "ExtendedPanId: ");
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant "ExtendedPanId: ">`
   \   0000000A   0x.... 0x....      BL       emberSerialPrintf
    163            for (i = 0 ; i < EXTENDED_PAN_ID_SIZE ; i++) {
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0x....             ADR.N    R7,??DataTable87  ;; 0x25, 0x78, 0x00, 0x00
    164              emberSerialPrintf(port, "%x", extendedPanId[i]);
   \                     ??printExtendedPanId_0:
   \   00000012   0x5D72             LDRB     R2,[R6, R5]
   \   00000014   0x4639             MOV      R1,R7
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       emberSerialPrintf
    165            }
   \   0000001C   0x1C76             ADDS     R6,R6,#+1
   \   0000001E   0x2E08             CMP      R6,#+8
   \   00000020   0xD3F7             BCC.N    ??printExtendedPanId_0
    166          }
   \   00000022   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    167          
    168          
    169          // *********************************
    170          // print info about this node
    171          // *********************************

   \                                 In section .text, align 2, keep-with-next
    172          void printNodeInfo(void) {
   \                     printNodeInfo:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    173            int8u channel;
    174            int8u power;
    175            int16u panId;
    176            int8u extendedPanId[EXTENDED_PAN_ID_SIZE];
    177          
    178            channel = emberGetRadioChannel();
   \   00000004   0x.... 0x....      BL       emberGetRadioChannel
   \   00000008   0x4604             MOV      R4,R0
    179            power = emberGetRadioPower();
   \   0000000A   0x.... 0x....      BL       emberGetRadioPower
   \   0000000E   0x4605             MOV      R5,R0
    180            panId = emberGetPanId();
   \   00000010   0x.... 0x....      BL       emberGetPanId
   \   00000014   0x4606             MOV      R6,R0
    181            emberGetExtendedPanId(extendedPanId);
   \   00000016   0xA801             ADD      R0,SP,#+4
   \   00000018   0x.... 0x....      BL       emberGetExtendedPanId
    182          
    183          #ifdef SINK_APP
    184            emberSerialPrintf(APP_SERIAL, "sink ");
   \   0000001C   0x.... 0x....      ADR.W    R1,`?<Constant "sink ">`
   \   00000020   0x.... 0x....      BL       ??Subroutine0_0
    185          #else
    186            emberSerialPrintf(APP_SERIAL, "sensor ");
    187          #endif
    188            emberSerialPrintf(APP_SERIAL, "eui [");
   \                     ??CrossCallReturnLabel_24:
   \   00000024   0x.... 0x....      ADR.W    R1,`?<Constant "eui [">`
   \   00000028   0x.... 0x....      BL       ??Subroutine0_0
    189            printEUI64(APP_SERIAL, (EmberEUI64*)emberGetEui64());
   \                     ??CrossCallReturnLabel_23:
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable97_2
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       printEUI64
    190            emberSerialPrintf(APP_SERIAL, "] short ID [%2x]\r\n", emberGetNodeId());
   \   00000036   0x.... 0x....      BL       emberGetNodeId
   \   0000003A   0x4602             MOV      R2,R0
   \   0000003C   0x.... 0x....      ADR.W    R1,`?<Constant "] short ID [%2x]\\r\\n">`
   \   00000040   0x.... 0x....      BL       ??Subroutine2_0
    191            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_87:
   \   00000044   0x.... 0x....      BL       ?Subroutine1
    192          
    193            if (emberNetworkState() == EMBER_JOINED_NETWORK) {
   \                     ??CrossCallReturnLabel_61:
   \   00000048   0x.... 0x....      BL       emberNetworkState
   \   0000004C   0x2802             CMP      R0,#+2
   \   0000004E   0xD10B             BNE.N    ??printNodeInfo_0
    194              emberSerialPrintf(APP_SERIAL,
    195                              "channel [0x%x], power [0x%x], panId [0x%2x]\r\n",
    196                              channel, power, panId);
   \   00000050   0x9600             STR      R6,[SP, #+0]
   \   00000052   0xB2EB             UXTB     R3,R5
   \   00000054   0x4622             MOV      R2,R4
   \   00000056   0x.... 0x....      ADR.W    R1,`?<Constant "channel [0x%x], power...">`
   \   0000005A   0x.... 0x....      BL       ??Subroutine4_0
    197              printExtendedPanId(APP_SERIAL, extendedPanId);
   \                     ??CrossCallReturnLabel_97:
   \   0000005E   0xA901             ADD      R1,SP,#+4
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x.... 0x....      BL       printExtendedPanId
   \   00000066   0xE007             B.N      ??CrossCallReturnLabel_21
    198            } else {
    199              emberSerialPrintf(APP_SERIAL,
    200                              "channel [N/A], power [N/A], panId [N/A] \r\n");
   \                     ??printNodeInfo_0:
   \   00000068   0x.... 0x....      ADR.W    R1,`?<Constant "channel [N/A], power ...">`
   \   0000006C   0x.... 0x....      BL       ??Subroutine0_0
    201              emberSerialPrintf(APP_SERIAL, "ExtendedPanId [N/A]");
   \                     ??CrossCallReturnLabel_22:
   \   00000070   0x.... 0x....      ADR.W    R1,`?<Constant "ExtendedPanId [N/A]">`
   \   00000074   0x.... 0x....      BL       ??Subroutine0_0
    202            }
    203            emberSerialPrintf(APP_SERIAL, ", stack [%2x], app [2.60]\r\n",
    204                              SOFTWARE_VERSION);
   \                     ??CrossCallReturnLabel_21:
   \   00000078   0xF44F 0x42A0      MOV      R2,#+20480
   \   0000007C   0x.... 0x....      ADR.W    R1,`?<Constant ", stack [%2x], app [2...">`
   \   00000080   0x.... 0x....      BL       ??Subroutine2_0
    205            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_86:
   \   00000084   0x.... 0x....      BL       ?Subroutine1
    206            emberSerialPrintf(APP_SERIAL, "security level [%x]\r\n",
    207                              EMBER_SECURITY_LEVEL);
   \                     ??CrossCallReturnLabel_60:
   \   00000088   0x2205             MOVS     R2,#+5
   \   0000008A   0x.... 0x....      ADR.W    R1,`?<Constant "security level [%x]\\r\\n">`
   \   0000008E   0x.... 0x....      BL       ??Subroutine2_0
    208            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_85:
   \   00000092   0x.... 0x....      BL       ?Subroutine1
    209          #ifdef SENSOR_APP
    210            printDataMode();
    211          #endif
    212          
    213          #ifdef DEBUG
    214            emberSerialPrintf(APP_SERIAL, "DEBUG IS ON\r\n");
   \                     ??CrossCallReturnLabel_59:
   \   00000096   0x.... 0x....      ADR.W    R1,`?<Constant "DEBUG IS ON\\r\\n">`
   \   0000009A   0x.... 0x....      BL       ??Subroutine0_0
    215            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_20:
   \   0000009E   0x.... 0x....      BL       ?Subroutine1
    216          #endif
    217          
    218          }
   \                     ??CrossCallReturnLabel_58:
   \   000000A2   0xBD7F             POP      {R0-R6,PC}       ;; return
    219          
    220          #if EMBER_SECURITY_LEVEL == 5
    221          /******************************************************************************
    222          // Print the Keys
    223          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    224          void sensorCommonPrintKeys(void) {
   \                     sensorCommonPrintKeys:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    225            EmberKeyStruct keyStruct;
    226            EmberKeyType keyType = EMBER_TRUST_CENTER_LINK_KEY;
   \   00000004   0x2401             MOVS     R4,#+1
    227            EmberNetworkStatus networkStatus; 
    228            int8u keyTypesMax = 2;
    229            int8u i;
    230          
    231            networkStatus = emberNetworkState();
   \   00000006   0x.... 0x....      BL       emberNetworkState
    232            
    233            if (networkStatus == EMBER_JOINED_NETWORK ||
    234                networkStatus == EMBER_JOINED_NETWORK_NO_PARENT) {
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xBF18             IT       NE 
   \   0000000E   0x2803             CMPNE    R0,#+3
   \   00000010   0xD119             BNE.N    ??sensorCommonPrintKeys_0
    235          
    236              for (i=1; i<=keyTypesMax; i++) {
   \   00000012   0x2502             MOVS     R5,#+2
   \   00000014   0x.... 0x....      ADR.W    R6,`?<Constant "EMBER_CURRENT_NETWORK...">`
   \   00000018   0x.... 0x....      ADR.W    R7,`?<Constant "EMBER_TRUST_CENTER_LI...">`
    237                //Get the key data
    238                emberGetKey(keyType, &keyStruct);
   \                     ??sensorCommonPrintKeys_1:
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       emberGetKey
    239                
    240                if (keyType == EMBER_TRUST_CENTER_LINK_KEY) {
   \   00000024   0x2C01             CMP      R4,#+1
   \   00000026   0xBF0C             ITE      EQ 
   \   00000028   0x4639             MOVEQ    R1,R7
   \   0000002A   0x4631             MOVNE    R1,R6
    241                  emberSerialPrintf(APP_SERIAL,"EMBER_TRUST_CENTER_LINK_KEY: ");
    242                } else {
    243                  emberSerialPrintf(APP_SERIAL,"EMBER_CURRENT_NETWORK_KEY:  ");
   \   0000002C   0x.... 0x....      BL       ??Subroutine0_0
    244                }
    245          
    246                //print the key
    247                sensorCommonPrint16ByteKey(emberKeyContents(&keyStruct.key));
   \                     ??CrossCallReturnLabel_19:
   \   00000030   0xF10D 0x0003      ADD      R0,SP,#+3
   \   00000034   0x.... 0x....      BL       sensorCommonPrint16ByteKey
    248                sensorPrintKeyOptions(&keyStruct);
   \   00000038   0xA800             ADD      R0,SP,#+0
   \   0000003A   0x.... 0x....      BL       sensorPrintKeyOptions
    249          
    250                //change key type
    251                keyType = EMBER_CURRENT_NETWORK_KEY;
   \   0000003E   0x2403             MOVS     R4,#+3
    252              }
   \   00000040   0x1E6D             SUBS     R5,R5,#+1
   \   00000042   0xD1EB             BNE.N    ??sensorCommonPrintKeys_1
   \   00000044   0xE003             B.N      ??CrossCallReturnLabel_18
    253          
    254              // print the link key table - sensor app doesnt use link keys
    255              // so comment this code out
    256              /*
    257          	{
    258          	    EmberStatus status;
    259          
    260              emberSerialPrintf(APP_SERIAL, "Link Key Table, size = 0x%x", 
    261                                EMBER_KEY_TABLE_SIZE);
    262              for (i=0; i<EMBER_KEY_TABLE_SIZE; i++) {
    263                status = emberGetKeyTableEntry(i, &keyStruct);
    264                emberSerialPrintf(APP_SERIAL, "\r\n%x:", i);
    265          
    266                switch (status) {
    267                case EMBER_KEY_INVALID:
    268                  emberSerialPrintf(APP_SERIAL, "invalid key");
    269                  break;
    270                case EMBER_INDEX_OUT_OF_RANGE:
    271                  emberSerialPrintf(APP_SERIAL, "index out of range");
    272                  break;
    273                case EMBER_SUCCESS:
    274                  sensorCommonPrint16ByteKey(emberKeyContents(&keyStruct.key));
    275                  sensorPrintKeyOptions(&keyStruct);
    276                  break;
    277                case EMBER_LIBRARY_NOT_PRESENT:
    278                  emberSerialPrintf(APP_SERIAL, "link key library not present");
    279                  break;
    280                default:
    281                  emberSerialPrintf(APP_SERIAL, "unknown status 0x%x", status);
    282                }
    283              }
    284          }    */
    285            } else {
    286              emberSerialPrintf(APP_SERIAL,
    287                "INFO : not a valid network state to query the keys \r\n ");
   \                     ??sensorCommonPrintKeys_0:
   \   00000046   0x.... 0x....      ADR.W    R1,`?<Constant "INFO : not a valid ne...">`
   \   0000004A   0x.... 0x....      BL       ??Subroutine0_0
    288            }
    289          }
   \                     ??CrossCallReturnLabel_18:
   \   0000004E   0xB00B             ADD      SP,SP,#+44
   \   00000050   0xBDF0             POP      {R4-R7,PC}       ;; return
    290          #endif //EMBER_SECURITY_LEVEL == 5
    291          
    292          
    293          // ********************************
    294          // to print address table
    295          // ********************************

   \                                 In section .text, align 2, keep-with-next
    296          void printAddressTable(int8u tableSize) {
   \                     printAddressTable:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
    297              int8u i;
    298              EmberEUI64 remoteEui64;
    299              EmberNodeId remoteNodeId;
    300              int8u indexLow;
    301              int8u indexHigh;
    302          
    303              emberSerialPrintf(APP_SERIAL, "Index  Inuse  NodeId   Eui64");
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant "Index  Inuse  NodeId ...">`
   \   0000000A   0x.... 0x....      BL       ??Subroutine0_0
    304          #ifdef SINK_APP
    305              emberSerialPrintf(APP_SERIAL, "             Age");
   \                     ??CrossCallReturnLabel_17:
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant "             Age">`
   \   00000012   0x.... 0x....      BL       ??Subroutine0_0
    306          #endif
    307              emberSerialPrintf(APP_SERIAL, "\r\n");
   \                     ??CrossCallReturnLabel_16:
   \   00000016   0x....             ADR.N    R4,??DataTable85_3  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000018   0x4621             MOV      R1,R4
   \   0000001A   0x.... 0x....      BL       ??Subroutine0_0
    308              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_15:
   \   0000001E   0x.... 0x....      BL       ?Subroutine1
    309          
    310              for (i=0; i<tableSize; i++) {
   \                     ??CrossCallReturnLabel_57:
   \   00000022   0x2600             MOVS     R6,#+0
   \   00000024   0x.... 0x....      ADR.W    R9,`?<Constant "  TRUE ">`
   \   00000028   0x.... 0x....      ADR.W    R10,`?<Constant "  FALSE">`
   \   0000002C   0xF64F 0x7BFF      MOVW     R11,#+65535
   \   00000030   0x.... 0x....      ADR.W    R8,`?<Constant " %c%c: ">`
   \   00000034   0x250A             MOVS     R5,#+10
   \   00000036   0xE017             B.N      ??printAddressTable_0
    311                indexLow = (i % 10) + 48;
    312                indexHigh = ((i - (i % 10))/10) + 48;
    313          
    314                emberSerialPrintf(APP_SERIAL, " %c%c: ",
    315                                  indexHigh, indexLow);
    316          
    317                remoteNodeId = emberGetAddressTableRemoteNodeId(i);
    318                if (remoteNodeId == EMBER_TABLE_ENTRY_UNUSED_NODE_ID)
    319                  emberSerialPrintf(APP_SERIAL, "  FALSE");
    320                else
    321                  emberSerialPrintf(APP_SERIAL, "  TRUE ");
    322          
    323                switch (remoteNodeId) {
    324                case EMBER_TABLE_ENTRY_UNUSED_NODE_ID:
    325                  emberSerialPrintf(APP_SERIAL, "  UNUSED   ", remoteNodeId);
   \                     ??printAddressTable_1:
   \   00000038   0x.... 0x....      BL       ??Subroutine2_0
    326                  break;
    327                case EMBER_UNKNOWN_NODE_ID:
    328                  emberSerialPrintf(APP_SERIAL, "  UNKNOWN  ", remoteNodeId);
    329                  break;
    330                case EMBER_DISCOVERY_ACTIVE_NODE_ID:
    331                  emberSerialPrintf(APP_SERIAL, "  DISC ACT ", remoteNodeId);
    332                  break;
    333                default:
    334                  emberSerialPrintf(APP_SERIAL, "  0x%2x   ", remoteNodeId);
    335                  break;
    336                }
    337          
    338                emberGetAddressTableRemoteEui64(i, remoteEui64);
   \                     ??CrossCallReturnLabel_84:
   \   0000003C   0xA900             ADD      R1,SP,#+0
   \   0000003E   0xB2F0             UXTB     R0,R6
   \   00000040   0x.... 0x....      BL       emberGetAddressTableRemoteEui64
    339                printEUI64(APP_SERIAL, &remoteEui64);
   \   00000044   0xA900             ADD      R1,SP,#+0
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      BL       printEUI64
    340          
    341          #ifdef SINK_APP
    342                emberSerialPrintf(APP_SERIAL, "  0x%2x", ticksSinceLastHeard[i]);
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable97_3
   \   00000050   0xF830 0x2016      LDRH     R2,[R0, R6, LSL #+1]
   \   00000054   0x.... 0x....      ADR.W    R1,`?<Constant "  0x%2x">`
   \   00000058   0x.... 0x....      BL       ??Subroutine2_0
    343          #endif
    344                emberSerialPrintf(APP_SERIAL, "\r\n");
   \                     ??CrossCallReturnLabel_83:
   \   0000005C   0x4621             MOV      R1,R4
   \   0000005E   0x.... 0x....      BL       ??Subroutine0_0
    345                emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_14:
   \   00000062   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_56:
   \   00000066   0x1C76             ADDS     R6,R6,#+1
   \                     ??printAddressTable_0:
   \   00000068   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000006C   0x4286             CMP      R6,R0
   \   0000006E   0xDA31             BGE.N    ??printAddressTable_2
   \   00000070   0xFB96 0xF0F5      SDIV     R0,R6,R5
   \   00000074   0xFB05 0x6110      MLS      R1,R5,R0,R6
   \   00000078   0xF101 0x0330      ADD      R3,R1,#+48
   \   0000007C   0xB2DB             UXTB     R3,R3
   \   0000007E   0x4368             MULS     R0,R0,R5
   \   00000080   0xFB90 0xF0F5      SDIV     R0,R0,R5
   \   00000084   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000088   0xB2D2             UXTB     R2,R2
   \   0000008A   0x4641             MOV      R1,R8
   \   0000008C   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_96:
   \   00000090   0xB2F0             UXTB     R0,R6
   \   00000092   0x.... 0x....      BL       emberGetAddressTableRemoteNodeId
   \   00000096   0x4607             MOV      R7,R0
   \   00000098   0x455F             CMP      R7,R11
   \   0000009A   0xBF0C             ITE      EQ 
   \   0000009C   0x4651             MOVEQ    R1,R10
   \   0000009E   0x4649             MOVNE    R1,R9
   \   000000A0   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_13:
   \   000000A4   0xF64F 0x71FC      MOVW     R1,#+65532
   \   000000A8   0x1A78             SUBS     R0,R7,R1
   \   000000AA   0xD00F             BEQ.N    ??printAddressTable_3
   \   000000AC   0x1E40             SUBS     R0,R0,#+1
   \   000000AE   0xD008             BEQ.N    ??printAddressTable_4
   \   000000B0   0x1E80             SUBS     R0,R0,#+2
   \   000000B2   0xBF07             ITTEE    EQ 
   \   000000B4   0x465A             MOVEQ    R2,R11
   \   000000B6   0x.... 0x....      ADREQ.W  R1,`?<Constant "  UNUSED   ">`
   \   000000BA   0x463A             MOVNE    R2,R7
   \   000000BC   0x.... 0x....      ADRNE.W  R1,`?<Constant "  0x%2x   ">`
   \   000000C0   0xE7BA             B.N      ??printAddressTable_1
   \                     ??printAddressTable_4:
   \   000000C2   0xF64F 0x72FD      MOVW     R2,#+65533
   \   000000C6   0x.... 0x....      ADR.W    R1,`?<Constant "  UNKNOWN  ">`
   \   000000CA   0xE7B5             B.N      ??printAddressTable_1
   \                     ??printAddressTable_3:
   \   000000CC   0x460A             MOV      R2,R1
   \   000000CE   0x.... 0x....      ADR.W    R1,`?<Constant "  DISC ACT ">`
   \   000000D2   0xE7B1             B.N      ??printAddressTable_1
    346              }
    347          }
   \                     ??printAddressTable_2:
   \   000000D4   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberSerialPrintf
    348          
    349          // ********************************
    350          // to print multicast table
    351          // ********************************

   \                                 In section .text, align 2, keep-with-next
    352          void printMulticastTable(int8u tableSize) {
   \                     printMulticastTable:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
    353              int8u i;
    354              EmberMulticastTableEntry *multicastTableEntry;
    355              int8u indexLow;
    356              int8u indexHigh;
    357          
    358              emberSerialPrintf(APP_SERIAL, "Index  MulticastId  Endpoint\r\n");
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant "Index  MulticastId  E...">`
   \   0000000A   0x.... 0x....      BL       ??Subroutine0_0
    359              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_12:
   \   0000000E   0x.... 0x....      BL       ?Subroutine1
    360          
    361              for (i=0, multicastTableEntry = emberMulticastTable;
   \                     ??CrossCallReturnLabel_55:
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable97_4
   \   00000018   0x6806             LDR      R6,[R0, #+0]
   \   0000001A   0x.... 0x....      ADR.W    R10,`?<Constant "  0x%x\\r\\n">`
   \   0000001E   0x.... 0x....      ADR.W    R8,`?<Constant "  0x%2x     ">`
   \   00000022   0x.... 0x....      ADR.W    R9,`?<Constant " %c%c:   ">`
   \   00000026   0x270A             MOVS     R7,#+10
   \   00000028   0xE01C             B.N      ??printMulticastTable_0
    362                   i<tableSize; 
    363                   i++, multicastTableEntry++) {
    364                indexLow = (i % 10) + 48;
    365                indexHigh = ((i - (i % 10))/10) + 48;
    366                emberSerialPrintf(APP_SERIAL, " %c%c:   ",
    367                                  indexHigh, indexLow);
   \                     ??printMulticastTable_1:
   \   0000002A   0xFB95 0xF0F7      SDIV     R0,R5,R7
   \   0000002E   0xFB07 0x5110      MLS      R1,R7,R0,R5
   \   00000032   0xF101 0x0330      ADD      R3,R1,#+48
   \   00000036   0xB2DB             UXTB     R3,R3
   \   00000038   0x4378             MULS     R0,R0,R7
   \   0000003A   0xFB90 0xF0F7      SDIV     R0,R0,R7
   \   0000003E   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000042   0xB2D2             UXTB     R2,R2
   \   00000044   0x4649             MOV      R1,R9
   \   00000046   0x.... 0x....      BL       ?Subroutine3
    368                emberSerialPrintf(APP_SERIAL, "  0x%2x     ", 
    369                                  multicastTableEntry->multicastId);
   \                     ??CrossCallReturnLabel_95:
   \   0000004A   0xF836 0x2B02      LDRH     R2,[R6], #+2
   \   0000004E   0x4641             MOV      R1,R8
   \   00000050   0x.... 0x....      BL       ??Subroutine2_0
    370                emberSerialPrintf(APP_SERIAL, "  0x%x\r\n", 
    371                                  multicastTableEntry->endpoint);
   \                     ??CrossCallReturnLabel_82:
   \   00000054   0xF816 0x2B02      LDRB     R2,[R6], #+2
   \   00000058   0x4651             MOV      R1,R10
   \   0000005A   0x.... 0x....      BL       ??Subroutine2_0
    372                emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_81:
   \   0000005E   0x.... 0x....      BL       ?Subroutine1
    373              }
   \                     ??CrossCallReturnLabel_54:
   \   00000062   0x1C6D             ADDS     R5,R5,#+1
   \                     ??printMulticastTable_0:
   \   00000064   0x42A5             CMP      R5,R4
   \   00000066   0xDBE0             BLT.N    ??printMulticastTable_1
    374          }
   \   00000068   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    375          
    376          // *********************************
    377          // utility for printing EUI64 addresses
    378          // *********************************

   \                                 In section .text, align 2, keep-with-next
    379          void printEUI64(int8u port, EmberEUI64* eui) {
   \                     printEUI64:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    380            int8u i;
    381            int8u* p = (int8u*)eui;
    382            for (i=8; i>0; i--) {
   \   00000006   0x2608             MOVS     R6,#+8
   \   00000008   0x....             ADR.N    R7,??DataTable87  ;; 0x25, 0x78, 0x00, 0x00
    383              emberSerialPrintf(port, "%x", p[i-1]);
   \                     ??printEUI64_0:
   \   0000000A   0x1970             ADDS     R0,R6,R5
   \   0000000C   0xF810 0x2C01      LDRB     R2,[R0, #-1]
   \   00000010   0x4639             MOV      R1,R7
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       emberSerialPrintf
    384            }
   \   00000018   0x1E76             SUBS     R6,R6,#+1
   \   0000001A   0xD1F6             BNE.N    ??printEUI64_0
    385          }
   \   0000001C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    386          
    387          // *********************************
    388          // print the node's tokens
    389          // *********************************

   \                                 In section .text, align 2, keep-with-next
    390          void printTokens() {
   \                     printTokens:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    391            tokTypeStackNodeData tokNodeData;
    392            tokTypeStackKeys tokKeys;
    393            int i;
    394          
    395            halCommonGetToken(&tokNodeData, TOKEN_STACK_NODE_DATA);
   \   00000004   0x2310             MOVS     R3,#+16
   \   00000006   0x227F             MOVS     R2,#+127
   \   00000008   0x2107             MOVS     R1,#+7
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       halInternalGetTokenData
    396            halCommonGetToken(&tokKeys, TOKEN_STACK_KEYS);
   \   00000010   0x2311             MOVS     R3,#+17
   \   00000012   0x227F             MOVS     R2,#+127
   \   00000014   0x2106             MOVS     R1,#+6
   \   00000016   0xA804             ADD      R0,SP,#+16
   \   00000018   0x.... 0x....      BL       halInternalGetTokenData
    397          
    398            emberSerialPrintf(APP_SERIAL, "PAN_ID: 0x%2x\r\n",
    399                              tokNodeData.panId);
   \   0000001C   0xF8BD 0x2000      LDRH     R2,[SP, #+0]
   \   00000020   0x.... 0x....      ADR.W    R1,`?<Constant "PAN_ID: 0x%2x\\r\\n">`
   \   00000024   0x.... 0x....      BL       ??Subroutine2_0
    400            emberSerialPrintf(APP_SERIAL, "RADIO_TX_POWER: 0x%x\r\n",
    401                              tokNodeData.radioTxPower);
   \                     ??CrossCallReturnLabel_80:
   \   00000028   0xF99D 0x2002      LDRSB    R2,[SP, #+2]
   \   0000002C   0x.... 0x....      ADR.W    R1,`?<Constant "RADIO_TX_POWER: 0x%x\\r\\n">`
   \   00000030   0x.... 0x....      BL       ??Subroutine2_0
    402            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_79:
   \   00000034   0x.... 0x....      BL       ?Subroutine1
    403          
    404            emberSerialPrintf(APP_SERIAL, "RADIO_FREQ_CHANNEL: 0x%x\r\n",
    405                              tokNodeData.radioFreqChannel);
   \                     ??CrossCallReturnLabel_53:
   \   00000038   0xF89D 0x2003      LDRB     R2,[SP, #+3]
   \   0000003C   0x.... 0x....      ADR.W    R1,`?<Constant "RADIO_FREQ_CHANNEL: 0...">`
   \   00000040   0x.... 0x....      BL       ??Subroutine2_0
    406            emberSerialPrintf(APP_SERIAL, "STACK_PROFILE: 0x%x\r\n",
    407                              tokNodeData.stackProfile);
   \                     ??CrossCallReturnLabel_78:
   \   00000044   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000048   0x.... 0x....      ADR.W    R1,`?<Constant "STACK_PROFILE: 0x%x\\r\\n">`
   \   0000004C   0x.... 0x....      BL       ??Subroutine2_0
    408            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_77:
   \   00000050   0x.... 0x....      BL       ?Subroutine1
    409          
    410            emberSerialPrintf(APP_SERIAL, "NODE_TYPE: 0x%x\r\n",
    411                              tokNodeData.nodeType);
   \                     ??CrossCallReturnLabel_52:
   \   00000054   0xF89D 0x2005      LDRB     R2,[SP, #+5]
   \   00000058   0x.... 0x....      ADR.W    R1,`?<Constant "NODE_TYPE: 0x%x\\r\\n">`
   \   0000005C   0x.... 0x....      BL       ??Subroutine2_0
    412            emberSerialPrintf(APP_SERIAL, "NETWORK_KEY: 0x");
   \                     ??CrossCallReturnLabel_76:
   \   00000060   0x.... 0x....      ADR.W    R1,`?<Constant "NETWORK_KEY: 0x">`
   \   00000064   0x.... 0x....      BL       ??Subroutine0_0
    413            for (i=0;i<16;i++) {
   \                     ??CrossCallReturnLabel_11:
   \   00000068   0x2400             MOVS     R4,#+0
   \   0000006A   0x....             ADR.N    R5,??DataTable87  ;; 0x25, 0x78, 0x00, 0x00
    414              emberSerialPrintf(APP_SERIAL, "%x", tokKeys.networkKey[i]);
   \                     ??printTokens_0:
   \   0000006C   0xA804             ADD      R0,SP,#+16
   \   0000006E   0x5C22             LDRB     R2,[R4, R0]
   \   00000070   0x4629             MOV      R1,R5
   \   00000072   0x.... 0x....      BL       ??Subroutine2_0
    415              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_75:
   \   00000076   0x.... 0x....      BL       ?Subroutine1
    416            }
   \                     ??CrossCallReturnLabel_51:
   \   0000007A   0x1C64             ADDS     R4,R4,#+1
   \   0000007C   0x2C10             CMP      R4,#+16
   \   0000007E   0xDBF5             BLT.N    ??printTokens_0
    417            emberSerialPrintf(APP_SERIAL, "\r\n");
   \   00000080   0x.... 0x....      BL       ?Subroutine0
    418            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_41:
   \   00000084   0x.... 0x....      BL       ?Subroutine1
    419          
    420            emberSerialPrintf(APP_SERIAL, "ACTIVE_KEY_SEQ_NUM: 0x%x\r\n",
    421                              tokKeys.activeKeySeqNum);
   \                     ??CrossCallReturnLabel_50:
   \   00000088   0xF89D 0x2020      LDRB     R2,[SP, #+32]
   \   0000008C   0x.... 0x....      ADR.W    R1,`?<Constant "ACTIVE_KEY_SEQ_NUM: 0...">`
   \   00000090   0x.... 0x....      BL       ??Subroutine2_0
    422            emberSerialPrintf(APP_SERIAL, "ZIGBEE_NODE_ID: 0x%2x\r\n",
    423                              tokNodeData.zigbeeNodeId);
   \                     ??CrossCallReturnLabel_74:
   \   00000094   0xF8BD 0x2006      LDRH     R2,[SP, #+6]
   \   00000098   0x.... 0x....      ADR.W    R1,`?<Constant "ZIGBEE_NODE_ID: 0x%2x\\r\\n">`
   \   0000009C   0x.... 0x....      BL       ??Subroutine2_0
    424            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_73:
   \   000000A0   0x.... 0x....      BL       ?Subroutine1
    425          }
   \                     ??CrossCallReturnLabel_49:
   \   000000A4   0xB009             ADD      SP,SP,#+36
   \   000000A6   0xBD30             POP      {R4,R5,PC}       ;; return
    426          
    427          
    428          // *********************************************************************
    429          // the next set of variables are needed to support EM250 bootloader.
    430          #ifdef USE_BOOTLOADER_LIB
    431          

   \                                 In section .bss, align 4
    432          EmberNodeId bootloadInProgressChildId;
    433          EmberEUI64  bootloadInProgressEui;
    434          void sendBootloaderLaunchMessage(EmberEUI64 targetEui);
    435          boolean parentLaunchBootload = FALSE;
   \                     parentLaunchBootload:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \                     bootloadInProgressChildId:
   \   00000002                      DS8 2
   \                     bootloadInProgressEui:
   \   00000004                      DS8 8
    436          
    437          #endif // USE_BOOTLOADER_LIB
    438          
    439          #if defined(SENSOR_APP) || defined(SINK_APP)
    440          // *********************************************************************
    441          // The follwing section has to do with sending APS messages to sleeping
    442          // children. This code is needed by devices that act as parents
    443          
    444          // Called when the parent receives a MSG_SINK_QUERY. The parent will
    445          // respond with a MSG_SINK_ADVERTISE

   \                                 In section .text, align 2, keep-with-next
    446          void handleSinkQuery(EmberNodeId childId)
    447          {
   \                     handleSinkQuery:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    448            EmberMessageBuffer buffer;
    449            EmberApsFrame apsFrame;
    450          
    451            if (mainSinkFound == TRUE) {
    452              EmberStatus status;
    453          
    454              // the data - sink long address (EUI), sink short address
    455              MEMCOPY(&(globalBuffer[0]), sinkEUI, EUI64_SIZE);
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable97_5
   \   0000000A   0x2208             MOVS     R2,#+8
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable97_2
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       halCommonMemCopy
    456              emberStoreLowHighInt16u(&(globalBuffer[EUI64_SIZE]), sinkShortAddress);
   \   00000016   0x.... 0x....      BL       emberGetNodeId
   \   0000001A   0x4601             MOV      R1,R0
   \   0000001C   0xF105 0x0008      ADD      R0,R5,#+8
   \   00000020   0x.... 0x....      BL       emberStoreLowHighInt16u
    457          
    458              // copy the data into a packet buffer
    459              buffer = emberFillLinkedBuffers((int8u*)globalBuffer, EUI64_SIZE + 2);
   \   00000024   0x210A             MOVS     R1,#+10
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       emberFillLinkedBuffers
   \   0000002C   0x4605             MOV      R5,R0
    460          
    461              // check to make sure a buffer is available
    462              if (buffer == EMBER_NULL_MESSAGE_BUFFER) {
   \   0000002E   0x2DFF             CMP      R5,#+255
   \   00000030   0xD104             BNE.N    ??handleSinkQuery_0
    463                emberSerialPrintf(APP_SERIAL,
    464                                  "TX ERROR [sink advertise], OUT OF BUFFERS\r\n");
   \   00000032   0x.... 0x....      ADR.W    R1,`?<Constant "TX ERROR [sink advert...">`
   \   00000036   0x.... 0x....      BL       ??Subroutine0_0
    465                return;
   \                     ??CrossCallReturnLabel_10:
   \   0000003A   0xBD7F             POP      {R0-R6,PC}
    466              }
    467          
    468              // all of the defined values below are from app/sensor-host/common.h
    469              // with the exception of the options from stack/include/ember.h
    470              apsFrame.profileId = PROFILE_ID;          // profile unique to this app
   \                     ??handleSinkQuery_0:
   \   0000003C   0xF24C 0x000F      MOVW     R0,#+49167
   \   00000040   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    471              apsFrame.clusterId = MSG_SINK_ADVERTISE;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    472              apsFrame.sourceEndpoint = ENDPOINT;       // sensor endpoint
   \   0000004A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    473              apsFrame.destinationEndpoint = ENDPOINT;  // sensor endpoint
   \   0000004E   0xF88D 0x0005      STRB     R0,[SP, #+5]
    474              apsFrame.options = EMBER_APS_OPTION_RETRY;
   \   00000052   0x2040             MOVS     R0,#+64
   \   00000054   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    475          
    476              // send the message
    477              status = emberSendUnicast(EMBER_OUTGOING_DIRECT,
    478                                        childId, 
    479                                        &apsFrame,
    480                                        buffer);
   \   00000058   0x462B             MOV      R3,R5
   \   0000005A   0xAA00             ADD      R2,SP,#+0
   \   0000005C   0x4621             MOV      R1,R4
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       emberSendUnicast
   \   00000064   0x4606             MOV      R6,R0
    481          
    482              // done with the packet buffer
    483              emberReleaseMessageBuffer(buffer);
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       emReleaseMessageBuffer
    484          
    485              if (status != EMBER_SUCCESS) {
   \   0000006C   0xB13E             CBZ.N    R6,??CrossCallReturnLabel_48
    486                emberSerialPrintf(APP_SERIAL, 
    487                                  "ERROR: send unicast, child %2x, status %x\r\n",
    488                                  childId, status);
   \   0000006E   0x4633             MOV      R3,R6
   \   00000070   0x4622             MOV      R2,R4
   \   00000072   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: send unicast, ...">`
   \   00000076   0x.... 0x....      BL       ?Subroutine3
    489                emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_94:
   \   0000007A   0x.... 0x....      BL       ?Subroutine1
    490              }
    491            }
   \                     ??CrossCallReturnLabel_48:
   \   0000007E   0xBD7F             POP      {R0-R6,PC}       ;; return
    492          }
    493          
    494          // bitmasks to tell which children have or have not been sent a
    495          // partcular JIT message - one bitmask per message. This can support
    496          // up to 16 children

   \                                 In section .data, align 4
    497          int16u jitMaskMulticastHello;
    498          
    499          // Message Buffers are allocated for each message type
    500          EmberMessageBuffer jitMessageMulticastHello = EMBER_NULL_MESSAGE_BUFFER;
    501          
    502          // all JIT messages in this app use the same APS frame setup except
    503          // for the clusterID. The APS header is setup before it is needed to
    504          // save time. Only the clusterID is modified before a message is sent
    505          EmberApsFrame jitMessageApsFrame;
   \                     jitMessageApsFrame:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     jitMessageMulticastHello:
   \   0000000C   0xFF               DC8 255
   \   0000000D   0x00               DC8 0
   \                     jitMaskMulticastHello:
   \   0000000E   0x00 0x00          DC8 0, 0
    506          
    507          
    508          // Called from appAddJitForAllChildren which is called when the parent
    509          // receives a message that it must turn into a JIT message.
    510          //
    511          // This fills in the Message Buffer for the JIT message type passed in
    512          // if it has not already been filled in. It also updates the data in the
    513          // MessageBuffer to the data passed in.

   \                                 In section .text, align 4, keep-with-next
    514          void createAndStoreJitMessage(int8u messageType,
    515                                        EmberMessageBuffer* globalJitBuffer,
    516                                        int8u* data,
    517                                        int8u dataLength)
    518          {
   \                     createAndStoreJitMessage:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4607             MOV      R7,R0
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4615             MOV      R5,R2
   \   00000008   0x461E             MOV      R6,R3
    519            // make sure we don't put in too much data and overrun the packet buffer
    520            if (dataLength  > PACKET_BUFFER_SIZE)
   \   0000000A   0x2E21             CMP      R6,#+33
   \   0000000C   0xD306             BCC.N    ??createAndStoreJitMessage_0
    521            {
    522              assert(FALSE);
   \   0000000E   0xB507             PUSH {R0,R1,R2,LR}
   \   00000010   0xF240 0x210A      MOVW     R1,#+522
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "common.c">`
   \   00000018   0x.... 0x....      BL       halInternalAssertFailed
    523            }
    524          
    525            // if this is the first time we are creating the JIT message then
    526            // setup the aps header. Also allocate a buffer
    527            if ((*globalJitBuffer) == EMBER_NULL_MESSAGE_BUFFER)
   \                     ??createAndStoreJitMessage_0:
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x28FF             CMP      R0,#+255
   \   00000020   0xD11E             BNE.N    ??createAndStoreJitMessage_1
    528            {
    529              emberSerialPrintf(APP_SERIAL, "EVENT: creating JIT msg 0x%x\r\n", 
    530                                messageType);
   \   00000022   0x463A             MOV      R2,R7
   \   00000024   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: creating JIT m...">`
   \   00000028   0x.... 0x....      BL       ??Subroutine2_0
    531              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_72:
   \   0000002C   0x.... 0x....      BL       ?Subroutine1
    532          
    533              jitMessageApsFrame.sourceEndpoint = ENDPOINT;
   \                     ??CrossCallReturnLabel_47:
   \   00000030   0x....             LDR.N    R0,??DataTable97_6
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x7101             STRB     R1,[R0, #+4]
    534              jitMessageApsFrame.destinationEndpoint = ENDPOINT;
   \   00000036   0x7141             STRB     R1,[R0, #+5]
    535              // the cluster ID will change based on the message
    536              //jitMessageApsFrame.clusterId      = clusterId;
    537              jitMessageApsFrame.profileId      = PROFILE_ID;
   \   00000038   0xF24C 0x010F      MOVW     R1,#+49167
   \   0000003C   0x8001             STRH     R1,[R0, #+0]
    538              jitMessageApsFrame.options        = EMBER_APS_OPTION_POLL_RESPONSE;
   \   0000003E   0xF44F 0x5100      MOV      R1,#+8192
   \   00000042   0x80C1             STRH     R1,[R0, #+6]
    539          
    540              (*globalJitBuffer) = emberFillLinkedBuffers(data,
    541                                                       dataLength);
   \   00000044   0x4631             MOV      R1,R6
   \   00000046   0x4628             MOV      R0,R5
   \   00000048   0x.... 0x....      BL       emberFillLinkedBuffers
   \   0000004C   0x7020             STRB     R0,[R4, #+0]
    542              if ((*globalJitBuffer) == EMBER_NULL_MESSAGE_BUFFER) {
   \   0000004E   0x28FF             CMP      R0,#+255
   \   00000050   0xD106             BNE.N    ??createAndStoreJitMessage_1
    543                emberSerialPrintf(APP_SERIAL, "ERROR: no buffers to construct JIT message!\r\n");
   \   00000052   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: no buffers to ...">`
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   0000005C   0x.... 0x....      B.W      emberSerialPrintf
    544                return;
    545              }
    546            }
   \                     ??createAndStoreJitMessage_1:
   \   00000060   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    547          
    548          }
    549          
    550          // Called when the parent receives a message that it must turn into
    551          // a JIT message.
    552          //
    553          // this sets the JIT message flag for all children, and sets
    554          // the bitmask that the application uses to make sure it doesn't
    555          // send the same JIT message to a child more than once.

   \                                 In section .text, align 2, keep-with-next
    556          void appAddJitForAllChildren(int8u msgType, 
    557                                       int8u* data, 
    558                                       int8u dataLength)
    559          {
   \                     appAddJitForAllChildren:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    560            int8u i;
    561            EmberStatus status;
    562          
    563            if (msgType == MSG_MULTICAST_HELLO) {
   \   00000004   0xF64F 0x74FF      MOVW     R4,#+65535
   \   00000008   0x2864             CMP      R0,#+100
   \   0000000A   0xD108             BNE.N    ??appAddJitForAllChildren_0
    564              jitMaskMulticastHello = 0xFFFF;
   \   0000000C   0x....             LDR.N    R0,??DataTable97_6
   \   0000000E   0x81C4             STRH     R4,[R0, #+14]
    565              createAndStoreJitMessage(MSG_MULTICAST_HELLO,
    566                                       &jitMessageMulticastHello,
    567                                       data, dataLength);
   \   00000010   0x4613             MOV      R3,R2
   \   00000012   0x460A             MOV      R2,R1
   \   00000014   0xF100 0x010C      ADD      R1,R0,#+12
   \   00000018   0x2064             MOVS     R0,#+100
   \   0000001A   0x.... 0x....      BL       createAndStoreJitMessage
    568            }
    569          
    570            // set the message flag for all children
    571            emberSerialPrintf(APP_SERIAL, "JIT: setting flag, for all children\r\n");
   \                     ??appAddJitForAllChildren_0:
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "JIT: setting flag, fo...">`
   \   00000022   0x.... 0x....      BL       ??Subroutine0_0
    572          
    573            for (i=0; i<emberMaxChildCount(); i++)
   \                     ??CrossCallReturnLabel_9:
   \   00000026   0x2500             MOVS     R5,#+0
   \   00000028   0x.... 0x....      ADR.W    R6,`?<Constant "ERROR: set flag, chil...">`
   \   0000002C   0x....             LDR.N    R7,??DataTable97_7
   \   0000002E   0xE014             B.N      ??appAddJitForAllChildren_1
    574            {
    575              EmberNodeId childId = emberChildId(i);
   \                     ??appAddJitForAllChildren_2:
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x.... 0x....      BL       emberChildId
    576              if (childId != EMBER_NULL_NODE_ID) {
   \   00000036   0x42A0             CMP      R0,R4
   \   00000038   0xD00E             BEQ.N    ??CrossCallReturnLabel_46
    577                status = emberSetMessageFlag(childId);
   \   0000003A   0x.... 0x....      BL       emberSetMessageFlag
   \   0000003E   0xEA5F 0x0800      MOVS     R8,R0
    578                if (status != EMBER_SUCCESS) {
   \   00000042   0xD009             BEQ.N    ??CrossCallReturnLabel_46
    579                  emberSerialPrintf(APP_SERIAL,
    580                                    "ERROR: set flag, child %2x, status %x\r\n",
    581                                    emberChildId(i), status);
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       emberChildId
   \   0000004A   0x4643             MOV      R3,R8
   \   0000004C   0x4602             MOV      R2,R0
   \   0000004E   0x4631             MOV      R1,R6
   \   00000050   0x.... 0x....      BL       ?Subroutine3
    582                  emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_93:
   \   00000054   0x.... 0x....      BL       ?Subroutine1
    583                }
    584              }
    585            }
   \                     ??CrossCallReturnLabel_46:
   \   00000058   0x1C6D             ADDS     R5,R5,#+1
   \                     ??appAddJitForAllChildren_1:
   \   0000005A   0x7838             LDRB     R0,[R7, #+0]
   \   0000005C   0xB2ED             UXTB     R5,R5
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xD3E6             BCC.N    ??appAddJitForAllChildren_2
    586          }
   \   00000062   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    587          
    588          // This is called from emberPollHandler when the polling node has it's
    589          // message flag set.
    590          //
    591          // This sends the JIT message to the child using an APS message. The
    592          // child should be awake because it has just polled and the parent should
    593          // have sent a mac ack with frame pending set to true

   \                                 In section .text, align 2, keep-with-next
    594          void appSendJitToChild(EmberNodeId childId)
    595          {
   \                     appSendJitToChild:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    596            EmberStatus status;
    597            // used for debugging (see below)
    598            //   boolean sentMcastHello = FALSE;
    599            //   EmberStatus mcastHelloStatus;
    600          
    601            // get the child index from child ID. The index is used by the
    602            // application to determine if the child has already polled for
    603            // that message
    604            int8u childIndex = emberChildIndex(childId);
   \   00000004   0x.... 0x....      BL       emberChildIndex
    605          
    606            // This application only sends 1 message per poll. If the sleepy child gets
    607            // data from a poll it will nap and poll again (not hibernate) until it
    608            // doesn't get any data from a poll. In order to send more than one message
    609            // in response to a single poll, the parent needs to be sure to clear the
    610            // message flag (emberClearMessageFlag) after the first message has been
    611            // put into the message queue. If the flag is cleared before that, then
    612            // the first message will have framePending=false and the child will not
    613            // be awake to hear the second message. The best way to handle this is
    614            // to keep track of the number of messages sent to each child, decrement
    615            // this for each emberMessageSentHandler callback, and then clear the message
    616            // flag (in emberMessageSentHandler) when the number of outstanding messages go
    617            // to zero. This application doesn't do this and instead sends one
    618            // JIT message at a time. If there is a second JIT message on the parent
    619            // it will be picked up on the next nap cycle, set for 1 second.
    620          
    621            // check if this child has already polled for the message
    622            if (BIT(childIndex) & jitMaskMulticastHello) {
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0xFA01 0xF500      LSL      R5,R1,R0
   \   0000000E   0x....             LDR.N    R6,??DataTable97_6
   \   00000010   0x89F0             LDRH     R0,[R6, #+14]
   \   00000012   0x4205             TST      R5,R0
   \   00000014   0xD010             BEQ.N    ??appSendJitToChild_0
    623          
    624              jitMessageApsFrame.clusterId = MSG_MULTICAST_HELLO;
   \   00000016   0x2064             MOVS     R0,#+100
   \   00000018   0x8070             STRH     R0,[R6, #+2]
    625              /*mcastHelloStatus = */ emberSendUnicast(EMBER_OUTGOING_DIRECT,
    626                                                       childId,
    627                                                       &jitMessageApsFrame,
    628                                                       jitMessageMulticastHello);
   \   0000001A   0x7B33             LDRB     R3,[R6, #+12]
   \   0000001C   0x4632             MOV      R2,R6
   \   0000001E   0x4621             MOV      R1,R4
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       emberSendUnicast
    629              // sentMcastHello = TRUE;
    630              // clear the bit - invert the number that has the child index'th bit set (xor)
    631              // and then bitwise AND to clear from the jitMask
    632              jitMaskMulticastHello = jitMaskMulticastHello & (BIT(childIndex) ^ 0xFFFF);
   \   00000026   0x89F0             LDRH     R0,[R6, #+14]
   \   00000028   0xF485 0x417F      EOR      R1,R5,#0xFF00
   \   0000002C   0xF081 0x01FF      EOR      R1,R1,#0xFF
   \   00000030   0x4008             ANDS     R0,R1,R0
   \   00000032   0x81F0             STRH     R0,[R6, #+14]
    633            }
    634          
    635            // The next section of code is used for debugging and is commented out.
    636            // Serial characters are dropped when there are a bunch of these messages
    637            // going out at the same time so it's not very useful with more than one
    638            // or two children, but can be helpful when initially testing modifications
    639            // to this code (for instance, adding another JIT type)
    640            // 
    641            //  if (sentMcastHello) {
    642            //    emberSerialPrintf(APP_SERIAL, "TX JIT [hello]:%2x(%x)\r\n", 
    643            //                      childId, mcastHelloStatus);
    644            //  }
    645          
    646          
    647            // clear the message flag if there are no msgs waiting for this node
    648            if (!(BIT(childIndex) & jitMaskMulticastHello))
   \   00000034   0x4205             TST      R5,R0
   \   00000036   0xD10C             BNE.N    ??appSendJitToChild_1
    649            {
    650              status = emberClearMessageFlag(childId);
   \                     ??appSendJitToChild_0:
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       emberClearMessageFlag
   \   0000003E   0x0002             MOVS     R2,R0
    651              if (status != EMBER_SUCCESS) {
   \   00000040   0xD007             BEQ.N    ??appSendJitToChild_1
    652                emberSerialPrintf(APP_SERIAL, "ERROR: %x, clear flag %2x\r\n", 
    653                                  status, childId);
   \   00000042   0x4623             MOV      R3,R4
   \   00000044   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: %x, clear flag...">`
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000004E   0x.... 0x....      B.W      emberSerialPrintf
    654              }
    655              // The next three lines are commented out but may be useful when
    656              // modifying and then debugging this code.
    657              //else {
    658              //  emberSerialPrintf(APP_SERIAL, "JIT: clear flag %2x\r\n", childId);
    659              //}
    660            }
    661          }
   \                     ??appSendJitToChild_1:
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
    662          
    663          // This is called by the stack when a device polls. When
    664          // transmitExpected is true, this means the message flag is set for
    665          // this child.
    666          //

   \                                 In section .text, align 2, keep-with-next
    667          void emberPollHandler(EmberNodeId childId, boolean transmitExpected)
    668          {
   \                     emberPollHandler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    669            // functions called from within this should not contain actions that
    670            // could take a long time. The messages sent in response to the poll
    671            // have to be within 15ms. Doing a emberSerialWaitSend in here, for
    672            // example would cause the sleepy end device to go back to sleep
    673            // before the parent was able to send any messages at all.
    674          
    675            if (transmitExpected)
   \   00000004   0xB1F9             CBZ.N    R1,??emberPollHandler_0
    676            {
    677          	  // Check if we need to send the initial bootload launch message.
    678              // In addition don't call appSendJitToChild if we have bootload process
    679              // pending since it could confuse the bootload by sending other JIT message 
    680              // and also could clear the message flag
    681              #ifdef USE_BOOTLOADER_LIB
    682                // Check if the child that polls is the node to be bootloaded.
    683                if(bootloadInProgressChildId == childId) {
   \   00000006   0x....             LDR.N    R0,??DataTable97_8
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x....             LDR.N    R5,??DataTable97_9
   \   0000000C   0x8869             LDRH     R1,[R5, #+2]
   \   0000000E   0x42A1             CMP      R1,R4
   \   00000010   0xD111             BNE.N    ??emberPollHandler_1
    684                  if (parentLaunchBootload) {
   \   00000012   0x7829             LDRB     R1,[R5, #+0]
   \   00000014   0xB129             CBZ.N    R1,??emberPollHandler_2
    685                    sendBootloaderLaunchMessage(bootloadInProgressEui);
   \   00000016   0x1D28             ADDS     R0,R5,#+4
   \   00000018   0x.... 0x....      BL       sendBootloaderLaunchMessage
    686                    parentLaunchBootload = FALSE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x7028             STRB     R0,[R5, #+0]
    687                    // Do not try to send any other JIT message when starting 
    688                    // bootload process.
    689                    return;
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}
    690                  } else if (blState == BOOTLOAD_STATE_DELAY_BEFORE_START) {
   \                     ??emberPollHandler_2:
   \   00000022   0x2804             CMP      R0,#+4
   \   00000024   0xD107             BNE.N    ??emberPollHandler_1
    691                    // We have received the authentication challenge.
    692                    bootloadUtilSendAuthResponse(bootloadInProgressEui);
   \   00000026   0x1D28             ADDS     R0,R5,#+4
   \   00000028   0x.... 0x....      BL       bootloadUtilSendAuthResponse
    693                    emberClearMessageFlag(childId);
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000032   0x.... 0x....      B.W      emberClearMessageFlag
    694                    // Do not try to send any other JIT message when starting 
    695                    // bootload process.
    696                    return;
    697                  }
    698                }
    699                if(!IS_BOOTLOADING) {
   \                     ??emberPollHandler_1:
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xBF18             IT       NE 
   \   0000003A   0x280B             CMPNE    R0,#+11
   \   0000003C   0xD103             BNE.N    ??emberPollHandler_0
    700                  // take care of all the sending of JIT messages to the child
    701                  appSendJitToChild(childId);	
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000044   0x....             B.N      appSendJitToChild
    702                }
    703              #else
    704                appSendJitToChild(childId);	
    705              #endif
    706            }
   \                     ??emberPollHandler_0:
   \   00000046   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    707          }
    708          
    709          
    710          // this function is called from jitMessageStatus to print the contents 
    711          // of a JIT buffer. Useful in making sure the correct data is being
    712          // copied into the JIT buffer.

   \                                 In section .text, align 2, keep-with-next
    713          void jitMessageStatusPrintMessageData(EmberMessageBuffer bufferToPrint)
    714          {
   \                     jitMessageStatusPrintMessageData:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    715            int8u i;
    716            if (bufferToPrint != EMBER_NULL_MESSAGE_BUFFER) {
   \   00000004   0x2CFF             CMP      R4,#+255
   \   00000006   0xD01B             BEQ.N    ??jitMessageStatusPrintMessageData_0
    717              emberSerialPrintf(APP_SERIAL, "   data: ");
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant "   data: ">`
   \   0000000C   0x.... 0x....      BL       ??Subroutine0_0
    718              for (i=0; i< emberMessageBufferLength(bufferToPrint); i++) {
   \                     ??CrossCallReturnLabel_8:
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0x....             ADR.N    R6,??DataTable97  ;; "%x "
   \   00000014   0x....             LDR.N    R7,??DataTable97_10
   \   00000016   0xE007             B.N      ??jitMessageStatusPrintMessageData_1
    719                emberSerialPrintf(APP_SERIAL, "%x ",
    720                                  emberGetLinkedBuffersByte(bufferToPrint, i));
   \                     ??jitMessageStatusPrintMessageData_2:
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       emberGetLinkedBuffersByte
   \   00000020   0x4602             MOV      R2,R0
   \   00000022   0x.... 0x....      BL       ?Subroutine2
    721              }
   \                     ??CrossCallReturnLabel_90:
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??jitMessageStatusPrintMessageData_1:
   \   00000028   0x6838             LDR      R0,[R7, #+0]
   \   0000002A   0x5C20             LDRB     R0,[R4, R0]
   \   0000002C   0xB2ED             UXTB     R5,R5
   \   0000002E   0x4285             CMP      R5,R0
   \   00000030   0xD3F2             BCC.N    ??jitMessageStatusPrintMessageData_2
    722              emberSerialPrintf(APP_SERIAL, "\r\n");
   \   00000032   0x.... 0x....      BL       ?Subroutine0
    723              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_40:
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   0000003C   0x.... 0x....      B.W      emberSerialWaitSend
    724            }
    725          
    726          }
   \                     ??jitMessageStatusPrintMessageData_0:
   \   00000040   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    727          
    728          // This is called to print the status of the JIT storage on a parent node
    729          // (sink or line powered sensor)

   \                                 In section .text, align 2, keep-with-next
    730          void jitMessageStatus(void)
    731          {
   \                     jitMessageStatus:
   \   00000000   0xB510             PUSH     {R4,LR}
    732            halResetWatchdog();
   \   00000002   0x.... 0x....      BL       halInternalResetWatchDog
    733          
    734            // bitmasks
    735            emberSerialPrintf(APP_SERIAL, "bitmask for Multicast_Hello message: %2x\r\n",
    736                              jitMaskMulticastHello);
   \   00000006   0x....             LDR.N    R4,??DataTable97_6
   \   00000008   0x89E2             LDRH     R2,[R4, #+14]
   \   0000000A   0x.... 0x....      ADR.W    R1,`?<Constant "bitmask for Multicast...">`
   \   0000000E   0x.... 0x....      BL       ??Subroutine2_0
    737            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_71:
   \   00000012   0x.... 0x....      BL       ?Subroutine1
    738          
    739            // mcast hello packet buffer
    740            emberSerialPrintf(APP_SERIAL, "packet buffer for Multicast_Hello: %x\r\n",
    741                              jitMessageMulticastHello);
   \                     ??CrossCallReturnLabel_45:
   \   00000016   0x7B22             LDRB     R2,[R4, #+12]
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "packet buffer for Mul...">`
   \   0000001C   0x.... 0x....      BL       ??Subroutine2_0
    742            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_70:
   \   00000020   0x.... 0x....      BL       ?Subroutine1
    743            jitMessageStatusPrintMessageData(jitMessageMulticastHello);
   \                     ??CrossCallReturnLabel_44:
   \   00000024   0x7B20             LDRB     R0,[R4, #+12]
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x....             B.N      jitMessageStatusPrintMessageData
    744          }
    745          
    746          
    747          // this is called to print the child table

   \                                 In section .text, align 2, keep-with-next
    748          void printChildTable(void)
    749          {
   \                     printChildTable:
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
    750            int8u i;
    751            EmberStatus status;
    752            EmberEUI64 eui;
    753            EmberNodeType type;
    754          
    755            for (i=0; i<emberMaxChildCount(); i++)
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x.... 0x....      ADR.W    R8,`?<Constant " ??????">`
   \   0000000A   0x.... 0x....      ADR.W    R9,`?<Constant " sleepy">`
   \   0000000E   0x.... 0x....      ADR.W    R10,`?<Constant " mobile">`
   \   00000012   0x.... 0x....      ADR.W    R11,`?<Constant " non-sleepy">`
   \   00000016   0x....             ADR.N    R4,??DataTable97_1  ;; "%x:"
   \   00000018   0x....             LDR.N    R5,??DataTable97_7
   \   0000001A   0xE005             B.N      ??printChildTable_0
    756            {
    757              status = emberGetChildData(i, eui, &type);
    758              emberSerialPrintf(APP_SERIAL, "%x:", i);
    759              if (status == EMBER_SUCCESS)
    760              {
    761                printEUI64(APP_SERIAL, (EmberEUI64*)eui);
    762                switch (type){
    763                case EMBER_SLEEPY_END_DEVICE:
    764                  emberSerialPrintf(APP_SERIAL, " sleepy");
    765                  break;
    766                case EMBER_MOBILE_END_DEVICE:
    767                  emberSerialPrintf(APP_SERIAL, " mobile");
    768                  break;
    769                case EMBER_END_DEVICE:
    770                  emberSerialPrintf(APP_SERIAL, " non-sleepy");
    771                  break;
    772                default:
    773                  emberSerialPrintf(APP_SERIAL, " ??????");
   \                     ??printChildTable_1:
   \   0000001C   0x4641             MOV      R1,R8
   \                     ??printChildTable_2:
   \   0000001E   0x.... 0x....      BL       ??Subroutine0_0
    774                  break;
    775                }
    776              }
    777              emberSerialPrintf(APP_SERIAL, "\r\n");
   \                     ??CrossCallReturnLabel_7:
   \   00000022   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_39:
   \   00000026   0x1C76             ADDS     R6,R6,#+1
   \                     ??printChildTable_0:
   \   00000028   0x7828             LDRB     R0,[R5, #+0]
   \   0000002A   0xB2F6             UXTB     R6,R6
   \   0000002C   0x4286             CMP      R6,R0
   \   0000002E   0xD21A             BCS.N    ??printChildTable_3
   \   00000030   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_101:
   \   00000034   0x4607             MOV      R7,R0
   \   00000036   0x4632             MOV      R2,R6
   \   00000038   0x4621             MOV      R1,R4
   \   0000003A   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_69:
   \   0000003E   0x2F00             CMP      R7,#+0
   \   00000040   0xD1EF             BNE.N    ??CrossCallReturnLabel_7
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       printEUI64
   \   0000004A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004E   0x2803             CMP      R0,#+3
   \   00000050   0xD007             BEQ.N    ??printChildTable_4
   \   00000052   0xD3E3             BCC.N    ??printChildTable_1
   \   00000054   0x2805             CMP      R0,#+5
   \   00000056   0xD002             BEQ.N    ??printChildTable_5
   \   00000058   0xD2E0             BCS.N    ??printChildTable_1
   \   0000005A   0x4649             MOV      R1,R9
   \   0000005C   0xE7DF             B.N      ??printChildTable_2
   \                     ??printChildTable_5:
   \   0000005E   0x4651             MOV      R1,R10
   \   00000060   0xE7DD             B.N      ??printChildTable_2
   \                     ??printChildTable_4:
   \   00000062   0x4659             MOV      R1,R11
   \   00000064   0xE7DB             B.N      ??printChildTable_2
    778            }
    779          }
   \                     ??printChildTable_3:
   \   00000066   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0xAA00             ADD      R2,SP,#+0
   \   00000002   0xA901             ADD      R1,SP,#+4
   \   00000004   0x4630             MOV      R0,R6
   \   00000006   0x.... 0x....      B.W      emberGetChildData
    780          
    781          

   \                                 In section .text, align 2, keep-with-next
    782          void emberChildJoinHandler(int8u index, boolean joining)
    783          {
   \                     emberChildJoinHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    784            EmberStatus status;
    785            EmberEUI64 eui;
    786            EmberNodeType type;
    787          
    788            // if the node is joining...
    789            if (joining == TRUE)
   \   00000006   0x2901             CMP      R1,#+1
   \   00000008   0xD10E             BNE.N    ??emberChildJoinHandler_0
    790            {
    791              status = emberGetChildData(index, eui, &type);
    792              // ...and the type is mobile...
    793              if ((status == EMBER_SUCCESS) &&
    794                  (type == EMBER_MOBILE_END_DEVICE))
   \   0000000A   0xAA00             ADD      R2,SP,#+0
   \   0000000C   0xA901             ADD      R1,SP,#+4
   \   0000000E   0x.... 0x....      BL       emberGetChildData
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xBF04             ITT      EQ 
   \   00000016   0xF89D 0x0000      LDRBEQ   R0,[SP, #+0]
   \   0000001A   0x2805             CMPEQ    R0,#+5
   \   0000001C   0xD104             BNE.N    ??emberChildJoinHandler_0
    795              {
    796                // ...set the message flag so it gets any messages right
    797                // away, since the node will not be in the child table
    798                // (and not have it's message flag set) whenever it
    799                // hibernates
    800                emberSetMessageFlag(emberChildId(index));
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       emberChildId
   \   00000024   0x.... 0x....      BL       emberSetMessageFlag
    801              }
    802            }
    803          }
   \                     ??emberChildJoinHandler_0:
   \   00000028   0xBD1F             POP      {R0-R4,PC}       ;; return
    804          #endif // defined(SENSOR_APP) || defined(SINK_APP)
    805          
    806          
    807          // **************************************************
    808          // utility calls to support the EM250 Bootloader
    809          //
    810          // **************************************************
    811          #ifdef USE_BOOTLOADER_LIB
    812          
    813          // this is called by the sensor or sink -- applications that act
    814          // as parents. This is called with the EUI of the child that the
    815          // parents wants to bootload. Since the sleepy device may not be
    816          // awake (likely not), this function sets the message flag of the
    817          // child and remembers which child needs to be bootloaded. When the
    818          // child wakes up and polls, the initial bootloader launch message 
    819          // is sent -- see emberPollHandler

   \                                 In section .text, align 2, keep-with-next
    820          void bootloadMySleepyChild(EmberEUI64 targetEui)
    821          {
   \                     bootloadMySleepyChild:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    822            int8u index;
    823            
    824            // message for the user
    825            emberSerialPrintf(APP_SERIAL, "INFO: attempt child bootload, eui ");
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant "INFO: attempt child b...">`
   \   00000008   0x.... 0x....      BL       ??Subroutine0_0
    826            printEUI64(APP_SERIAL, (EmberEUI64*)targetEui);
   \                     ??CrossCallReturnLabel_6:
   \   0000000C   0x4621             MOV      R1,R4
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       printEUI64
    827            emberSerialPrintf(APP_SERIAL, "\r\n");
   \   00000014   0x.... 0x....      BL       ?Subroutine0
    828            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_38:
   \   00000018   0x.... 0x....      BL       ?Subroutine1
    829           
    830            // make sure the EUI is a child of this parent
    831            if (!(isMyChild(targetEui, &index))) {
   \                     ??CrossCallReturnLabel_43:
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       isMyChild
   \   00000024   0xB1F0             CBZ.N    R0,??CrossCallReturnLabel_4
    832          	return;
    833            }
    834            
    835            // set the message flag for the child
    836            emberSetMessageFlag(emberChildId(index));
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0x.... 0x....      BL       emberChildId
   \   0000002E   0x.... 0x....      BL       emberSetMessageFlag
    837          
    838            // remember the EUI and shortId for the child we are bootloading
    839            bootloadInProgressChildId = emberChildId(index);
   \   00000032   0x....             LDR.N    R5,??DataTable97_9
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0x.... 0x....      BL       emberChildId
   \   0000003C   0x8068             STRH     R0,[R5, #+2]
    840            MEMCOPY(bootloadInProgressEui, targetEui, EUI64_SIZE);
   \   0000003E   0x2208             MOVS     R2,#+8
   \   00000040   0x4621             MOV      R1,R4
   \   00000042   0x1D28             ADDS     R0,R5,#+4
   \   00000044   0x.... 0x....      BL       halCommonMemCopy
    841            
    842            // the bootload util library tells us if a bootload is in progres
    843            // with the IS_BOOTLOADING macro. We need to set a flag to send the
    844            // bootload launch message. Only want to do this once.
    845            parentLaunchBootload = TRUE;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x7028             STRB     R0,[R5, #+0]
    846          
    847            // print a message explaining that passthru is initiating 
    848            // and there is a few seconds before the xmodem ('C' characters
    849            // printing) starts.
    850            emberSerialPrintf(APP_SERIAL, 
    851                             "If a bootload response is seen, xmodem ");
   \   0000004C   0x.... 0x....      ADR.W    R1,`?<Constant "If a bootload respons...">`
   \   00000050   0x.... 0x....      BL       emberSerialPrintf
    852            emberSerialPrintf(APP_SERIAL, "will start in 30 seconds\r\n");
   \   00000054   0x.... 0x....      ADR.W    R1,`?<Constant "will start in 30 seco...">`
   \   00000058   0x.... 0x....      BL       ??Subroutine0_0
    853            emberSerialPrintf(APP_SERIAL, 
    854                              "If xmodem does not start, the bootload failed\r\n");
   \                     ??CrossCallReturnLabel_5:
   \   0000005C   0x.... 0x....      ADR.W    R1,`?<Constant "If xmodem does not st...">`
   \   00000060   0x.... 0x....      BL       ??Subroutine0_0
    855          }
   \                     ??CrossCallReturnLabel_4:
   \   00000064   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    856          
    857          
    858          // called by a sensor or sink when bootloading a neighbor device is
    859          // desired. This function just prints a bunch of information for the
    860          // user's benefit and calls a function that sends the initial bootload
    861          // launch message.

   \                                 In section .text, align 2, keep-with-next
    862          void bootloadMyNeighborRouter(EmberEUI64 targetEui)
    863          { 
   \                     bootloadMyNeighborRouter:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    864            // message for the user
    865            emberSerialPrintf(APP_SERIAL, "INFO: attempt neighbor bootload, eui ");	
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant "INFO: attempt neighbo...">`
   \   00000008   0x.... 0x....      BL       ??Subroutine0_0
    866            printEUI64(APP_SERIAL, (EmberEUI64*)targetEui);
   \                     ??CrossCallReturnLabel_3:
   \   0000000C   0x4621             MOV      R1,R4
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       printEUI64
    867            emberSerialPrintf(APP_SERIAL, "\r\n");
   \   00000014   0x.... 0x....      BL       ?Subroutine0
    868            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_37:
   \   00000018   0x.... 0x....      BL       ?Subroutine1
    869          
    870            // print a message explaining that passthru is initiating 
    871            // and there is a few seconds before the xmodem ('C' characters
    872            // printing) starts.
    873            emberSerialPrintf(APP_SERIAL, 
    874                             "If a bootload response is seen, xmodem ");
   \                     ??CrossCallReturnLabel_42:
   \   0000001C   0x.... 0x....      ADR.W    R1,`?<Constant "If a bootload respons...">`
   \   00000020   0x.... 0x....      BL       ??Subroutine0_0
    875            emberSerialPrintf(APP_SERIAL, "will start in 10 seconds\r\n");
   \                     ??CrossCallReturnLabel_2:
   \   00000024   0x.... 0x....      ADR.W    R1,`?<Constant "will start in 10 seco...">`
   \   00000028   0x.... 0x....      BL       ??Subroutine0_0
    876            emberSerialPrintf(APP_SERIAL, 
    877                              "If xmodem does not start, the bootload failed\r\n");
   \                     ??CrossCallReturnLabel_1:
   \   0000002C   0x.... 0x....      ADR.W    R1,`?<Constant "If xmodem does not st...">`
   \   00000030   0x.... 0x....      BL       ??Subroutine0_0
    878            
    879            sendBootloaderLaunchMessage(targetEui);
   \                     ??CrossCallReturnLabel_0:
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xE8BD 0x4010      POP      {R4,LR}
   \   0000003A                      REQUIRE sendBootloaderLaunchMessage
   \   0000003A                      ;; // Fall through to label sendBootloaderLaunchMessage
    880          }
    881          
    882          
    883          // does the sending of the bootloader launch message. This is really
    884          // just setting up the parameters and making a call to bootloadUtilSendRequest

   \                                 In section .text, align 2, keep-with-next
    885          void sendBootloaderLaunchMessage(EmberEUI64 targetEui)
    886          {
   \                     sendBootloaderLaunchMessage:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x4604             MOV      R4,R0
    887            // encryptKey has to match the token TOKEN_MFG_BOOTLOADER_AES_KEY 
    888            // on the target device or the bootload will not start
    889            int8u encryptKey[16] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    890                                    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
   \   00000006   0xA803             ADD      R0,SP,#+12
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   0000000C   0x2210             MOVS     R2,#+16
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
    891          
    892            // mfgId and hardwareTag have to match what the target device is
    893            // checking for in bootloadUtilRequestHandler. These values are meant
    894            // to be stored in the manufacturing tokens TOKEN_MFG_MANUF_ID (mfgId)
    895            // and TOKEN_MFG_BOARD_NAME (hardwareTag).
    896            int16u mfgId = 0xE250;
    897            int8u hardwareTag[8] = {'D', 'E', 'V', ' ', '0', '4', '5', '5'};
   \   00000012   0xA801             ADD      R0,SP,#+4
   \   00000014   0x.... 0x....      ADR.W    R1,`?<Constant {68, 69, 86, 32, 48, 52, 53, 53}>`
   \   00000018   0xC90C             LDM      R1!,{R2,R3}
   \   0000001A   0xC00C             STM      R0!,{R2,R3}
    898            
    899            bootloadUtilSendRequest(targetEui,
    900                                    mfgId,
    901                                    hardwareTag,
    902                                    encryptKey,
    903                                    BOOTLOAD_MODE_PASSTHRU); 	
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xAB03             ADD      R3,SP,#+12
   \   00000022   0xAA01             ADD      R2,SP,#+4
   \   00000024   0xF24E 0x2150      MOVW     R1,#+57936
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       bootloadUtilSendRequest
    904          }
   \   0000002E   0xB008             ADD      SP,SP,#+32
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
    905          
    906          // determines if the EUI passed in is in this device's child table
    907          // return of true means the EUI is in the child table
    908          // return of false means the EUI is not in the child table
    909          // if the EUI is in the child table, then childIndex is set to the
    910          // index in the child table of the EUI.

   \                                 In section .text, align 2, keep-with-next
    911          boolean isMyChild(EmberEUI64 candidateEui, int8u* childIndex)
    912          {
   \                     isMyChild:
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    913            int8u i;
    914            EmberEUI64 childEui;
    915            EmberNodeType type;
    916            EmberStatus status;
    917            
    918            // go through whole child table  
    919            for (i=0; i<emberMaxChildCount(); i++) {
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x....             LDR.N    R7,??DataTable97_7
   \   0000000A   0xE000             B.N      ??isMyChild_0
   \                     ??isMyChild_1:
   \   0000000C   0x1C76             ADDS     R6,R6,#+1
   \                     ??isMyChild_0:
   \   0000000E   0x7838             LDRB     R0,[R7, #+0]
   \   00000010   0xB2F6             UXTB     R6,R6
   \   00000012   0x4286             CMP      R6,R0
   \   00000014   0xD20D             BCS.N    ??isMyChild_2
    920              status = emberGetChildData(i, childEui, &type);
    921          	if ((status == EMBER_SUCCESS) && 
    922          		(MEMCOMPARE(candidateEui, childEui, EUI64_SIZE)==0)) {
   \   00000016   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_100:
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD1F6             BNE.N    ??isMyChild_1
   \   0000001E   0x2208             MOVS     R2,#+8
   \   00000020   0xA901             ADD      R1,SP,#+4
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       halCommonMemCompare
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD1EF             BNE.N    ??isMyChild_1
    923                // we found a match
    924                (*childIndex) = i;
   \   0000002C   0x702E             STRB     R6,[R5, #+0]
    925                return TRUE;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xBDFE             POP      {R1-R7,PC}
    926              }
    927            }
    928            // didn't match any entry in my child table
    929            return FALSE;	
   \                     ??isMyChild_2:
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBDFE             POP      {R1-R7,PC}       ;; return
    930          }
    931          
    932          // no check for now. If an attempt is made to bootload a device 
    933          // that is not a neighbor the initial launch will fail.

   \                                 In section .text, align 2, keep-with-next
    934          boolean isMyNeighbor(EmberEUI64 eui)
    935          {
    936            return TRUE;		
   \                     isMyNeighbor:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    937          }
    938          
    939          #endif //USE_BOOTLOADER_LIB
    940          
    941          // Do a formatted conversion of a signed fixed point 32 bit number
    942          // to decimal.  Make lots of assumtions.  Like minDig > dot;
    943          // minDig < 20; etc.
    944          

   \                                 In section .text, align 2, keep-with-next
    945          void formatFixed(int8u* charBuffer, int32s value, int8u minDig, int8u dot, boolean showPlus)
    946          {
   \                     formatFixed:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x9C0A             LDR      R4,[SP, #+40]
    947            int8u numBuff[20];
    948            int8u i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    949            int32u calcValue = (int32u)value;
    950          
    951            if (value < 0)
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD502             BPL.N    ??formatFixed_0
    952            {
    953              calcValue = (int32u)-value;
   \   0000000C   0x4249             RSBS     R1,R1,#+0
    954              *charBuffer++ = '-';
   \   0000000E   0x242D             MOVS     R4,#+45
   \   00000010   0xE001             B.N      ??formatFixed_1
    955            }
    956            else if (showPlus)
   \                     ??formatFixed_0:
   \   00000012   0xB15C             CBZ.N    R4,??formatFixed_2
    957              *charBuffer++ = '+';
   \   00000014   0x242B             MOVS     R4,#+43
   \                     ??formatFixed_1:
   \   00000016   0xF800 0x4B01      STRB     R4,[R0], #+1
   \   0000001A   0xE007             B.N      ??formatFixed_2
    958          
    959            while((i < minDig) || calcValue) {
    960              numBuff[i++] = (int8u)(calcValue % 10);
   \                     ??formatFixed_3:
   \   0000001C   0x240A             MOVS     R4,#+10
   \   0000001E   0xFBB1 0xF6F4      UDIV     R6,R1,R4
   \   00000022   0xFB04 0x1116      MLS      R1,R4,R6,R1
   \   00000026   0x55E9             STRB     R1,[R5, R7]
   \   00000028   0x1C6D             ADDS     R5,R5,#+1
    961              calcValue /= 10;
   \   0000002A   0x4631             MOV      R1,R6
    962            }
   \                     ??formatFixed_2:
   \   0000002C   0xAF00             ADD      R7,SP,#+0
   \   0000002E   0xB2ED             UXTB     R5,R5
   \   00000030   0x4295             CMP      R5,R2
   \   00000032   0xD3F3             BCC.N    ??formatFixed_3
   \   00000034   0x2900             CMP      R1,#+0
   \   00000036   0xD1F1             BNE.N    ??formatFixed_3
    963            while(i--) {
   \                     ??formatFixed_4:
   \   00000038   0x4629             MOV      R1,R5
   \   0000003A   0x1E4D             SUBS     R5,R1,#+1
   \   0000003C   0xB151             CBZ.N    R1,??formatFixed_5
    964              *charBuffer++ = (numBuff[i] + '0');
   \   0000003E   0xB2ED             UXTB     R5,R5
   \   00000040   0x5DE9             LDRB     R1,[R5, R7]
   \   00000042   0x3130             ADDS     R1,R1,#+48
   \   00000044   0xF800 0x1B01      STRB     R1,[R0], #+1
    965              if (i == dot)
   \   00000048   0x429D             CMP      R5,R3
   \   0000004A   0xD1F5             BNE.N    ??formatFixed_4
    966                *charBuffer++ = '.';
   \   0000004C   0x212E             MOVS     R1,#+46
   \   0000004E   0xF800 0x1B01      STRB     R1,[R0], #+1
   \   00000052   0xE7F1             B.N      ??formatFixed_4
    967            }
    968            *charBuffer = 0;
   \                     ??formatFixed_5:
   \   00000054   0x7001             STRB     R1,[R0, #+0]
    969          }
   \   00000056   0xB005             ADD      SP,SP,#+20
   \   00000058   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable85:
   \   00000000   0x5D 0x00          DC8      "]",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable85_1:
   \   00000000   0x59 0x5D          DC8      "Y] "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable85_2:
   \   00000000   0x4E 0x5D          DC8      "N] "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable85_3:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87:
   \   00000000   0x25 0x78          DC8      0x25, 0x78, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable95:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97:
   \   00000000   0x25 0x78          DC8      "%x "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_1:
   \   00000000   0x25 0x78          DC8      "%x:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_2:
   \   00000000   0x........         DC32     emLocalEui64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_3:
   \   00000000   0x........         DC32     ticksSinceLastHeard

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_4:
   \   00000000   0x........         DC32     emberMulticastTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_5:
   \   00000000   0x........         DC32     globalBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_6:
   \   00000000   0x........         DC32     jitMessageApsFrame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_7:
   \   00000000   0x........         DC32     emMaxEndDeviceChildren

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_8:
   \   00000000   0x........         DC32     blState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_9:
   \   00000000   0x........         DC32     parentLaunchBootload

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable97_10:
   \   00000000   0x........         DC32     emMessageBufferLengths

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n    seqNum [">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012    seqNum ["
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x73 0x65    
   \              0x71 0x4E    
   \              0x75 0x6D    
   \              0x20 0x5B    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%x] ">`:
   \   00000000   0x25 0x78          DC8 "%x] "
   \              0x5D 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "]">`:
   \   00000000   0x5D 0x00          DC8 "]"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Y] ">`:
   \   00000000   0x59 0x5D          DC8 "Y] "
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "N] ">`:
   \   00000000   0x4E 0x5D          DC8 "N] "
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%x">`:
   \   00000000   0x25 0x78          DC8 "%x"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%x ">`:
   \   00000000   0x25 0x78          DC8 "%x "
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%x:">`:
   \   00000000   0x25 0x78          DC8 "%x:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "none] ">`:
   \   00000000   0x6E 0x6F          DC8 "none] "
   \              0x6E 0x65    
   \              0x5D 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n    outFC [">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012    outFC ["
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x6F 0x75    
   \              0x74 0x46    
   \              0x43 0x20    
   \              0x5B 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%4x] ">`:
   \   00000000   0x25 0x34          DC8 "%4x] "
   \              0x78 0x5D    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n    inFC [">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012    inFC ["
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x69 0x6E    
   \              0x46 0x43    
   \              0x20 0x5B    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n    partner [">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012    partner ["
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x70 0x61    
   \              0x72 0x74    
   \              0x6E 0x65    
   \              0x72 0x20    
   \              0x5B 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "None] ">`:
   \   00000000   0x4E 0x6F          DC8 "None] "
   \              0x6E 0x65    
   \              0x5D 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n    auth [">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012    auth ["
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x61 0x75    
   \              0x74 0x68    
   \              0x20 0x5B    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%X %X %X %X %X %X %X %X ">`:
   \   00000000   0x25 0x58          DC8 "%X %X %X %X %X %X %X %X "
   \              0x20 0x25    
   \              0x58 0x20    
   \              0x25 0x58    
   \              0x20 0x25    
   \              0x58 0x20    
   \              0x25 0x58    
   \              0x20 0x25    
   \              0x58 0x20    
   \              0x25 0x58    
   \              0x20 0x25    
   \              0x58 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {{90, 105, 103, 98, 101, 101, 32, 8`:
   \   00000000   0x5A 0x69          DC8 90, 105, 103, 98, 101, 101, 32, 83, 101, 99, 117, 114, 105, 116
   \              0x67 0x62    
   \              0x65 0x65    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x75 0x72    
   \              0x69 0x74    
   \   0000000E   0x79 0x21          DC8 121, 33

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {{101, 109, 98, 101, 114, 32, 69, 7`:
   \   00000000   0x65 0x6D          DC8 101, 109, 98, 101, 114, 32, 69, 77, 50, 53, 48, 32, 99, 104, 105
   \              0x62 0x65    
   \              0x72 0x20    
   \              0x45 0x4D    
   \              0x32 0x35    
   \              0x30 0x20    
   \              0x63 0x68    
   \              0x69         
   \   0000000F   0x70               DC8 112

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: initializing s...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: initializing security\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x73 0x65    
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "INFO : link key set to: ">`:
   \   00000000   0x49 0x4E          DC8 "INFO : link key set to: "
   \              0x46 0x4F    
   \              0x20 0x3A    
   \              0x20 0x6C    
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x3A 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "INFO : nwk key set to:  ">`:
   \   00000000   0x49 0x4E          DC8 "INFO : nwk key set to:  "
   \              0x46 0x4F    
   \              0x20 0x3A    
   \              0x20 0x6E    
   \              0x77 0x6B    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x74    
   \              0x6F 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ExtendedPanId: ">`:
   \   00000000   0x45 0x78          DC8 "ExtendedPanId: "
   \              0x74 0x65    
   \              0x6E 0x64    
   \              0x65 0x64    
   \              0x50 0x61    
   \              0x6E 0x49    
   \              0x64 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sink ">`:
   \   00000000   0x73 0x69          DC8 "sink "
   \              0x6E 0x6B    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "eui [">`:
   \   00000000   0x65 0x75          DC8 "eui ["
   \              0x69 0x20    
   \              0x5B 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "] short ID [%2x]\\r\\n">`:
   \   00000000   0x5D 0x20          DC8 "] short ID [%2x]\015\012"
   \              0x73 0x68    
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x49 0x44    
   \              0x20 0x5B    
   \              0x25 0x32    
   \              0x78 0x5D    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "channel [0x%x], power...">`:
   \   00000000   0x63 0x68          DC8 "channel [0x%x], power [0x%x], panId [0x%2x]\015\012"
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x20    
   \              0x5B 0x30    
   \              0x78 0x25    
   \              0x78 0x5D    
   \              0x2C 0x20    
   \              0x70 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x5B 0x30    
   \              0x78 0x25    
   \              0x78 0x5D    
   \              0x2C 0x20    
   \              0x70 0x61    
   \              0x6E 0x49    
   \              0x64 0x20    
   \              0x5B 0x30    
   \              0x78 0x25    
   \              0x32 0x78    
   \              0x5D 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "channel [N/A], power ...">`:
   \   00000000   0x63 0x68          DC8 "channel [N/A], power [N/A], panId [N/A] \015\012"
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x20    
   \              0x5B 0x4E    
   \              0x2F 0x41    
   \              0x5D 0x2C    
   \              0x20 0x70    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x5B    
   \              0x4E 0x2F    
   \              0x41 0x5D    
   \              0x2C 0x20    
   \              0x70 0x61    
   \              0x6E 0x49    
   \              0x64 0x20    
   \              0x5B 0x4E    
   \              0x2F 0x41    
   \              0x5D 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ExtendedPanId [N/A]">`:
   \   00000000   0x45 0x78          DC8 "ExtendedPanId [N/A]"
   \              0x74 0x65    
   \              0x6E 0x64    
   \              0x65 0x64    
   \              0x50 0x61    
   \              0x6E 0x49    
   \              0x64 0x20    
   \              0x5B 0x4E    
   \              0x2F 0x41    
   \              0x5D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", stack [%2x], app [2...">`:
   \   00000000   0x2C 0x20          DC8 ", stack [%2x], app [2.60]\015\012"
   \              0x73 0x74    
   \              0x61 0x63    
   \              0x6B 0x20    
   \              0x5B 0x25    
   \              0x32 0x78    
   \              0x5D 0x2C    
   \              0x20 0x61    
   \              0x70 0x70    
   \              0x20 0x5B    
   \              0x32 0x2E    
   \              0x36 0x30    
   \              0x5D 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "security level [%x]\\r\\n">`:
   \   00000000   0x73 0x65          DC8 "security level [%x]\015\012"
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x5B    
   \              0x25 0x78    
   \              0x5D 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DEBUG IS ON\\r\\n">`:
   \   00000000   0x44 0x45          DC8 "DEBUG IS ON\015\012"
   \              0x42 0x55    
   \              0x47 0x20    
   \              0x49 0x53    
   \              0x20 0x4F    
   \              0x4E 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_TRUST_CENTER_LI...">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_TRUST_CENTER_LINK_KEY: "
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x54 0x52    
   \              0x55 0x53    
   \              0x54 0x5F    
   \              0x43 0x45    
   \              0x4E 0x54    
   \              0x45 0x52    
   \              0x5F 0x4C    
   \              0x49 0x4E    
   \              0x4B 0x5F    
   \              0x4B 0x45    
   \              0x59 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_CURRENT_NETWORK...">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_CURRENT_NETWORK_KEY:  "
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x43 0x55    
   \              0x52 0x52    
   \              0x45 0x4E    
   \              0x54 0x5F    
   \              0x4E 0x45    
   \              0x54 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5F    
   \              0x4B 0x45    
   \              0x59 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "INFO : not a valid ne...">`:
   \   00000000   0x49 0x4E          DC8 49H, 4EH, 46H, 4FH, 20H, 3AH, 20H, 6EH
   \              0x46 0x4F    
   \              0x20 0x3A    
   \              0x20 0x6E    
   \   00000008   0x6F 0x74          DC8 6FH, 74H, 20H, 61H, 20H, 76H, 61H, 6CH
   \              0x20 0x61    
   \              0x20 0x76    
   \              0x61 0x6C    
   \   00000010   0x69 0x64          DC8 69H, 64H, 20H, 6EH, 65H, 74H, 77H, 6FH
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \   00000018   0x72 0x6B          DC8 72H, 6BH, 20H, 73H, 74H, 61H, 74H, 65H
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \   00000020   0x20 0x74          DC8 20H, 74H, 6FH, 20H, 71H, 75H, 65H, 72H
   \              0x6F 0x20    
   \              0x71 0x75    
   \              0x65 0x72    
   \   00000028   0x79 0x20          DC8 79H, 20H, 74H, 68H, 65H, 20H, 6BH, 65H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x6B 0x65    
   \   00000030   0x79 0x73          DC8 79H, 73H, 20H, 0DH, 0AH, 20H, 0
   \              0x20 0x0D    
   \              0x0A 0x20    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Index  Inuse  NodeId ...">`:
   \   00000000   0x49 0x6E          DC8 "Index  Inuse  NodeId   Eui64"
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x20 0x49    
   \              0x6E 0x75    
   \              0x73 0x65    
   \              0x20 0x20    
   \              0x4E 0x6F    
   \              0x64 0x65    
   \              0x49 0x64    
   \              0x20 0x20    
   \              0x20 0x45    
   \              0x75 0x69    
   \              0x36 0x34    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "             Age">`:
   \   00000000   0x20 0x20          DC8 "             Age"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x41    
   \              0x67 0x65    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %c%c: ">`:
   \   00000000   0x20 0x25          DC8 " %c%c: "
   \              0x63 0x25    
   \              0x63 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  FALSE">`:
   \   00000000   0x20 0x20          DC8 "  FALSE"
   \              0x46 0x41    
   \              0x4C 0x53    
   \              0x45 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  TRUE ">`:
   \   00000000   0x20 0x20          DC8 "  TRUE "
   \              0x54 0x52    
   \              0x55 0x45    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  UNUSED   ">`:
   \   00000000   0x20 0x20          DC8 "  UNUSED   "
   \              0x55 0x4E    
   \              0x55 0x53    
   \              0x45 0x44    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  UNKNOWN  ">`:
   \   00000000   0x20 0x20          DC8 "  UNKNOWN  "
   \              0x55 0x4E    
   \              0x4B 0x4E    
   \              0x4F 0x57    
   \              0x4E 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  DISC ACT ">`:
   \   00000000   0x20 0x20          DC8 "  DISC ACT "
   \              0x44 0x49    
   \              0x53 0x43    
   \              0x20 0x41    
   \              0x43 0x54    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  0x%2x   ">`:
   \   00000000   0x20 0x20          DC8 "  0x%2x   "
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x20    
   \              0x20 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  0x%2x">`:
   \   00000000   0x20 0x20          DC8 "  0x%2x"
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Index  MulticastId  E...">`:
   \   00000000   0x49 0x6E          DC8 "Index  MulticastId  Endpoint\015\012"
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x20 0x4D    
   \              0x75 0x6C    
   \              0x74 0x69    
   \              0x63 0x61    
   \              0x73 0x74    
   \              0x49 0x64    
   \              0x20 0x20    
   \              0x45 0x6E    
   \              0x64 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %c%c:   ">`:
   \   00000000   0x20 0x25          DC8 " %c%c:   "
   \              0x63 0x25    
   \              0x63 0x3A    
   \              0x20 0x20    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  0x%2x     ">`:
   \   00000000   0x20 0x20          DC8 "  0x%2x     "
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  0x%x\\r\\n">`:
   \   00000000   0x20 0x20          DC8 "  0x%x\015\012"
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PAN_ID: 0x%2x\\r\\n">`:
   \   00000000   0x50 0x41          DC8 "PAN_ID: 0x%2x\015\012"
   \              0x4E 0x5F    
   \              0x49 0x44    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RADIO_TX_POWER: 0x%x\\r\\n">`:
   \   00000000   0x52 0x41          DC8 "RADIO_TX_POWER: 0x%x\015\012"
   \              0x44 0x49    
   \              0x4F 0x5F    
   \              0x54 0x58    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RADIO_FREQ_CHANNEL: 0...">`:
   \   00000000   0x52 0x41          DC8 "RADIO_FREQ_CHANNEL: 0x%x\015\012"
   \              0x44 0x49    
   \              0x4F 0x5F    
   \              0x46 0x52    
   \              0x45 0x51    
   \              0x5F 0x43    
   \              0x48 0x41    
   \              0x4E 0x4E    
   \              0x45 0x4C    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "STACK_PROFILE: 0x%x\\r\\n">`:
   \   00000000   0x53 0x54          DC8 "STACK_PROFILE: 0x%x\015\012"
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x50 0x52    
   \              0x4F 0x46    
   \              0x49 0x4C    
   \              0x45 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NODE_TYPE: 0x%x\\r\\n">`:
   \   00000000   0x4E 0x4F          DC8 "NODE_TYPE: 0x%x\015\012"
   \              0x44 0x45    
   \              0x5F 0x54    
   \              0x59 0x50    
   \              0x45 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NETWORK_KEY: 0x">`:
   \   00000000   0x4E 0x45          DC8 "NETWORK_KEY: 0x"
   \              0x54 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5F    
   \              0x4B 0x45    
   \              0x59 0x3A    
   \              0x20 0x30    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ACTIVE_KEY_SEQ_NUM: 0...">`:
   \   00000000   0x41 0x43          DC8 "ACTIVE_KEY_SEQ_NUM: 0x%x\015\012"
   \              0x54 0x49    
   \              0x56 0x45    
   \              0x5F 0x4B    
   \              0x45 0x59    
   \              0x5F 0x53    
   \              0x45 0x51    
   \              0x5F 0x4E    
   \              0x55 0x4D    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ZIGBEE_NODE_ID: 0x%2x\\r\\n">`:
   \   00000000   0x5A 0x49          DC8 "ZIGBEE_NODE_ID: 0x%2x\015\012"
   \              0x47 0x42    
   \              0x45 0x45    
   \              0x5F 0x4E    
   \              0x4F 0x44    
   \              0x45 0x5F    
   \              0x49 0x44    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX ERROR [sink advert...">`:
   \   00000000   0x54 0x58          DC8 "TX ERROR [sink advertise], OUT OF BUFFERS\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x61    
   \              0x64 0x76    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x73 0x65    
   \              0x5D 0x2C    
   \              0x20 0x4F    
   \              0x55 0x54    
   \              0x20 0x4F    
   \              0x46 0x20    
   \              0x42 0x55    
   \              0x46 0x46    
   \              0x45 0x52    
   \              0x53 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: send unicast, ...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: send unicast, child %2x, status %x\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x73    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x69 0x63    
   \              0x61 0x73    
   \              0x74 0x2C    
   \              0x20 0x63    
   \              0x68 0x69    
   \              0x6C 0x64    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "common.c">`:
   \   00000000   0x63 0x6F          DC8 "common.c"
   \              0x6D 0x6D    
   \              0x6F 0x6E    
   \              0x2E 0x63    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: creating JIT m...">`:
   \   00000000   0x45 0x56          DC8 "EVENT: creating JIT msg 0x%x\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x63    
   \              0x72 0x65    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4A 0x49    
   \              0x54 0x20    
   \              0x6D 0x73    
   \              0x67 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: no buffers to ...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: no buffers to construct JIT message!\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x6E    
   \              0x6F 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x74 0x6F    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x73 0x74    
   \              0x72 0x75    
   \              0x63 0x74    
   \              0x20 0x4A    
   \              0x49 0x54    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x21 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "JIT: setting flag, fo...">`:
   \   00000000   0x4A 0x49          DC8 "JIT: setting flag, for all children\015\012"
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x67 0x2C    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x20 0x63    
   \              0x68 0x69    
   \              0x6C 0x64    
   \              0x72 0x65    
   \              0x6E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: set flag, chil...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: set flag, child %2x, status %x\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x67 0x2C    
   \              0x20 0x63    
   \              0x68 0x69    
   \              0x6C 0x64    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: %x, clear flag...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: %x, clear flag %2x\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x25    
   \              0x78 0x2C    
   \              0x20 0x63    
   \              0x6C 0x65    
   \              0x61 0x72    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x67 0x20    
   \              0x25 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   data: ">`:
   \   00000000   0x20 0x20          DC8 "   data: "
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "bitmask for Multicast...">`:
   \   00000000   0x62 0x69          DC8 "bitmask for Multicast_Hello message: %2x\015\012"
   \              0x74 0x6D    
   \              0x61 0x73    
   \              0x6B 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x4D 0x75    
   \              0x6C 0x74    
   \              0x69 0x63    
   \              0x61 0x73    
   \              0x74 0x5F    
   \              0x48 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "packet buffer for Mul...">`:
   \   00000000   0x70 0x61          DC8 "packet buffer for Multicast_Hello: %x\015\012"
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x66 0x65    
   \              0x72 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x4D 0x75    
   \              0x6C 0x74    
   \              0x69 0x63    
   \              0x61 0x73    
   \              0x74 0x5F    
   \              0x48 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x3A    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " sleepy">`:
   \   00000000   0x20 0x73          DC8 " sleepy"
   \              0x6C 0x65    
   \              0x65 0x70    
   \              0x79 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " mobile">`:
   \   00000000   0x20 0x6D          DC8 " mobile"
   \              0x6F 0x62    
   \              0x69 0x6C    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " non-sleepy">`:
   \   00000000   0x20 0x6E          DC8 " non-sleepy"
   \              0x6F 0x6E    
   \              0x2D 0x73    
   \              0x6C 0x65    
   \              0x65 0x70    
   \              0x79 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " ??????">`:
   \   00000000   0x20 0x3F          DC8 " ??????"
   \              0x3F 0x3F    
   \              0x3F 0x3F    
   \              0x3F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "INFO: attempt child b...">`:
   \   00000000   0x49 0x4E          DC8 "INFO: attempt child bootload, eui "
   \              0x46 0x4F    
   \              0x3A 0x20    
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x74 0x20    
   \              0x63 0x68    
   \              0x69 0x6C    
   \              0x64 0x20    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x2C 0x20    
   \              0x65 0x75    
   \              0x69 0x20    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "If a bootload respons...">`:
   \   00000000   0x49 0x66          DC8 "If a bootload response is seen, xmodem "
   \              0x20 0x61    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x73 0x65    
   \              0x65 0x6E    
   \              0x2C 0x20    
   \              0x78 0x6D    
   \              0x6F 0x64    
   \              0x65 0x6D    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "will start in 30 seco...">`:
   \   00000000   0x77 0x69          DC8 "will start in 30 seconds\015\012"
   \              0x6C 0x6C    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x33 0x30    
   \              0x20 0x73    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "If xmodem does not st...">`:
   \   00000000   0x49 0x66          DC8 "If xmodem does not start, the bootload failed\015\012"
   \              0x20 0x78    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x6D 0x20    
   \              0x64 0x6F    
   \              0x65 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x2C 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "INFO: attempt neighbo...">`:
   \   00000000   0x49 0x4E          DC8 "INFO: attempt neighbor bootload, eui "
   \              0x46 0x4F    
   \              0x3A 0x20    
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x74 0x20    
   \              0x6E 0x65    
   \              0x69 0x67    
   \              0x68 0x62    
   \              0x6F 0x72    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2C    
   \              0x20 0x65    
   \              0x75 0x69    
   \              0x20 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "will start in 10 seco...">`:
   \   00000000   0x77 0x69          DC8 "will start in 10 seconds\015\012"
   \              0x6C 0x6C    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x31 0x30    
   \              0x20 0x73    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF         
   \   0000000D   0xFF 0xFF          DC8 255, 255, 255
   \              0xFF         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {68, 69, 86, 32, 48, 52, 53, 53}>`:
   \   00000000   0x44 0x45          DC8 68, 69, 86, 32, 48, 52, 53, 53
   \              0x56 0x20    
   \              0x30 0x34    
   \              0x35 0x35    
    970          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  appAddJitForAllChildren
             24 -> createAndStoreJitMessage
             24 -> emberChildId
             24 -> emberSerialPrintf
             24 -> emberSerialWaitSend
             24 -> emberSetMessageFlag
       16  appSendJitToChild
             16 -> emberChildIndex
             16 -> emberClearMessageFlag
             16 -> emberSendUnicast
              0 -> emberSerialPrintf
        8  bootloadMyNeighborRouter
              8 -> emberSerialPrintf
              8 -> emberSerialWaitSend
              8 -> printEUI64
              0 -> sendBootloaderLaunchMessage
       16  bootloadMySleepyChild
             16 -> emberChildId
             16 -> emberSerialPrintf
             16 -> emberSerialWaitSend
             16 -> emberSetMessageFlag
             16 -> halCommonMemCopy
             16 -> isMyChild
             16 -> printEUI64
       24  createAndStoreJitMessage
             24 -> emberFillLinkedBuffers
              0 -> emberSerialPrintf
             24 -> emberSerialPrintf
             24 -> emberSerialWaitSend
             24 -> halInternalAssertFailed
       24  emberChildJoinHandler
             24 -> emberChildId
             24 -> emberGetChildData
             24 -> emberSetMessageFlag
       16  emberPollHandler
              0 -> appSendJitToChild
             16 -> bootloadUtilSendAuthResponse
              0 -> emberClearMessageFlag
             16 -> sendBootloaderLaunchMessage
       40  formatFixed
       32  handleSinkQuery
             32 -> emReleaseMessageBuffer
             32 -> emberFillLinkedBuffers
             32 -> emberGetNodeId
             32 -> emberSendUnicast
             32 -> emberSerialPrintf
             32 -> emberSerialWaitSend
             32 -> emberStoreLowHighInt16u
             32 -> halCommonMemCopy
       32  isMyChild
             32 -> emberGetChildData
             32 -> halCommonMemCompare
        0  isMyNeighbor
        8  jitMessageStatus
              8 -> emberSerialPrintf
              8 -> emberSerialWaitSend
              8 -> halInternalResetWatchDog
              0 -> jitMessageStatusPrintMessageData
       24  jitMessageStatusPrintMessageData
             24 -> emberGetLinkedBuffersByte
             24 -> emberSerialPrintf
              0 -> emberSerialWaitSend
       48  printAddressTable
             48 -> emberGetAddressTableRemoteEui64
             48 -> emberGetAddressTableRemoteNodeId
             48 -> emberSerialPrintf
             48 -> emberSerialWaitSend
             48 -> printEUI64
       48  printChildTable
             48 -> emberGetChildData
             48 -> emberSerialPrintf
             48 -> printEUI64
       24  printEUI64
             24 -> emberSerialPrintf
       24  printExtendedPanId
             24 -> emberSerialPrintf
       32  printMulticastTable
             32 -> emberSerialPrintf
             32 -> emberSerialWaitSend
       32  printNodeInfo
             32 -> emberGetExtendedPanId
             32 -> emberGetNodeId
             32 -> emberGetPanId
             32 -> emberGetRadioChannel
             32 -> emberGetRadioPower
             32 -> emberNetworkState
             32 -> emberSerialPrintf
             32 -> emberSerialWaitSend
             32 -> printEUI64
             32 -> printExtendedPanId
       48  printTokens
             48 -> emberSerialPrintf
             48 -> emberSerialWaitSend
             48 -> halInternalGetTokenData
       40  sendBootloaderLaunchMessage
             40 -> __aeabi_memcpy4
             40 -> bootloadUtilSendRequest
       40  sensorCommonPrint16ByteKey
             40 -> emberSerialPrintf
              0 -> emberSerialWaitSend
             40 -> emberSerialWaitSend
       64  sensorCommonPrintKeys
             64 -> emberGetKey
             64 -> emberNetworkState
             64 -> emberSerialPrintf
             64 -> sensorCommonPrint16ByteKey
             64 -> sensorPrintKeyOptions
       40  sensorCommonSetupSecurity
             40 -> __aeabi_memcpy4
             40 -> emberSerialPrintf
             40 -> sensorCommonPrint16ByteKey
             40 -> trustCenterInit
       16  sensorPrintKeyOptions
              0 -> emberSerialPrintf
             16 -> emberSerialPrintf
             16 -> emberSerialWaitSend
             16 -> printEUI64


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "             Age">
      12  ?<Constant "   data: ">
      16  ?<Constant "  0x%2x     ">
      12  ?<Constant "  0x%2x   ">
       8  ?<Constant "  0x%2x">
      12  ?<Constant "  0x%x\r\n">
      12  ?<Constant "  DISC ACT ">
       8  ?<Constant "  FALSE">
       8  ?<Constant "  TRUE ">
      12  ?<Constant "  UNKNOWN  ">
      12  ?<Constant "  UNUSED   ">
      12  ?<Constant " %c%c:   ">
       8  ?<Constant " %c%c: ">
       8  ?<Constant " ??????">
       8  ?<Constant " mobile">
      12  ?<Constant " non-sleepy">
       8  ?<Constant " sleepy">
       8  ?<Constant "%4x] ">
      28  ?<Constant "%X %X %X %X %X %X %X %X ">
       4  ?<Constant "%x ">
       4  ?<Constant "%x">
       4  ?<Constant "%x:">
       8  ?<Constant "%x] ">
      28  ?<Constant ", stack [%2x], app [2...">
      28  ?<Constant "ACTIVE_KEY_SEQ_NUM: 0...">
      16  ?<Constant "DEBUG IS ON\r\n">
      32  ?<Constant "EMBER_CURRENT_NETWORK...">
      32  ?<Constant "EMBER_TRUST_CENTER_LI...">
      28  ?<Constant "ERROR: %x, clear flag...">
      32  ?<Constant "ERROR: initializing s...">
      48  ?<Constant "ERROR: no buffers to ...">
      44  ?<Constant "ERROR: send unicast, ...">
      40  ?<Constant "ERROR: set flag, chil...">
      32  ?<Constant "EVENT: creating JIT m...">
      20  ?<Constant "ExtendedPanId [N/A]">
      16  ?<Constant "ExtendedPanId: ">
      28  ?<Constant "INFO : link key set to: ">
      56  ?<Constant "INFO : not a valid ne...">
      28  ?<Constant "INFO : nwk key set to:  ">
      36  ?<Constant "INFO: attempt child b...">
      40  ?<Constant "INFO: attempt neighbo...">
      40  ?<Constant "If a bootload respons...">
      48  ?<Constant "If xmodem does not st...">
      32  ?<Constant "Index  Inuse  NodeId ...">
      32  ?<Constant "Index  MulticastId  E...">
      40  ?<Constant "JIT: setting flag, fo...">
      16  ?<Constant "NETWORK_KEY: 0x">
      20  ?<Constant "NODE_TYPE: 0x%x\r\n">
       4  ?<Constant "N] ">
       8  ?<Constant "None] ">
      16  ?<Constant "PAN_ID: 0x%2x\r\n">
      28  ?<Constant "RADIO_FREQ_CHANNEL: 0...">
      24  ?<Constant "RADIO_TX_POWER: 0x%x\r\n">
      24  ?<Constant "STACK_PROFILE: 0x%x\r\n">
      44  ?<Constant "TX ERROR [sink advert...">
       4  ?<Constant "Y] ">
      24  ?<Constant "ZIGBEE_NODE_ID: 0x%2x\r\n">
      16  ?<Constant "\r\n    auth [">
      16  ?<Constant "\r\n    inFC [">
      16  ?<Constant "\r\n    outFC [">
      16  ?<Constant "\r\n    partner [">
      16  ?<Constant "\r\n    seqNum [">
       4  ?<Constant "\r\n">
      20  ?<Constant "] short ID [%2x]\r\n">
       2  ?<Constant "]">
      44  ?<Constant "bitmask for Multicast...">
      48  ?<Constant "channel [0x%x], power...">
      44  ?<Constant "channel [N/A], power ...">
      12  ?<Constant "common.c">
       8  ?<Constant "eui [">
       8  ?<Constant "none] ">
      40  ?<Constant "packet buffer for Mul...">
      24  ?<Constant "security level [%x]\r\n">
       8  ?<Constant "sink ">
      28  ?<Constant "will start in 10 seco...">
      28  ?<Constant "will start in 30 seco...">
      16  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       8  ?<Constant {68, 69, 86, 32, 48, 52, 53, 53}>
      16  ?<Constant {{101, 109, 98, 101, 114, 32, 69, 7
      16  ?<Constant {{90, 105, 103, 98, 101, 101, 32, 8
       4  ??DataTable85
       4  ??DataTable85_1
       4  ??DataTable85_2
       4  ??DataTable85_3
       4  ??DataTable87
       4  ??DataTable95
       4  ??DataTable97
       4  ??DataTable97_1
       4  ??DataTable97_10
       4  ??DataTable97_2
       4  ??DataTable97_3
       4  ??DataTable97_4
       4  ??DataTable97_5
       4  ??DataTable97_6
       4  ??DataTable97_7
       4  ??DataTable97_8
       4  ??DataTable97_9
       8  ?Subroutine0
       6  ?Subroutine1
       8  ?Subroutine2
       6  ?Subroutine3
       8  ?Subroutine4
      10  ?Subroutine5
     102  appAddJitForAllChildren
      84  appSendJitToChild
      58  bootloadMyNeighborRouter
     102  bootloadMySleepyChild
      98  createAndStoreJitMessage
      42  emberChildJoinHandler
      72  emberPollHandler
      90  formatFixed
     128  handleSinkQuery
      54  isMyChild
       4  isMyNeighbor
      16  jitMessageApsFrame
          jitMessageMulticastHello
          jitMaskMulticastHello
      44  jitMessageStatus
      66  jitMessageStatusPrintMessageData
      12  parentLaunchBootload
          bootloadInProgressChildId
          bootloadInProgressEui
     216  printAddressTable
     106  printChildTable
      30  printEUI64
      36  printExtendedPanId
     108  printMulticastTable
     164  printNodeInfo
     168  printTokens
      50  sendBootloaderLaunchMessage
      94  sensorCommonPrint16ByteKey
      82  sensorCommonPrintKeys
      82  sensorCommonSetupSecurity
     190  sensorPrintKeyOptions

 
    12 bytes in section .bss
    16 bytes in section .data
    26 bytes in section .rodata
 4 044 bytes in section .text
 
 4 044 bytes of CODE  memory
    26 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
