###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.4.54170/W32 for ARM     02/Jul/2013  21:36:49 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\sink.c                                                 #
#    Command line =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\sink.c -D DEBUG -D "BOARD_HEADER=\"hal/micro/cortexm3/ #
#                    em35x/board/dev0680.h\"" -D                              #
#                    "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\""  #
#                    -D HAL_MICRO -D CORTEXM3 -D CORTEXM3_EM357 -D PHY_EM3XX  #
#                    -D BOARD_DEV0680 -D "CONFIGURATION_HEADER=\"app/sensor/s #
#                    ensor-configuration.h\"" -D SINK_APP -D                  #
#                    EMBER_SERIAL1_MODE=EMBER_SERIAL_FIFO -D                  #
#                    EMBER_SERIAL1_TX_QUEUE_SIZE=128 -D                       #
#                    EMBER_SERIAL1_RX_QUEUE_SIZE=16 -D EMBER_SERIAL0_DEBUG    #
#                    -D EMBER_SERIAL0_MODE=EMBER_SERIAL_FIFO -D               #
#                    EMBER_SERIAL0_TX_QUEUE_SIZE=128 -D                       #
#                    EMBER_SERIAL0_RX_QUEUE_SIZE=64 -D                        #
#                    SCAN_DEBUG_PRINT_ENABLE -D USE_BOOTLOADER_LIB -D         #
#                    "__SOURCEFILE__=\"sink.c\"" -lC                          #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\            #
#                    --diag_suppress Pa050 -o F:\Firmware\emberZNet\firmware\ #
#                    EmberZNet\EM35x\build\sink-cortexm3-iar-em357-em3xx-dev0 #
#                    680-debug\Obj\ --debug --endian=little --cpu=Cortex-M3   #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I F:\Firmware\emberZNet\firmware\EmberZNet\EM35x #
#                    \app\sensor\ -I F:\Firmware\emberZNet\firmware\EmberZNet #
#                    \EM35x\app\sensor\ewb-em357\..\..\..\ -I                 #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\STACK\ -I                           #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\HAL\ -I                             #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\ -Ohz --use_c++_inline              #
#    List file    =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\sink.lst    #
#    Object file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Obj\sink.o      #
#                                                                             #
#                                                                             #
###############################################################################

F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\sensor\sink.c
      1          // *******************************************************************
      2          //  sink.c
      3          //
      4          //  sample app for Ember Stack API
      5          //
      6          //  This is an example of a sensor application using the Ember ZigBee stack.
      7          //  There are two types of nodes: sensor nodes, which collect data and
      8          //  attempt to send it to a central point, and sink nodes, which are the
      9          //  central collection point. In a real environment the sensor nodes
     10          //  would collect their data from the environment around them: an electric
     11          //  meter, a light panel, or a temperature sensor. In this example the
     12          //  sensor nodes create random data.
     13          //
     14          //  There are three types of sensor nodes: line powered sensors, sleepy
     15          //  sensors, and mobile sensors. Line powered sensors route and are always
     16          //  awake. They can also serve as parents to sleepy or mobile sensors.
     17          //  Sleepy sensors sleep whenever they can to conserve power but they do
     18          //  not route and rely on their parent when communicating with the network.
     19          //  Mobile sensors are like sleepy sensors but are meant to move. mobile
     20          //  sensors will wait a smaller amount of time (5 seconds) to switch parents
     21          //  than sleepy sensors will (60 seconds) if their parent does not respond to
     22          //  their polls.
     23          //
     24          //  A sink node sends out advertisements at regular intervals using a
     25          //  multicast. When a sensor without a sink hears this multicast, it
     26          //  sends a message requesting to use this sink. If the sink has a free
     27          //  address table entry it responds with a sink ready message and at that
     28          //  point the sensor is free to send data.
     29          //  If N data packets (N is the error tolerance) cannot be successfully
     30          //  sent from the sensor to the sink, then the sensor node will invalidate
     31          //  its tie to the sink and wait for another advertisement.
     32          //
     33          //  Sleepy and mobile sensors query their parent for the sink upon
     34          //  joining the network. The parent responds to the query with a sink
     35          //  advertise message indicating the network sink.
     36          //
     37          //  Note that the serial input is not responsive when the sleepy and mobile
     38          //  nodes are sleeping, which is whenever they are joined to the network.
     39          //
     40          //  This example also provides some simple commands that can be sent to the
     41          //  node via the serial port. A brief explanation of the commands is
     42          //  provided below:
     43          //  ('f') force the sink to advertise
     44          //  ('t') makes the node play a tune. Useful in identifying a node.
     45          //  ('a') prints the address table of the node
     46          //  ('m') prints the multicast table of the node
     47          //  ('l') tells the node to send a multicast hello packet.
     48          //  ('i') prints info about this node including channel, power, and app
     49          //  ('b') puts the node into the bootloader menu (as an example).
     50          //  ('c') prints the child table
     51          //  ('j') prints out the status of the JIT (Just In Time) message
     52          //        storage
     53          //  ('0') simulate button 0 press - turns permit join on for 60 seconds
     54          //        this allows other nodes to join to this node
     55          //  ('1') simulate button 1 press - leave the network
     56          //  ('e') reset the node
     57          //  ('B') attempts a passthru bootload of the first device in the address
     58          //        table. This is meant to show how standalone bootloader is
     59          //        integrated into an application and not meant as a full solution.
     60          //        All necessary code is defined'ed under USE_BOOTLOADER_LIB.
     61          //  ('C') attempts a passthru bootload of the first device in the child table
     62          //  ('Q') sends a bootload query message.
     63          //  ('*') switch the network key: send the key followed by a switch key
     64          //        command 30 seconds later
     65          //  ('&') send a switch key command. This is needed only if the device
     66          //        sent a new key and then reset before it was able to send the
     67          //        switch key command
     68          //  ('?') prints the help menu
     69          //
     70          //  Copyright 2005 by Ember Corporation. All rights reserved.              *80*
     71          // *******************************************************************
     72          
     73          #include "app/sensor/common.h"
     74          #include "app/util/security/security.h"
     75          #ifdef  PHY_BRIDGE
     76           #ifdef CORTEXM3
     77            #include "hal/micro/cortexm3/diagnostic.h"
     78           #endif
     79           #include "phy/bridge/zigbee-bridge.h"
     80           #ifdef  BRIDGE_TRACE
     81            #include "phy/bridge/zigbee-bridge-internal.h"
     82           #endif//BRIDGE_TRACE
     83          
     84           static const char* brgControlNames[BRG_CONTROL_ITEMS] = {
     85                  "Normal", "Radio Only", "Bridge only", "Radio and Bridge",
     86           };
     87          #endif//PHY_BRIDGE
     88          
     89          // *******************************************************************
     90          // Define the concentrator type for use when sending "many-to-one"
     91          // route requests.
     92          //
     93          // In EmberZNet 2.x and earlier a node sending this type of request
     94          // was referred to as an "aggregator". In the ZigBee specification and
     95          // EmberZNet 3 it is referred to as a "concentrator".
     96          //
     97          // EMBER_HIGH_RAM_CONCENTRATOR is used when the caller has enough
     98          // memory to store source routes for the whole network.
     99          // EMBER_LOW_RAM_CONCENTRATOR is used when the concentrator has
    100          // insufficient RAM to store all outbound source routes.
    101          
    102          int16u concentratorType = EMBER_LOW_RAM_CONCENTRATOR;
    103          
    104          // *******************************************************************
    105          // Ember endpoint and interface configuration
    106          
    107          int8u emberEndpointCount = 1;

   \                                 In section .rodata, align 4, keep-with-next
    108          EmberEndpointDescription PGM endpointDescription = { PROFILE_ID, 0, };
   \                     endpointDescription:
   \   00000000   0xC00F 0x0000      DC16 49167, 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    109          EmberEndpoint emberEndpoints[] = {
    110            { ENDPOINT, &endpointDescription },
    111          };
    112          
    113          // End Ember endpoint and interface configuration
    114          // *******************************************************************
    115          
    116          // *******************************************************************
    117          
    118          // the time a sink waits before advertising
    119          int16u timeBeforeSinkAdvertise = TIME_BEFORE_SINK_ADVERTISE;
    120          
    121          // buffer for organizing data before we send a message
    122          int8u globalBuffer[100];
    123          
    124          // keeps track of the last time a sink node heard from a sensor. If it doesn't
    125          // hear from a sensor in (MISS_PACKET_TOLERANCE * SEND_DATA_RATE) - meaning
    126          // it missed MISS_PACKET_TOLERANCE data packets, it deletes the address
    127          // table entry.
    128          // *** NOTE: SINK_ADDRESS_TABLE_SIZE is used for the address table instead
    129          // ***       of the usual EMBER_ADDRESS_TABLE_SIZE, as 5 entries are reserved
    130          // ***       for use by the trust center code.
    131          // *** See "app/sensor/sensor-configuration.h" for more details.
    132          int16u ticksSinceLastHeard[SINK_ADDRESS_TABLE_SIZE];
    133          
    134          boolean buttonZeroPress = FALSE;  // for button push (see halButtonIsr)
    135          boolean buttonOnePress = FALSE;  // for button push (see halButtonIsr)
    136          
    137          // to play a tune - used to identify a node

   \                                 In section .text, align 4, keep-with-next
    138          int8u PGM tune[] = {
   \                     tune:
   \   00000000   0x34 0x02          DC8 52, 2, 0, 2, 31, 1, 0, 1, 59, 1, 0, 1, 0, 0, 0, 0
   \              0x00 0x02    
   \              0x1F 0x01    
   \              0x00 0x01    
   \              0x3B 0x01    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
    139            NOTE_D4,  2,
    140            0,        2,
    141            NOTE_B4,  1,
    142            0,        1,
    143            NOTE_C4,  1,
    144            0,        1,
    145            0,        0
    146          };
    147          
    148          // a timer to remind us to send the network key update after we have sent
    149          // out the network key. We must wait a period equal to the broadcast
    150          // timeout so that all routers have a chance to receive the broadcast
    151          // of the new network key
    152          int8u sendNetworkKeyUpdateTimer;
    153          #define SENSORAPP_NETWORK_KEY_UPDATE_TIME 120; // 30 seconds
    154          
    155          
    156          // End application specific constants and globals
    157          // *******************************************************************
    158          
    159          // *******************************************************************
    160          // Forward declarations
    161          void printHelp(void);
    162          void addMulticastGroup(void);
    163          void processSerialInput(void);
    164          static void applicationTick(void);
    165          void sinkAdvertise(void);
    166          void handleSinkAdvertise(int8u* data);
    167          void handleSensorSelectSink(EmberEUI64 eui,
    168                                      EmberNodeId sender);
    169          int8u findFreeAddressTableLocation(void);
    170          int8u findAddressTableLocation(EmberEUI64 eui64);
    171          void sinkInit(void);
    172          
    173          
    174          // these are defines used for the variable networkFormMethod. This variable
    175          // affects the serial output when a network is formed.
    176          #define SINK_FORM_NEW_NETWORK 1
    177          #define SINK_USE_NETWORK_INIT 2
    178          #define SINK_USE_SCAN_UTILS   3
    179          int8u networkFormMethod = SINK_FORM_NEW_NETWORK;
    180          
    181          //
    182          // *******************************************************************
    183          
    184          // *******************************************************************
    185          // Begin main application loop
    186          

   \                                 In section .text, align 4, keep-with-next
    187          int main(void)
    188          {
   \                     main:
   \   00000000   0xB08A             SUB      SP,SP,#+40
    189            // structure to store necessary network parameters of the node
    190            // (which are panId, enableRelay, radioTxPower, and radioChannel)
    191            EmberNetworkParameters networkParams;
    192            EmberStatus status;
    193            EmberNodeType nodeType;
    194            int8u extendedPanId[EXTENDED_PAN_ID_SIZE] = APP_EXTENDED_PANID;
   \   00000002   0xA807             ADD      R0,SP,#+28
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant {115, 101, 110, 115, 111, 114, 0, 0`
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
    195          
    196            //Initialize the hal
    197            halInit();
   \   0000000C   0x.... 0x....      BL       halInit
    198          
    199            // allow interrupts
    200            INTERRUPTS_ON();
   \   00000010   0x.... 0x....      BL       _enableBasePri
    201          
    202            // inititialize the serial port
    203            // good to do this before emberInit, that way any errors that occur
    204            // can be printed to the serial port.
    205            if(emberSerialInit(APP_SERIAL, BAUD_115200, PARITY_NONE, 1)
    206               != EMBER_SUCCESS) {
   \   00000014   0x2301             MOVS     R3,#+1
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x210F             MOVS     R1,#+15
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       emberSerialInit
   \   00000020   0xB128             CBZ.N    R0,??main_0
    207              emberSerialInit(APP_SERIAL, BAUD_19200, PARITY_NONE, 1);
   \   00000022   0x2301             MOVS     R3,#+1
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x2108             MOVS     R1,#+8
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       emberSerialInit
    208            }
    209          
    210            // emberInit must be called before other EmberNet stack functions
    211            status = emberInit();
   \                     ??main_0:
   \   0000002E   0x.... 0x....      BL       emberInit
   \   00000032   0x4605             MOV      R5,R0
    212          
    213            // print the reason for the reset
    214            emberSerialGuaranteedPrintf(APP_SERIAL, "reset: %p\r\n",
    215                                        (PGM_P)halGetResetString());
   \   00000034   0x.... 0x....      BL       halGetResetString
   \   00000038   0x4602             MOV      R2,R0
   \   0000003A   0x.... 0x....      ADR.W    R1,`?<Constant "reset: %p\\r\\n">`
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       emberSerialGuaranteedPrintf
    216          #ifdef  PHY_BRIDGE
    217            #ifdef CORTEXM3
    218              if (halResetWasCrash()) {
    219                halPrintCrashSummary(APP_SERIAL);
    220                halPrintCrashDetails(APP_SERIAL);
    221                halPrintCrashData(APP_SERIAL);
    222              }
    223            #endif
    224          #endif//PHY_BRIDGE
    225          
    226            emberSerialGuaranteedPrintf(APP_SERIAL,
    227          							  "Build on: "__TIME__" "__DATE__"\r\n");
   \   00000044   0x.... 0x....      ADR.W    R1,`?<Constant "Build on: 21:36:48 Ju...">`
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       emberSerialGuaranteedPrintf
    228            if (status != EMBER_SUCCESS) {
   \   0000004E   0x.... 0x....      ADR.W    R4,`?<Constant "sink.c">`
   \   00000052   0xB15D             CBZ.N    R5,??main_1
    229              // report status here
    230              emberSerialGuaranteedPrintf(APP_SERIAL,
    231                        "ERROR: emberInit 0x%x\r\n", status);
   \   00000054   0x462A             MOV      R2,R5
   \   00000056   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: emberInit 0x%x\\r\\n">`
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       emberSerialGuaranteedPrintf
    232              // the app can choose what to do here, if the app is running
    233              // another device then it could stay running and report the
    234              // error visually for example. This app asserts.
    235              assert(FALSE);
   \   00000060   0xB507             PUSH {R0,R1,R2,LR}
   \   00000062   0x21EB             MOVS     R1,#+235
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       halInternalAssertFailed
   \   0000006A   0xE005             B.N      ??CrossCallReturnLabel_94
    236            } else {
    237              emberSerialPrintf(APP_SERIAL, "EVENT: emberInit passed\r\n");
   \                     ??main_1:
   \   0000006C   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: emberInit pass...">`
   \   00000070   0x.... 0x....      BL       ??Subroutine0_0
    238              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_60:
   \   00000074   0x.... 0x....      BL       ?Subroutine1
    239            }
    240          
    241            // init application state
    242            sinkInit();
   \                     ??CrossCallReturnLabel_94:
   \   00000078   0x.... 0x....      BL       sinkInit
    243          
    244            // when acting as a trust center, a portion of the address table is
    245            // needed to keep track of shortID-to-EUI mappings. The mapping is
    246            // needed during the key exchanges that happen immediately after a join.
    247            // This function is found in app/util/security/security-address-cache.c.
    248            // The sink allocates address table entries from 0 to
    249            // (SINK_ADDRESS_TABLE_SIZE-1) for the use of the sink app. It allocates
    250            // entries from SINK_ADDRESS_TABLE_SIZE to (SINK_ADDRESS_TABLE_SIZE +
    251            // SINK_TRUST_CENTER_ADDRESS_CACHE_SIZE) for the trust center use.
    252            // The defines used here are defined in app/sensor/sensor-configuration.h
    253            securityAddressCacheInit(SINK_ADDRESS_TABLE_SIZE,
    254                                     SINK_TRUST_CENTER_ADDRESS_CACHE_SIZE);
   \   0000007C   0x2105             MOVS     R1,#+5
   \   0000007E   0x200F             MOVS     R0,#+15
   \   00000080   0x.... 0x....      BL       securityAddressCacheInit
    255          
    256          
    257            // print a startup message
    258            emberSerialPrintf(APP_SERIAL,
    259                              "\r\nINIT : sink app ");
   \   00000084   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\nINIT : sink app ">`
   \   00000088   0x.... 0x....      BL       ??Subroutine0_0
    260          
    261            printEUI64(APP_SERIAL, (EmberEUI64*) emberGetEui64());
   \                     ??CrossCallReturnLabel_59:
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable113_1
   \   00000090   0x.... 0x....      BL       ??Subroutine4_0
    262            emberSerialPrintf(APP_SERIAL, "\r\n");
   \                     ??CrossCallReturnLabel_113:
   \   00000094   0x....             ADR.N    R5,??DataTable105  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000096   0x4629             MOV      R1,R5
   \   00000098   0x.... 0x....      BL       ??Subroutine0_0
    263            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_58:
   \   0000009C   0x.... 0x....      BL       ?Subroutine1
    264          
    265            #ifdef USE_BOOTLOADER_LIB
    266              // Using the same port for application serial print and passthru
    267              // bootloading.  User must be careful not to print anything to the port
    268              // while doing passthru bootload since that can interfere with the data
    269              // stream.  Also the port's baud rate will be set to 115200 kbps in order
    270              // to maximize bootload performance.
    271              bootloadUtilInit(APP_SERIAL, APP_SERIAL);
   \                     ??CrossCallReturnLabel_93:
   \   000000A0   0x2101             MOVS     R1,#+1
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x.... 0x....      BL       bootloadUtilInit
    272            #endif // USE_BOOTLOADER_LIB
    273          
    274            // try and rejoin the network this node was previously a part of
    275            // if status is not EMBER_SUCCESS then the node didn't rejoin it's old network
    276            // sink nodes need to be coordinators, so ensure we are a coordinator
    277            networkFormMethod = SINK_USE_NETWORK_INIT;
   \   000000A8   0x.... 0x....      LDR.W    R6,??DataTable113_2
   \   000000AC   0x2002             MOVS     R0,#+2
   \   000000AE   0x7030             STRB     R0,[R6, #+0]
    278            if (((emberGetNodeType(&nodeType)) != EMBER_SUCCESS) ||
    279                (nodeType != EMBER_COORDINATOR) ||
    280                (emberNetworkInit() != EMBER_SUCCESS))
   \   000000B0   0xA800             ADD      R0,SP,#+0
   \   000000B2   0x.... 0x....      BL       emberGetNodeType
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xBF04             ITT      EQ 
   \   000000BA   0xF89D 0x0000      LDRBEQ   R0,[SP, #+0]
   \   000000BE   0x2801             CMPEQ    R0,#+1
   \   000000C0   0xD103             BNE.N    ??main_2
   \   000000C2   0x.... 0x....      BL       emberNetworkInit
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD038             BEQ.N    ??main_3
    281            {
    282              // Set the security keys and the security state - specific to this
    283              // application, all variants of this application (sink, sensor,
    284              // sleepy-sensor, mobile-sensor) need to use the same security setup.
    285              // This function is in app/sensor/common.c. This function should only
    286              // be called when a network is formed as the act of setting the key
    287              // sets the frame counters to 0. On reset and networkInit this should
    288              // not be called.
    289              sensorCommonSetupSecurity();
   \                     ??main_2:
   \   000000CA   0x.... 0x....      BL       sensorCommonSetupSecurity
    290          
    291              // Bring the network up.
    292              #ifdef USE_HARDCODED_NETWORK_SETTINGS
    293                // set the mode we are using
    294                networkFormMethod = SINK_FORM_NEW_NETWORK;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x7030             STRB     R0,[R6, #+0]
    295          
    296                // use the settings from app/sensor/common.h
    297                networkParams.panId = APP_PANID;
   \   000000D2   0xF240 0x10FF      MOVW     R0,#+511
   \   000000D6   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    298                networkParams.radioTxPower = APP_POWER;
   \   000000DA   0x2003             MOVS     R0,#+3
   \   000000DC   0xF88D 0x000E      STRB     R0,[SP, #+14]
    299                networkParams.radioChannel = APP_CHANNEL;
   \   000000E0   0x201A             MOVS     R0,#+26
   \   000000E2   0xF88D 0x000F      STRB     R0,[SP, #+15]
    300                MEMCOPY(networkParams.extendedPanId, extendedPanId, EXTENDED_PAN_ID_SIZE);
   \   000000E6   0x2208             MOVS     R2,#+8
   \   000000E8   0xA907             ADD      R1,SP,#+28
   \   000000EA   0xA801             ADD      R0,SP,#+4
   \   000000EC   0x.... 0x....      BL       halCommonMemCopy
    301          
    302                // tell the user what is going on
    303                emberSerialPrintf(APP_SERIAL,
    304                     "FORM : attempting to form network\r\n");
   \   000000F0   0x.... 0x....      ADR.W    R1,`?<Constant "FORM : attempting to ...">`
   \   000000F4   0x.... 0x....      BL       ??Subroutine0_0
    305                emberSerialPrintf(APP_SERIAL, "     : using channel 0x%x, panid 0x%2x, ",
    306                     networkParams.radioChannel, networkParams.panId);
   \                     ??CrossCallReturnLabel_57:
   \   000000F8   0xF8BD 0x300C      LDRH     R3,[SP, #+12]
   \   000000FC   0xF89D 0x200F      LDRB     R2,[SP, #+15]
   \   00000100   0x.... 0x....      ADR.W    R1,`?<Constant "     : using channel ...">`
   \   00000104   0x.... 0x....      BL       ?Subroutine5
    307                printExtendedPanId(APP_SERIAL, networkParams.extendedPanId);
   \                     ??CrossCallReturnLabel_119:
   \   00000108   0xA901             ADD      R1,SP,#+4
   \   0000010A   0x2001             MOVS     R0,#+1
   \   0000010C   0x.... 0x....      BL       printExtendedPanId
    308                emberSerialPrintf(APP_SERIAL, "\r\n");
   \   00000110   0x4629             MOV      R1,R5
   \   00000112   0x.... 0x....      BL       ??Subroutine0_0
    309                emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_56:
   \   00000116   0x.... 0x....      BL       ?Subroutine1
    310          
    311                // attempt to form the network
    312                status = emberFormNetwork(&networkParams);
   \                     ??CrossCallReturnLabel_92:
   \   0000011A   0xA801             ADD      R0,SP,#+4
   \   0000011C   0x.... 0x....      BL       emberFormNetwork
   \   00000120   0x0005             MOVS     R5,R0
    313                if (status != EMBER_SUCCESS) {
   \   00000122   0xD00B             BEQ.N    ??main_3
    314                  emberSerialGuaranteedPrintf(APP_SERIAL,
    315                    "ERROR: from emberFormNetwork: 0x%x\r\n",
    316                    status);
   \   00000124   0x4602             MOV      R2,R0
   \   00000126   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: from emberForm...">`
   \   0000012A   0x2001             MOVS     R0,#+1
   \   0000012C   0x.... 0x....      BL       emberSerialGuaranteedPrintf
    317                  assert(FALSE);
   \   00000130   0xB507             PUSH {R0,R1,R2,LR}
   \   00000132   0xF240 0x113D      MOVW     R1,#+317
   \   00000136   0x4620             MOV      R0,R4
   \   00000138   0x.... 0x....      BL       halInternalAssertFailed
    318                }
    319              #else
    320                // set the mode we are using
    321                networkFormMethod = SINK_USE_SCAN_UTILS;
    322          
    323                // tell the user what is going on
    324                emberSerialPrintf(APP_SERIAL,
    325                     "FORM : scanning for an available channel and panid\r\n");
    326                emberSerialWaitSend(APP_SERIAL);
    327          
    328                // Use a function from app/util/common/form-and-join.c
    329                // that scans and selects a quiet channel to form on.
    330                // Once a PAN id and channel are chosen, calls
    331                // emberUnusedPanIdFoundHandler.
    332                emberScanForUnusedPanId(EMBER_ALL_802_15_4_CHANNELS_MASK, 5);
    333              #endif
    334            }
    335            // don't need an else clause. The else clause means the emberNetworkInit
    336            // worked and the stackStatusHandler will be called.
    337          
    338          
    339          #ifndef NO_LED
    340            // say hello with LEDs
    341            halToggleLed(BOARDLED1);
   \                     ??main_3:
   \   0000013C   0x2007             MOVS     R0,#+7
   \   0000013E   0x.... 0x....      BL       halToggleLed
    342            halToggleLed(BOARDLED3);
   \   00000142   0x2015             MOVS     R0,#+21
   \   00000144   0x.... 0x....      BL       halToggleLed
    343          #endif//NO_LED
    344          
    345            // event loop
    346            while(TRUE) {
    347          
    348              halResetWatchdog();
   \                     ??main_4:
   \   00000148   0x.... 0x....      BL       halInternalResetWatchDog
    349          
    350              emberTick();
   \   0000014C   0x.... 0x....      BL       emberTick
    351              emberFormAndJoinTick();
   \   00000150   0x.... 0x....      BL       emberFormAndJoinTick
    352          
    353              processSerialInput();
   \   00000154   0x.... 0x....      BL       processSerialInput
    354          
    355              applicationTick(); // check timeouts, buttons, flash LEDs
   \   00000158   0x.... 0x....      BL       applicationTick
    356          
    357              #ifdef DEBUG
    358                emberSerialBufferTick();   // Needed for debug which uses buffered serial
   \   0000015C   0x.... 0x....      BL       emberSerialBufferTick
   \   00000160   0xE7F2             B.N      ??main_4
    359              #endif
    360            }
    361          
    362          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x4631             MOV      R1,R6
   \                     ??Subroutine4_0:
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      printEUI64

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberSerialPrintf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x4649             MOV      R1,R9
   \                     ??Subroutine0_0:
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      emberSerialPrintf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberSerialWaitSend
    363          
    364          // end main application loop
    365          // *******************************************************************
    366          
    367          // *******************************************************************
    368          // Begin Ember callback handlers
    369          // Populate as needed
    370          //
    371          
    372          // Called when a message has completed transmission --
    373          // status indicates whether the message was successfully
    374          // transmitted or not.

   \                                 In section .text, align 2, keep-with-next
    375          void emberMessageSentHandler(EmberOutgoingMessageType type,
    376                                int16u indexOrDestination,
    377                                EmberApsFrame *apsFrame,
    378                                EmberMessageBuffer message,
    379                                EmberStatus status)
    380          {
    381          
    382          }
   \                     emberMessageSentHandler:
   \   00000000   0x4770             BX       LR               ;; return
    383          
    384          
    385          #ifdef USE_BOOTLOADER_LIB
    386          // When a device sends out a bootloader query, the bootloader
    387          // query response messages are parsed by the bootloader-util
    388          // libray and and handled to this function. This application
    389          // simply prints out the EUI of the device sending the query
    390          // response.

   \                                 In section .text, align 2, keep-with-next
    391          void bootloadUtilQueryResponseHandler(boolean bootloaderActive,
    392                                                int16u manufacturerId,
    393                                                int8u *hardwareTag,
    394                                                EmberEUI64 targetEui,
    395                                                int8u bootloaderCapabilities,
    396                                                int8u platform,
    397                                                int8u micro,
    398                                                int8u phy,
    399                                                int16u blVersion)
    400          {
   \                     bootloadUtilQueryResponseHandler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x461D             MOV      R5,R3
    401            emberSerialPrintf(APP_SERIAL,"RX [BL QUERY RESP] eui: ");
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant "RX [BL QUERY RESP] eui: ">`
   \   0000000A   0x.... 0x....      BL       ??Subroutine0_0
    402            printEUI64(APP_SERIAL, (EmberEUI64*)targetEui);
   \                     ??CrossCallReturnLabel_55:
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x.... 0x....      BL       ??Subroutine4_0
    403            emberSerialPrintf(APP_SERIAL," running %p\r\n",
    404                              bootloaderActive ? "bootloader":"stack");
   \                     ??CrossCallReturnLabel_112:
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xBF14             ITE      NE 
   \   00000018   0x.... 0x....      ADRNE.W  R2,`?<Constant "bootloader">`
   \   0000001C   0x.... 0x....      ADREQ.W  R2,`?<Constant "stack">`
   \   00000020   0x.... 0x....      ADR.W    R1,`?<Constant " running %p\\r\\n">`
   \   00000024   0x.... 0x....      BL       ??Subroutine2_0
    405            emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_102:
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000002E   0x.... 0x....      B.W      emberSerialWaitSend
    406          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x.... 0x....      ADR.W    R1,`?<Constant "keyswitch: sending sw...">`
   \                     ??Subroutine2_0:
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      B.W      emberSerialPrintf
    407          
    408          // This function is called by the bootloader-util library
    409          // to ask the application if it is ok to start the bootloader.
    410          // This happens when the device is meant to be the target of
    411          // a bootload. The application could compare the manufacturerId
    412          // and/or hardwareTag arguments to known values to enure that
    413          // the correct image will be bootloaded to this device.

   \                                 In section .text, align 2, keep-with-next
    414          boolean bootloadUtilLaunchRequestHandler(int16u manufacturerId,
    415                                                   int8u *hardwareTag,
    416                                                   EmberEUI64 sourceEui) {
    417            // TODO: Compare arguments to known values.
    418          
    419            // TODO: Check for minimum required radio signal strength (RSSI).
    420          
    421            // TODO: Do not agree to launch the bootloader if any of the above conditions
    422            // are not met.  For now, always agree to launch the bootloader.
    423            return TRUE;
   \                     bootloadUtilLaunchRequestHandler:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    424          }
    425          #endif // USE_BOOTLOADER_LIB
    426          
    427          

   \                                 In section .text, align 2, keep-with-next
    428          void emberIncomingMessageHandler(EmberIncomingMessageType type,
    429                                           EmberApsFrame *apsFrame,
    430                                           EmberMessageBuffer message)
    431          {
   \                     emberIncomingMessageHandler:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4615             MOV      R5,R2
    432            // Called with an incoming message
    433            EmberEUI64 eui;
    434            EmberNodeId sender = emberGetSender();
   \   0000000C   0x.... 0x....      BL       emberGetSender
   \   00000010   0x4680             MOV      R8,R0
    435            int8u length = emberMessageBufferLength(message);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable113_3
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x5C2F             LDRB     R7,[R5, R0]
    436            int8u addressTableIndex;
    437          
    438            #ifdef USE_BOOTLOADER_LIB
    439              // If we are in the middle of bootloading, then we want to limit the
    440              // radio activity to minimum to avoid causing any interruptions to the
    441              // bootloading process.
    442              if(IS_BOOTLOADING) {
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable113_4
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xBF18             IT       NE 
   \   00000024   0x280B             CMPNE    R0,#+11
   \   00000026   0xD107             BNE.N    ??CrossCallReturnLabel_118
    443                return;
    444              }
    445            #endif
    446          
    447            // make sure this is a valid packet of sensor/sink app
    448            // it must have a EUI64 address (8 bytes minimum)
    449            if (length < 8) {
   \   00000028   0x2F08             CMP      R7,#+8
   \   0000002A   0xDA06             BGE.N    ??emberIncomingMessageHandler_0
    450              emberSerialPrintf(APP_SERIAL,
    451                                "RX [bad packet] cluster 0x%2x of length %x\r\n",
    452                                apsFrame->clusterId,
    453                                length);
   \   0000002C   0x463B             MOV      R3,R7
   \   0000002E   0x8872             LDRH     R2,[R6, #+2]
   \   00000030   0x.... 0x....      ADR.W    R1,`?<Constant "RX [bad packet] clust...">`
   \   00000034   0x.... 0x....      BL       ?Subroutine5
    454              return;
   \                     ??CrossCallReturnLabel_118:
   \   00000038   0xE0A6             B.N      ??CrossCallReturnLabel_47
    455            }
    456            emberCopyFromLinkedBuffers(message, 0, (int8u*) &eui, 8);
   \                     ??emberIncomingMessageHandler_0:
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9000             STR      R0,[SP, #+0]
   \   0000003E   0x2308             MOVS     R3,#+8
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0x4629             MOV      R1,R5
   \   00000044   0xA801             ADD      R0,SP,#+4
   \   00000046   0x.... 0x....      BL       emReallyCopyToLinkedBuffers
    457          
    458            // ********************************************
    459            // handle the incoming message
    460            // ********************************************
    461            switch (apsFrame->clusterId) {
   \   0000004A   0x8872             LDRH     R2,[R6, #+2]
   \   0000004C   0x.... 0x....      ADR.W    R6,`?<Constant "; ignoring\\r\\n">`
   \   00000050   0x.... 0x....      ADR.W    R9,`?<Constant "; processing message\\r\\n">`
   \   00000054   0x.... 0x....      ADR.W    R10,??DataTable105  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable113_1
   \   0000005C   0x4610             MOV      R0,R2
   \   0000005E   0x2A01             CMP      R2,#+1
   \   00000060   0xD00A             BEQ.N    ??emberIncomingMessageHandler_1
   \   00000062   0x2A02             CMP      R2,#+2
   \   00000064   0xD01D             BEQ.N    ??emberIncomingMessageHandler_2
   \   00000066   0x2A03             CMP      R2,#+3
   \   00000068   0xD02B             BEQ.N    ??emberIncomingMessageHandler_3
   \   0000006A   0x2A04             CMP      R2,#+4
   \   0000006C   0xD032             BEQ.N    ??emberIncomingMessageHandler_4
   \   0000006E   0x2A0A             CMP      R2,#+10
   \   00000070   0xD03C             BEQ.N    ??emberIncomingMessageHandler_5
   \   00000072   0x2A64             CMP      R2,#+100
   \   00000074   0xD06B             BEQ.N    ??emberIncomingMessageHandler_6
   \   00000076   0xE07E             B.N      ??emberIncomingMessageHandler_7
    462            case MSG_SINK_ADVERTISE:
    463              // Sink advertise should be 10 bytes: EUI(8) and shortID(2)
    464              // This handles packets that are too short.
    465              if (length < 10) {
   \                     ??emberIncomingMessageHandler_1:
   \   00000078   0x2F0A             CMP      R7,#+10
   \   0000007A   0xDA07             BGE.N    ??emberIncomingMessageHandler_8
    466                emberSerialPrintf(APP_SERIAL, "RX too short [sink advertise] from: ");
   \   0000007C   0x.... 0x....      ADR.W    R1,`?<Constant "RX too short [sink ad...">`
   \   00000080   0x.... 0x....      BL       emberSerialPrintf
    467                printEUI64(APP_SERIAL, &eui);
   \   00000084   0x.... 0x....      BL       ?Subroutine3
    468                emberSerialPrintf(APP_SERIAL, "\r\n");
   \                     ??CrossCallReturnLabel_111:
   \   00000088   0x4651             MOV      R1,R10
   \   0000008A   0xE07B             B.N      ??emberIncomingMessageHandler_9
    469                return;
    470              }
    471          
    472              // ignore own multicast advertisements
    473              if (!(emberIsLocalEui64(eui))) {
   \                     ??emberIncomingMessageHandler_8:
   \   0000008C   0x2208             MOVS     R2,#+8
   \   0000008E   0xA801             ADD      R0,SP,#+4
   \   00000090   0x.... 0x....      BL       halCommonMemCompare
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD077             BEQ.N    ??CrossCallReturnLabel_47
    474                emberSerialPrintf(APP_SERIAL, "RX [sink advertise] from: ");
   \   00000098   0x.... 0x....      ADR.W    R1,`?<Constant "RX [sink advertise] f...">`
   \   0000009C   0x.... 0x....      BL       ??Subroutine0_0
    475                printEUI64(APP_SERIAL, &eui);
   \                     ??CrossCallReturnLabel_54:
   \   000000A0   0xE06D             B.N      ??CrossCallReturnLabel_101
    476                emberSerialPrintf(APP_SERIAL, "; ignoring\r\n");
    477              }
    478              break;
    479          
    480            case MSG_SENSOR_SELECT_SINK:
    481              if (type == EMBER_INCOMING_UNICAST) {
   \                     ??emberIncomingMessageHandler_2:
   \   000000A2   0xB964             CBNZ.N   R4,??emberIncomingMessageHandler_10
    482                emberSerialPrintf(APP_SERIAL, "RX [sensor select sink] from: ");
   \   000000A4   0x.... 0x....      ADR.W    R1,`?<Constant "RX [sensor select sin...">`
   \   000000A8   0x.... 0x....      BL       ??Subroutine0_0
    483                printEUI64(APP_SERIAL, &eui);
   \                     ??CrossCallReturnLabel_53:
   \   000000AC   0x.... 0x....      BL       ?Subroutine3
    484                emberSerialPrintf(APP_SERIAL, "; processing message\r\n");
   \                     ??CrossCallReturnLabel_110:
   \   000000B0   0x.... 0x....      BL       ?Subroutine0
    485                handleSensorSelectSink(eui, sender);
   \                     ??CrossCallReturnLabel_63:
   \   000000B4   0x4641             MOV      R1,R8
   \   000000B6   0xA801             ADD      R0,SP,#+4
   \   000000B8   0x.... 0x....      BL       handleSensorSelectSink
   \   000000BC   0xE064             B.N      ??CrossCallReturnLabel_47
    486              }
    487              // if type is EMBER_INCOMING_DATAGRAM_REPLY then this is an ack
    488              // for MSG_SENSOR_SELECT_SINK, which is really a MSG_SINK_READY
    489              else if (type == EMBER_INCOMING_UNICAST_REPLY) {
   \                     ??emberIncomingMessageHandler_10:
   \   000000BE   0x2C01             CMP      R4,#+1
   \   000000C0   0xD162             BNE.N    ??CrossCallReturnLabel_47
    490                emberSerialPrintf(APP_SERIAL, "RX [sink ready] from: ");
    491                printEUI64(APP_SERIAL, &eui);
    492                emberSerialPrintf(APP_SERIAL, "; this is an error]\r\n");
    493              }
    494              break;
    495          
    496            case MSG_SINK_READY:
    497              emberSerialPrintf(APP_SERIAL, "RX [sink ready] from: ");
   \                     ??emberIncomingMessageHandler_3:
   \   000000C2   0x.... 0x....      ADR.W    R1,`?<Constant "RX [sink ready] from: ">`
   \   000000C6   0x.... 0x....      BL       ??Subroutine0_0
    498              printEUI64(APP_SERIAL, &eui);
   \                     ??CrossCallReturnLabel_52:
   \   000000CA   0x.... 0x....      BL       ?Subroutine3
    499              emberSerialPrintf(APP_SERIAL, "; this is an error]\r\n");
   \                     ??CrossCallReturnLabel_109:
   \   000000CE   0x.... 0x....      ADR.W    R1,`?<Constant "; this is an error]\\r\\n">`
   \   000000D2   0xE057             B.N      ??emberIncomingMessageHandler_9
    500              break;
    501          
    502            case MSG_SINK_QUERY:
    503              emberSerialPrintf(APP_SERIAL, "RX [sink query] from: ");
   \                     ??emberIncomingMessageHandler_4:
   \   000000D4   0x.... 0x....      ADR.W    R1,`?<Constant "RX [sink query] from: ">`
   \   000000D8   0x.... 0x....      BL       ??Subroutine0_0
    504              printEUI64(APP_SERIAL, &eui);
   \                     ??CrossCallReturnLabel_51:
   \   000000DC   0x.... 0x....      BL       ?Subroutine3
    505              emberSerialPrintf(APP_SERIAL, "; processing message\r\n");
   \                     ??CrossCallReturnLabel_108:
   \   000000E0   0x.... 0x....      BL       ?Subroutine0
    506              handleSinkQuery(sender);
   \                     ??CrossCallReturnLabel_62:
   \   000000E4   0x4640             MOV      R0,R8
   \   000000E6   0x.... 0x....      BL       handleSinkQuery
    507              break;
   \   000000EA   0xE04D             B.N      ??CrossCallReturnLabel_47
    508          
    509            case MSG_DATA:
    510              // we just heard from this remote node so clear ticks since last heard
    511              addressTableIndex = findAddressTableLocation(eui);
   \                     ??emberIncomingMessageHandler_5:
   \   000000EC   0xA801             ADD      R0,SP,#+4
   \   000000EE   0x.... 0x....      BL       findAddressTableLocation
    512              if (addressTableIndex != EMBER_NULL_ADDRESS_TABLE_INDEX)
   \   000000F2   0x28FF             CMP      R0,#+255
   \   000000F4   0xD005             BEQ.N    ??emberIncomingMessageHandler_11
    513                ticksSinceLastHeard[addressTableIndex] = 0;
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable113_5
   \   000000FA   0xEB01 0x0040      ADD      R0,R1,R0, LSL #+1
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x8181             STRH     R1,[R0, #+12]
    514              emberSerialPrintf(APP_SERIAL, "RX [DATA] from: ");
   \                     ??emberIncomingMessageHandler_11:
   \   00000102   0x.... 0x....      ADR.W    R1,`?<Constant "RX [DATA] from: ">`
   \   00000106   0x.... 0x....      BL       ??Subroutine0_0
    515              printEUI64(APP_SERIAL, &eui);
   \                     ??CrossCallReturnLabel_50:
   \   0000010A   0x.... 0x....      BL       ?Subroutine3
    516              if (length < 10) {
   \                     ??CrossCallReturnLabel_107:
   \   0000010E   0x2F0A             CMP      R7,#+10
   \   00000110   0xBFB8             IT       LT 
   \   00000112   0x.... 0x....      ADRLT.W  R1,`?<Constant "; len 0x%x / data NO ...">`
    517                emberSerialPrintf(APP_SERIAL, "; len 0x%x / data NO DATA!\r\n");
   \   00000116   0xDB35             BLT.N    ??emberIncomingMessageHandler_9
    518              } else {
    519                emberSerialPrintf(APP_SERIAL, "; len 0x%x / data 0x%x%x\r\n",
    520                                  length,
    521                                  emberGetLinkedBuffersByte(message, EUI64_SIZE + 0),
    522                                  emberGetLinkedBuffersByte(message, EUI64_SIZE + 1));
   \   00000118   0x2109             MOVS     R1,#+9
   \   0000011A   0x4628             MOV      R0,R5
   \   0000011C   0x.... 0x....      BL       emberGetLinkedBuffersByte
   \   00000120   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_125:
   \   00000124   0x4603             MOV      R3,R0
   \   00000126   0x9400             STR      R4,[SP, #+0]
   \   00000128   0x463A             MOV      R2,R7
   \   0000012A   0x.... 0x....      ADR.W    R1,`?<Constant "; len 0x%x / data 0x%...">`
   \   0000012E   0x2001             MOVS     R0,#+1
   \   00000130   0x.... 0x....      BL       emberSerialPrintf
    523          #ifdef DEBUG
    524                emberDebugPrintf("Sink received data: 0x%x%x \r\n",
    525                                  emberGetLinkedBuffersByte(message, EUI64_SIZE + 0),
    526                                  emberGetLinkedBuffersByte(message, EUI64_SIZE + 1));
   \   00000134   0x2109             MOVS     R1,#+9
   \   00000136   0x4628             MOV      R0,R5
   \   00000138   0x.... 0x....      BL       emberGetLinkedBuffersByte
   \   0000013C   0x.... 0x....      BL       ?Subroutine8
    527          #endif
    528              }
   \                     ??CrossCallReturnLabel_124:
   \   00000140   0x4622             MOV      R2,R4
   \   00000142   0x4601             MOV      R1,R0
   \   00000144   0x.... 0x....      ADR.W    R0,`?<Constant "Sink received data: 0...">`
   \   00000148   0x.... 0x....      BL       emberDebugPrintf
   \   0000014C   0xE01C             B.N      ??CrossCallReturnLabel_47
    529              break;
    530          
    531            case MSG_MULTICAST_HELLO:
    532              // ignore own multicast hello's
    533              if (!(emberIsLocalEui64(eui))) {
   \                     ??emberIncomingMessageHandler_6:
   \   0000014E   0x2208             MOVS     R2,#+8
   \   00000150   0xA801             ADD      R0,SP,#+4
   \   00000152   0x.... 0x....      BL       halCommonMemCompare
   \   00000156   0xB140             CBZ.N    R0,??CrossCallReturnLabel_48
    534                emberSerialPrintf(APP_SERIAL, "RX [multicast hello] from: ");
   \   00000158   0x.... 0x....      ADR.W    R1,`?<Constant "RX [multicast hello] ...">`
   \   0000015C   0x.... 0x....      BL       ??Subroutine0_0
    535                printEUI64(APP_SERIAL, &eui);
   \                     ??CrossCallReturnLabel_49:
   \   00000160   0x.... 0x....      BL       ?Subroutine3
    536                emberSerialPrintf(APP_SERIAL, "\r\n");
   \                     ??CrossCallReturnLabel_106:
   \   00000164   0x4651             MOV      R1,R10
   \   00000166   0x.... 0x....      BL       ??Subroutine0_0
    537              }
    538              // store as a JIT (Just in Time) message for children
    539              appAddJitForAllChildren(MSG_MULTICAST_HELLO, eui, EUI64_SIZE);
   \                     ??CrossCallReturnLabel_48:
   \   0000016A   0x2208             MOVS     R2,#+8
   \   0000016C   0xA901             ADD      R1,SP,#+4
   \   0000016E   0x2064             MOVS     R0,#+100
   \   00000170   0x.... 0x....      BL       appAddJitForAllChildren
    540              break;
   \   00000174   0xE008             B.N      ??CrossCallReturnLabel_47
    541          
    542            default:
    543              emberSerialPrintf(APP_SERIAL, "RX [unknown (%2x)] from: ",
    544                                apsFrame->clusterId);
   \                     ??emberIncomingMessageHandler_7:
   \   00000176   0x.... 0x....      ADR.W    R1,`?<Constant "RX [unknown (%2x)] fr...">`
   \   0000017A   0x.... 0x....      BL       ??Subroutine2_0
    545              printEUI64(APP_SERIAL, &eui);
   \                     ??CrossCallReturnLabel_101:
   \   0000017E   0x.... 0x....      BL       ?Subroutine3
    546              emberSerialPrintf(APP_SERIAL, "; ignoring\r\n");
   \                     ??CrossCallReturnLabel_105:
   \   00000182   0x4631             MOV      R1,R6
    547            }
   \                     ??emberIncomingMessageHandler_9:
   \   00000184   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_47:
   \   00000188   0xE8BD 0x87FF      POP      {R0-R10,PC}      ;; return
    548          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x2108             MOVS     R1,#+8
   \   00000004   0x4628             MOV      R0,R5
   \   00000006   0x.... 0x....      B.W      emberGetLinkedBuffersByte

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0xA901             ADD      R1,SP,#+4
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      printEUI64
    549          
    550          // this is called when the stack status changes

   \                                 In section .text, align 2, keep-with-next
    551          void emberStackStatusHandler(EmberStatus status)
    552          {
   \                     emberStackStatusHandler:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    553          
    554            switch (status) {
   \   00000004   0x2890             CMP      R0,#+144
   \   00000006   0xD004             BEQ.N    ??emberStackStatusHandler_0
   \   00000008   0x2891             CMP      R0,#+145
   \   0000000A   0xD032             BEQ.N    ??emberStackStatusHandler_1
   \   0000000C   0x2894             CMP      R0,#+148
   \   0000000E   0xD033             BEQ.N    ??emberStackStatusHandler_2
   \   00000010   0xE037             B.N      ??emberStackStatusHandler_3
    555            case EMBER_NETWORK_UP:
    556              emberSerialPrintf(APP_SERIAL,
    557                    "EVENT: stackStatus now EMBER_NETWORK_UP\r\n");
   \                     ??emberStackStatusHandler_0:
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: stackStatus no...">`
   \   00000016   0x.... 0x....      BL       ??Subroutine0_0
    558          
    559              {
    560                EmberStatus status;
    561                EmberNetworkParameters networkParams;
    562                status = emberGetNetworkParameters(&networkParams);
    563                if (status == EMBER_SUCCESS) {
   \                     ??CrossCallReturnLabel_46:
   \   0000001A   0xA800             ADD      R0,SP,#+0
   \   0000001C   0x.... 0x....      BL       emberGetNetworkParameters
   \   00000020   0xBB20             CBNZ.N   R0,??CrossCallReturnLabel_91
    564                  switch (networkFormMethod) {
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable113_2
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD006             BEQ.N    ??emberStackStatusHandler_4
   \   0000002C   0xD30D             BCC.N    ??emberStackStatusHandler_5
   \   0000002E   0x2803             CMP      R0,#+3
   \   00000030   0xD006             BEQ.N    ??emberStackStatusHandler_6
   \   00000032   0xD20A             BCS.N    ??emberStackStatusHandler_5
    565                  case SINK_USE_NETWORK_INIT:
    566                    emberSerialPrintf(APP_SERIAL,
    567                                      "FORM : network started using network init\r\n");
   \   00000034   0x.... 0x....      ADR.W    R1,`?<Constant "FORM : network starte...">`
   \   00000038   0xE004             B.N      ??emberStackStatusHandler_7
    568                    break;
    569                  case SINK_FORM_NEW_NETWORK:
    570                    emberSerialPrintf(APP_SERIAL,
    571                                      "FORM : new network formed\r\n");
   \                     ??emberStackStatusHandler_4:
   \   0000003A   0x.... 0x....      ADR.W    R1,`?<Constant "FORM : new network fo...">`
   \   0000003E   0xE002             B.N      ??emberStackStatusHandler_8
    572                    break;
    573                  case SINK_USE_SCAN_UTILS:
    574                    emberSerialPrintf(APP_SERIAL,
    575                                      "FORM : new network formed by scanning\r\n");
   \                     ??emberStackStatusHandler_6:
   \   00000040   0x.... 0x....      ADR.W    R1,`?<Constant "FORM : new network fo...">_1`
   \                     ??emberStackStatusHandler_7:
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??emberStackStatusHandler_8:
   \   00000046   0x.... 0x....      BL       emberSerialPrintf
    576                    break;
    577                  }
    578                  emberSerialPrintf(APP_SERIAL,
    579                       "     : channel 0x%x, panid 0x%2x, ",
    580                       networkParams.radioChannel, networkParams.panId);
   \                     ??emberStackStatusHandler_5:
   \   0000004A   0xF8BD 0x3008      LDRH     R3,[SP, #+8]
   \   0000004E   0xF89D 0x200B      LDRB     R2,[SP, #+11]
   \   00000052   0x.... 0x....      ADR.W    R1,`?<Constant "     : channel 0x%x, ...">`
   \   00000056   0x.... 0x....      BL       ?Subroutine5
    581                  printExtendedPanId(APP_SERIAL, networkParams.extendedPanId);
   \                     ??CrossCallReturnLabel_117:
   \   0000005A   0xA900             ADD      R1,SP,#+0
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x.... 0x....      BL       printExtendedPanId
    582                  emberSerialPrintf(APP_SERIAL, "\r\n");
   \   00000062   0x....             ADR.N    R1,??DataTable105  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000064   0x.... 0x....      BL       ??Subroutine0_0
    583                  emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_45:
   \   00000068   0x.... 0x....      BL       ?Subroutine1
    584                }
    585              }
    586          
    587          
    588              // Add the multicast group to the multicast table - this is done
    589              // after the stack comes up
    590              addMulticastGroup();
   \                     ??CrossCallReturnLabel_91:
   \   0000006C   0x.... 0x....      BL       addMulticastGroup
    591              break;
   \   00000070   0xE00C             B.N      ??CrossCallReturnLabel_100
    592          
    593            case EMBER_NETWORK_DOWN:
    594              emberSerialPrintf(APP_SERIAL,
    595                    "EVENT: stackStatus now EMBER_NETWORK_DOWN\r\n");
   \                     ??emberStackStatusHandler_1:
   \   00000072   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: stackStatus no...">_1`
   \   00000076   0xE001             B.N      ??emberStackStatusHandler_9
    596              break;
    597          
    598            case EMBER_JOIN_FAILED:
    599              emberSerialPrintf(APP_SERIAL,
    600                     "EVENT: stackStatus now EMBER_JOIN_FAILED\r\n");
   \                     ??emberStackStatusHandler_2:
   \   00000078   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: stackStatus no...">_2`
   \                     ??emberStackStatusHandler_9:
   \   0000007C   0x.... 0x....      BL       ??Subroutine0_0
    601              break;
   \                     ??CrossCallReturnLabel_44:
   \   00000080   0xE004             B.N      ??CrossCallReturnLabel_100
    602          
    603            default:
    604              emberSerialPrintf(APP_SERIAL, "EVENT: stackStatus now 0x%x\r\n", status);
   \                     ??emberStackStatusHandler_3:
   \   00000082   0x4602             MOV      R2,R0
   \   00000084   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: stackStatus no...">_3`
   \   00000088   0x.... 0x....      BL       ??Subroutine2_0
    605            }
    606          }
   \                     ??CrossCallReturnLabel_100:
   \   0000008C   0xB007             ADD      SP,SP,#+28
   \   0000008E   0xBD00             POP      {PC}             ;; return
    607          
    608          
    609          // ******************************************************************
    610          // the following two functions are redefined in the form-and-join utilities
    611          
    612          // this is called when a scan is complete
    613          //void emberScanCompleteHandler( int8u channel, EmberStatus status )
    614          //{}
    615          
    616          // this is called when a network is found when app is performing scan
    617          //void emberNetworkFoundHandler(int8u channel,
    618          //                              int16u panId,
    619          //                              int8u *extendedPanId,
    620          //                              boolean expectingJoin,
    621          //                              int8u stackProfile)
    622          //{}
    623          // ******************************************************************
    624          

   \                                 In section .text, align 2, keep-with-next
    625          void emberScanErrorHandler(EmberStatus status)
    626          {
    627            emberSerialGuaranteedPrintf(APP_SERIAL,
    628              "EVENT: could not find an available channel and panid - status: 0x%x\r\n",
    629              status);
   \                     emberScanErrorHandler:
   \   00000000   0x4602             MOV      R2,R0
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: could not find...">`
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      B.W      emberSerialGuaranteedPrintf
    630          }
    631          

   \                                 In section .text, align 2, keep-with-next
    632          void emberUnusedPanIdFoundHandler(EmberPanId panId, int8u channel)
    633          {
   \                     emberUnusedPanIdFoundHandler:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460C             MOV      R4,R1
    634            EmberNetworkParameters parameters;
    635            int8u extendedPanId[8] = APP_EXTENDED_PANID;
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x.... 0x....      ADR.W    R1,`?<Constant {115, 101, 110, 115, 111, 114, 0, 0_1`
   \   0000000E   0xC90C             LDM      R1!,{R2,R3}
   \   00000010   0xC00C             STM      R0!,{R2,R3}
    636            MEMCOPY(parameters.extendedPanId,
    637                    extendedPanId,
    638                    EXTENDED_PAN_ID_SIZE);
   \   00000012   0x2208             MOVS     R2,#+8
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x.... 0x....      BL       halCommonMemCopy
    639            parameters.panId = panId;
   \   0000001A   0xF8AD 0x5010      STRH     R5,[SP, #+16]
    640            parameters.radioTxPower = APP_POWER;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0xF88D 0x0012      STRB     R0,[SP, #+18]
    641            parameters.radioChannel = channel;
   \   00000024   0xF88D 0x4013      STRB     R4,[SP, #+19]
    642            emberFormNetwork(&parameters);
   \   00000028   0xA802             ADD      R0,SP,#+8
   \   0000002A   0x.... 0x....      BL       emberFormNetwork
    643          }
   \   0000002E   0xB009             ADD      SP,SP,#+36
   \   00000030   0xBD30             POP      {R4,R5,PC}       ;; return
    644          

   \                                 In section .text, align 2, keep-with-next
    645          void emberJoinableNetworkFoundHandler(EmberZigbeeNetwork *networkFound,
    646                                                int8u lqi,
    647                                                int8s rssi)
    648          {
    649          }
   \                     emberJoinableNetworkFoundHandler:
   \   00000000   0x4770             BX       LR               ;; return
    650          
    651          // end Ember callback handlers
    652          // *******************************************************************
    653          
    654          
    655          // *******************************************************************
    656          // Functions that use EmberNet
    657          
    658          // applicationTick - called to check application timeouts, button events,
    659          // and periodically flash LEDs

   \                                 In section .text, align 2, keep-with-next
    660          static void applicationTick(void) {
   \                     applicationTick:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    661            static int16u lastBlinkTime = 0;
    662            int16u time;
    663            int8u i;
    664            EmberStatus status = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    665          
    666            #if EMBER_SECURITY_LEVEL == 5
    667              static int16u permitJoinsTimer; // quarter second timer
    668            #endif // EMBER_SECURITY_LEVEL == 5
    669          
    670            // set the join timeout to 60 seconds
    671            // this is used as the value passed to emberPermitJoining. It is also
    672            // used to determine when to turn off joining at the trust center
    673            int16u joinTimeout = 60;
    674          
    675            #ifdef USE_BOOTLOADER_LIB
    676              bootloadUtilTick();
   \   00000006   0x.... 0x....      BL       bootloadUtilTick
    677            #endif // USE_BOOTLOADER_LIB
    678          
    679            time = halCommonGetInt16uMillisecondTick();
   \   0000000A   0x.... 0x....      BL       halCommonGetInt16uMillisecondTick
    680          
    681            // Application timers are based on quarter second intervals, where each
    682            // quarter second is equal to TICKS_PER_QUARTER_SECOND millisecond ticks.
    683            // Only service the timers (decrement and check if they are 0) after each
    684            // quarter second. TICKS_PER_QUARTER_SECOND is defined in
    685            // app/sensor/common.h.
    686            if ( (int16u)(time - lastBlinkTime) > TICKS_PER_QUARTER_SECOND ) {
   \   0000000E   0x.... 0x....      LDR.W    R5,??DataTable113_5
   \   00000012   0x8929             LDRH     R1,[R5, #+8]
   \   00000014   0x1A41             SUBS     R1,R0,R1
   \   00000016   0xB289             UXTH     R1,R1
   \   00000018   0x29FB             CMP      R1,#+251
   \   0000001A   0xD37D             BCC.N    ??applicationTick_0
    687              lastBlinkTime = time;
   \   0000001C   0x8128             STRH     R0,[R5, #+8]
    688          
    689              // **************************************
    690              // there are some events we only do when we are joined to the network
    691              // **************************************
    692              if (emberNetworkState() == EMBER_JOINED_NETWORK)
   \   0000001E   0xF64F 0x7AFF      MOVW     R10,#+65535
   \   00000022   0x.... 0x....      BL       emberNetworkState
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xD139             BNE.N    ??CrossCallReturnLabel_104
    693              {
    694          #ifndef NO_LED
    695                // *******************
    696                // blink the LEDs
    697                // *******************
    698                halToggleLed(BOARDLED3);
   \   0000002A   0x2015             MOVS     R0,#+21
   \   0000002C   0x.... 0x....      BL       halToggleLed
    699                halToggleLed(BOARDLED2);
   \   00000030   0x2015             MOVS     R0,#+21
   \   00000032   0x.... 0x....      BL       halToggleLed
    700          #endif//NO_LED
    701          
    702          #if EMBER_SECURITY_LEVEL == 5
    703                // *******************
    704                // Increment our timer for joining.  Turn off joining at the trust
    705                // center when it has reached the join timeout.
    706                // *******************
    707                if ( trustCenterIsPermittingJoins() ) {
   \   00000036   0x.... 0x....      BL       trustCenterIsPermittingJoins
   \   0000003A   0xB148             CBZ.N    R0,??applicationTick_1
    708                  permitJoinsTimer++;
   \   0000003C   0x8968             LDRH     R0,[R5, #+10]
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0x8168             STRH     R0,[R5, #+10]
    709          
    710                  // permitJoinsTimer is in quarter-seconds, joinTimeout is in seconds
    711                  if ( permitJoinsTimer > (joinTimeout * 4)) {
   \   00000042   0xB280             UXTH     R0,R0
   \   00000044   0x28F1             CMP      R0,#+241
   \   00000046   0xD303             BCC.N    ??applicationTick_1
    712                    trustCenterPermitJoins(FALSE);
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       trustCenterPermitJoins
    713                    permitJoinsTimer = 0;
   \   0000004E   0x816C             STRH     R4,[R5, #+10]
    714                  }
    715                }
    716          #endif
    717          
    718                // ******************************************
    719                // see if it is time to advertise
    720                // ******************************************
    721                timeBeforeSinkAdvertise = timeBeforeSinkAdvertise - 1;
   \                     ??applicationTick_1:
   \   00000050   0x88E8             LDRH     R0,[R5, #+6]
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \   00000054   0x80E8             STRH     R0,[R5, #+6]
    722          
    723                // at 0.5 seconds to go, send the "many-to-one" route request
    724                if (timeBeforeSinkAdvertise == 2) {
   \   00000056   0xB280             UXTH     R0,R0
   \   00000058   0x2802             CMP      R0,#+2
   \   0000005A   0xD109             BNE.N    ??CrossCallReturnLabel_99
    725                  status = emberSendManyToOneRouteRequest(concentratorType,
    726                                                          10);        // radius
   \   0000005C   0x210A             MOVS     R1,#+10
   \   0000005E   0x88A8             LDRH     R0,[R5, #+4]
   \   00000060   0x.... 0x....      BL       emberSendManyToOneRouteRequest
   \   00000064   0x4604             MOV      R4,R0
    727                  emberSerialPrintf(APP_SERIAL,
    728                                    "EVENT: sink send many-to-one route request,"
    729                                    " status 0x%x\r\n", status);
   \   00000066   0x4622             MOV      R2,R4
   \   00000068   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: sink send many...">`
   \   0000006C   0x.... 0x....      BL       ??Subroutine2_0
    730                }
    731          
    732                // do the sink advertise (multicast)
    733                if (timeBeforeSinkAdvertise == 0) {
   \                     ??CrossCallReturnLabel_99:
   \   00000070   0x88E8             LDRH     R0,[R5, #+6]
   \   00000072   0xB938             CBNZ.N   R0,??applicationTick_2
    734                  emberSerialPrintf(APP_SERIAL,
    735                      "EVENT: sink automatically advertising to find sensors\r\n");
   \   00000074   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: sink automatic...">`
   \   00000078   0x.... 0x....      BL       ??Subroutine0_0
    736                  sinkAdvertise();
   \                     ??CrossCallReturnLabel_43:
   \   0000007C   0x.... 0x....      BL       sinkAdvertise
    737                  timeBeforeSinkAdvertise = TIME_BEFORE_SINK_ADVERTISE;
   \   00000080   0x20F0             MOVS     R0,#+240
   \   00000082   0x80E8             STRH     R0,[R5, #+6]
    738                }
    739          
    740                // ******************************************
    741                // see if it is time to change the network key
    742                // ******************************************
    743                if (sendNetworkKeyUpdateTimer > 0) {
   \                     ??applicationTick_2:
   \   00000084   0x78A8             LDRB     R0,[R5, #+2]
   \   00000086   0xB150             CBZ.N    R0,??CrossCallReturnLabel_104
    744                  sendNetworkKeyUpdateTimer--;
   \   00000088   0x1E40             SUBS     R0,R0,#+1
   \   0000008A   0x70A8             STRB     R0,[R5, #+2]
    745                  if (sendNetworkKeyUpdateTimer == 0) {
   \   0000008C   0xB2C0             UXTB     R0,R0
   \   0000008E   0xB930             CBNZ.N   R0,??CrossCallReturnLabel_104
    746                    status = emberBroadcastNetworkKeySwitch();
   \   00000090   0x4650             MOV      R0,R10
   \   00000092   0x.... 0x....      BL       emSendNetworkKeySwitch
   \   00000096   0x4604             MOV      R4,R0
    747                    emberSerialPrintf(APP_SERIAL,
    748                         "keyswitch: sending switch network key command, status %x\r\n",
    749                                      status);
   \   00000098   0x4622             MOV      R2,R4
   \   0000009A   0x.... 0x....      BL       ?Subroutine2
    750                  }
    751                }
    752          
    753              }
    754              // ***************************
    755              // the next set of events are done even if the device is not part of
    756              // a network
    757              // ***************************
    758          
    759          
    760              // ***************************
    761              // check for address table entries that are no longer
    762              // active (no data messages from them)
    763              // ***************************
    764          
    765              // increment the counters for invalidating entries in the address table
    766              for (i=0; i<SINK_ADDRESS_TABLE_SIZE; i++) {
   \                     ??CrossCallReturnLabel_104:
   \   0000009E   0x2700             MOVS     R7,#+0
   \   000000A0   0x.... 0x....      ADR.W    R8,`?<Constant "deleting address tabl...">`
   \   000000A4   0x.... 0x....      ADR.W    R9,`?<Constant "EVENT: too long since...">`
    767                if (ticksSinceLastHeard[i] != 0xFFFF) {
   \                     ??applicationTick_3:
   \   000000A8   0xEB05 0x0647      ADD      R6,R5,R7, LSL #+1
   \   000000AC   0x89B0             LDRH     R0,[R6, #+12]
   \   000000AE   0x4550             CMP      R0,R10
   \   000000B0   0xD011             BEQ.N    ??applicationTick_4
    768                  if (++ticksSinceLastHeard[i] >
    769                      (MISS_PACKET_TOLERANCE * SEND_DATA_RATE)) {
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \   000000B4   0x81B0             STRH     R0,[R6, #+12]
   \   000000B6   0xB280             UXTH     R0,R0
   \   000000B8   0x28F1             CMP      R0,#+241
   \   000000BA   0xD30C             BCC.N    ??applicationTick_4
    770                    emberSetAddressTableRemoteNodeId(i, EMBER_TABLE_ENTRY_UNUSED_NODE_ID);
   \   000000BC   0x4651             MOV      R1,R10
   \   000000BE   0xB2F8             UXTB     R0,R7
   \   000000C0   0x.... 0x....      BL       emberSetAddressTableRemoteNodeId
    771                    emberSerialPrintf(APP_SERIAL,
    772                        "EVENT: too long since last heard, ");
   \   000000C4   0x.... 0x....      BL       ?Subroutine0
    773                    emberSerialPrintf(APP_SERIAL,
    774                        "deleting address table index %x, status %x\r\n", i, status);
   \                     ??CrossCallReturnLabel_61:
   \   000000C8   0x4623             MOV      R3,R4
   \   000000CA   0x463A             MOV      R2,R7
   \   000000CC   0x4641             MOV      R1,R8
   \   000000CE   0x.... 0x....      BL       ?Subroutine5
    775                    ticksSinceLastHeard[i] = 0xFFFF;
   \                     ??CrossCallReturnLabel_116:
   \   000000D2   0xF8A6 0xA00C      STRH     R10,[R6, #+12]
    776                  }
    777                }
    778              }
   \                     ??applicationTick_4:
   \   000000D6   0x1C7F             ADDS     R7,R7,#+1
   \   000000D8   0x2F0F             CMP      R7,#+15
   \   000000DA   0xDBE5             BLT.N    ??applicationTick_3
    779          
    780              // ***************************
    781              // check for button events
    782              // ***************************
    783          
    784              // **** check for BUTTON0 press
    785              if (buttonZeroPress) {
   \   000000DC   0x7828             LDRB     R0,[R5, #+0]
   \   000000DE   0xB168             CBZ.N    R0,??applicationTick_5
    786                buttonZeroPress = FALSE;
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x7028             STRB     R0,[R5, #+0]
    787                emberSerialPrintf(APP_SERIAL, "BUTTON0: turn permit join ON for 60 seconds\r\n");
   \   000000E4   0x.... 0x....      ADR.W    R1,`?<Constant "BUTTON0: turn permit ...">`
   \   000000E8   0x.... 0x....      BL       ??Subroutine0_0
    788          
    789                // turn allow join on
    790                emberPermitJoining(joinTimeout);
   \                     ??CrossCallReturnLabel_42:
   \   000000EC   0x203C             MOVS     R0,#+60
   \   000000EE   0x.... 0x....      BL       emberPermitJoining
    791          #if EMBER_SECURITY_LEVEL == 5
    792                trustCenterPermitJoins(TRUE);
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0x.... 0x....      BL       trustCenterPermitJoins
    793                permitJoinsTimer = 0;
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x8168             STRH     R0,[R5, #+10]
    794          #endif // EMBER_SECURITY_LEVEL == 5
    795              }
    796          
    797              // **** check for BUTTON1 press
    798              if (buttonOnePress) {
   \                     ??applicationTick_5:
   \   000000FC   0x7868             LDRB     R0,[R5, #+1]
   \   000000FE   0xB158             CBZ.N    R0,??applicationTick_0
    799                buttonOnePress = FALSE;
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x7068             STRB     R0,[R5, #+1]
    800                emberSerialPrintf(APP_SERIAL, "BUTTON1: leave network status 0x%x\r\n",
    801                                  emberLeaveNetwork());
   \   00000104   0x.... 0x....      BL       emberLeaveNetwork
   \   00000108   0x4602             MOV      R2,R0
   \   0000010A   0x.... 0x....      ADR.W    R1,`?<Constant "BUTTON1: leave networ...">`
   \   0000010E   0x2001             MOVS     R0,#+1
   \   00000110   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   00000114   0x.... 0x....      B.W      emberSerialPrintf
    802              }
    803            }
    804          }
   \                     ??applicationTick_0:
   \   00000118   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .data, align 4
   \                     buttonZeroPress:
   \   00000000   0x00               DC8 0
   \                     buttonOnePress:
   \   00000001   0x00               DC8 0
   \                     sendNetworkKeyUpdateTimer:
   \   00000002   0x00               DC8 0
   \   00000003   0x00               DC8 0
   \                     concentratorType:
   \   00000004   0xFFF8             DC16 65528
   \                     timeBeforeSinkAdvertise:
   \   00000006   0x00F0             DC16 240
   \   00000008   0x0000             DC16 0
   \   0000000A   0x00 0x00          DC8 0, 0
   \                     ticksSinceLastHeard:
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000001C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     globalBuffer:
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000006C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000007C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 1
   \                     emberEndpointCount:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 4
   \                     emberEndpoints:
   \   00000000   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 endpointDescription
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 1
   \                     networkFormMethod:
   \   00000000   0x01               DC8 1
    805          
    806          // add the multicast group

   \                                 In section .text, align 2, keep-with-next
    807          void addMulticastGroup(void) {
    808            EmberMulticastTableEntry *entry = &emberMulticastTable[MULTICAST_TABLE_INDEX];
   \                     addMulticastGroup:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable113_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
    809            entry->multicastId = MULTICAST_ID;
   \   00000006   0xF241 0x1111      MOVW     R1,#+4369
   \   0000000A   0x8001             STRH     R1,[R0, #+0]
    810            entry->endpoint = ENDPOINT;
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7081             STRB     R1,[R0, #+2]
    811            emberSerialPrintf(APP_SERIAL,
    812                     "EVENT: setting multicast table entry\r\n");
   \   00000010   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: setting multic...">`
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      B.W      emberSerialPrintf
    813          }
    814          
    815          // sendMulticastHello

   \                                 In section .text, align 2, keep-with-next
    816          void sendMulticastHello(void) {
   \                     sendMulticastHello:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    817            EmberStatus status;
    818            EmberApsFrame apsFrame;
    819            int8u data[HELLO_MSG_SIZE] = {'h','e','l','l','o'};
   \   00000004   0xA803             ADD      R0,SP,#+12
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant {104, 101, 108, 108, 111}>`
   \   0000000A   0xC90C             LDM      R1!,{R2,R3}
   \   0000000C   0xC00C             STM      R0!,{R2,R3}
    820            EmberMessageBuffer buffer = 0;
    821          
    822            // the data - my long address and the string "hello"
    823            MEMCOPY(&(globalBuffer[0]), emberGetEui64(), EUI64_SIZE);
   \   0000000E   0x.... 0x....      BL       ?Subroutine6
    824            MEMCOPY(&(globalBuffer[EUI64_SIZE]), data, HELLO_MSG_SIZE);
   \                     ??CrossCallReturnLabel_121:
   \   00000012   0x2205             MOVS     R2,#+5
   \   00000014   0xA903             ADD      R1,SP,#+12
   \   00000016   0xF104 0x0034      ADD      R0,R4,#+52
   \   0000001A   0x.... 0x....      BL       halCommonMemCopy
    825          
    826            // copy the data into a packet buffer
    827            buffer = emberFillLinkedBuffers((int8u*) globalBuffer,
    828                                            EUI64_SIZE + HELLO_MSG_SIZE);
   \   0000001E   0x210D             MOVS     R1,#+13
   \   00000020   0xF104 0x002C      ADD      R0,R4,#+44
   \   00000024   0x.... 0x....      BL       emberFillLinkedBuffers
   \   00000028   0x4604             MOV      R4,R0
    829          
    830            // check to make sure a buffer is available
    831            if (buffer == EMBER_NULL_MESSAGE_BUFFER) {
   \   0000002A   0x2CFF             CMP      R4,#+255
   \   0000002C   0xD104             BNE.N    ??sendMulticastHello_0
    832              emberSerialPrintf(APP_SERIAL,
    833                  "TX ERROR [multicast hello], OUT OF BUFFERS\r\n");
   \   0000002E   0x.... 0x....      ADR.W    R1,`?<Constant "TX ERROR [multicast h...">`
   \   00000032   0x.... 0x....      BL       ??Subroutine0_0
    834              return;
   \                     ??CrossCallReturnLabel_41:
   \   00000036   0xE012             B.N      ??CrossCallReturnLabel_98
    835            }
    836          
    837            // all of the defined values below are from app/sensor/common.h
    838            // with the exception of EMBER_APS_OPTION_NONE from stack/include/ember.h
    839            apsFrame.profileId = PROFILE_ID;          // profile unique to this app
   \                     ??sendMulticastHello_0:
   \   00000038   0xF24C 0x000F      MOVW     R0,#+49167
   \   0000003C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    840            apsFrame.clusterId = MSG_MULTICAST_HELLO; // message type
   \   00000040   0x2064             MOVS     R0,#+100
   \   00000042   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    841            apsFrame.sourceEndpoint = ENDPOINT;       // sensor endpoint
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      BL       ?Subroutine7
    842            apsFrame.destinationEndpoint = ENDPOINT;  // sensor endpoint
    843            apsFrame.options = EMBER_APS_OPTION_NONE; // none for multicast
    844            apsFrame.groupId = MULTICAST_ID;          // multicast ID unique to this app
    845            apsFrame.sequence = 0;                    // use seq of 0
    846          
    847            // send the message
    848            status = emberSendMulticast(&apsFrame, // multicast ID & cluster
    849                                        10,        // radius
    850                                        6,         // non-member radius
    851                                        buffer);   // message to send
   \                     ??CrossCallReturnLabel_123:
   \   0000004C   0x4605             MOV      R5,R0
    852          
    853            // done with the packet buffer
    854            emberReleaseMessageBuffer(buffer);
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       emReleaseMessageBuffer
    855          
    856            emberSerialPrintf(APP_SERIAL,
    857                 "TX [multicast hello], status 0x%x\r\n", status);
   \   00000054   0x462A             MOV      R2,R5
   \   00000056   0x.... 0x....      ADR.W    R1,`?<Constant "TX [multicast hello],...">`
   \   0000005A   0x.... 0x....      BL       ??Subroutine2_0
    858          }
   \                     ??CrossCallReturnLabel_98:
   \   0000005E   0xB005             ADD      SP,SP,#+20
   \   00000060   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000004   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \   0000000E   0xF241 0x1011      MOVW     R0,#+4369
   \   00000012   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   0000001C   0x4623             MOV      R3,R4
   \   0000001E   0x2206             MOVS     R2,#+6
   \   00000020   0x210A             MOVS     R1,#+10
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0x.... 0x....      B.W      emberSendMulticast

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x.... 0x....      LDR.W    R4,??DataTable113_5
   \   00000004   0x2208             MOVS     R2,#+8
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable113_1
   \   0000000A   0xF104 0x002C      ADD      R0,R4,#+44
   \   0000000E   0x.... 0x....      B.W      halCommonMemCopy
    859          
    860          // sinkAdvertise

   \                                 In section .text, align 2, keep-with-next
    861          void sinkAdvertise(void) {
   \                     sinkAdvertise:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
    862            EmberStatus status;
    863            EmberMessageBuffer buffer = 0;
    864            EmberApsFrame apsFrame;
    865          
    866            // the data - sink long address (EUI), sink short address
    867            MEMCOPY(&(globalBuffer[0]), emberGetEui64(), EUI64_SIZE);
   \   00000002   0x.... 0x....      BL       ?Subroutine6
    868            emberStoreLowHighInt16u(&(globalBuffer[EUI64_SIZE]), emberGetNodeId());
   \                     ??CrossCallReturnLabel_120:
   \   00000006   0x.... 0x....      BL       emberGetNodeId
   \   0000000A   0x4601             MOV      R1,R0
   \   0000000C   0xF104 0x0034      ADD      R0,R4,#+52
   \   00000010   0x.... 0x....      BL       emberStoreLowHighInt16u
    869          
    870            // copy the data into a packet buffer
    871            buffer = emberFillLinkedBuffers((int8u*) globalBuffer, EUI64_SIZE + 2);
   \   00000014   0x210A             MOVS     R1,#+10
   \   00000016   0xF104 0x002C      ADD      R0,R4,#+44
   \   0000001A   0x.... 0x....      BL       emberFillLinkedBuffers
   \   0000001E   0x4604             MOV      R4,R0
    872          
    873            // check to make sure a buffer is available
    874            if (buffer == EMBER_NULL_MESSAGE_BUFFER) {
   \   00000020   0x2CFF             CMP      R4,#+255
   \   00000022   0xD104             BNE.N    ??sinkAdvertise_0
    875              emberSerialPrintf(APP_SERIAL,
    876                                "TX ERROR [sink advertise], OUT OF BUFFERS\r\n");
   \   00000024   0x.... 0x....      ADR.W    R1,`?<Constant "TX ERROR [sink advert...">`
   \   00000028   0x.... 0x....      BL       ??Subroutine0_0
    877              return;
   \                     ??CrossCallReturnLabel_40:
   \   0000002C   0xBD37             POP      {R0-R2,R4,R5,PC}
    878            }
    879          
    880            // all of the defined values below are from app/sensor/common.h
    881            // with the exception of EMBER_APS_OPTION_NONE from stack/include/ember.h
    882            apsFrame.profileId = PROFILE_ID;          // profile unique to this app
   \                     ??sinkAdvertise_0:
   \   0000002E   0xF24C 0x000F      MOVW     R0,#+49167
   \   00000032   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    883            apsFrame.clusterId = MSG_SINK_ADVERTISE; // message type
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    884            apsFrame.sourceEndpoint = ENDPOINT;       // sensor endpoint
   \   0000003C   0x.... 0x....      BL       ?Subroutine7
    885            apsFrame.destinationEndpoint = ENDPOINT;  // sensor endpoint
    886            apsFrame.options = EMBER_APS_OPTION_NONE; // none for multicast
    887            apsFrame.groupId = MULTICAST_ID;          // multicast ID unique to this app
    888            apsFrame.sequence = 0;                    // use seq of 0
    889          
    890            // send the message
    891            status = emberSendMulticast(&apsFrame, // multicast ID & cluster
    892                                        10,        // radius
    893                                        6,         // non-member radius
    894                                        buffer);   // message to send
   \                     ??CrossCallReturnLabel_122:
   \   00000040   0x4605             MOV      R5,R0
    895          
    896            // done with the packet buffer
    897            emberReleaseMessageBuffer(buffer);
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       emReleaseMessageBuffer
    898          
    899            emberSerialPrintf(APP_SERIAL,
    900                 "TX [sink advertise], status 0x%x\r\n", status);
   \   00000048   0x462A             MOV      R2,R5
   \   0000004A   0x.... 0x....      ADR.W    R1,`?<Constant "TX [sink advertise], ...">`
   \   0000004E   0x.... 0x....      BL       ??Subroutine2_0
    901          }
   \                     ??CrossCallReturnLabel_97:
   \   00000052   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    902          
    903          
    904          // this handles the message from the sensor to the sink to select the
    905          // sink as a destination for the data generated by the sensor
    906          // NOTE: be sure to only call call-back safe EmberNet
    907          // functions, since this is called from inside
    908          // emberIncomingMessageHandler()!

   \                                 In section .text, align 2, keep-with-next
    909          void handleSensorSelectSink(EmberEUI64 eui,
    910                                      EmberNodeId sender) {
   \                     handleSensorSelectSink:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4606             MOV      R6,R0
   \   00000004   0x460F             MOV      R7,R1
    911            int8u addressTableIndex;
    912            EmberMessageBuffer buffer;
    913            EmberStatus status = 0;
   \   00000006   0x2400             MOVS     R4,#+0
    914          
    915            // check for a duplicate message, if duplicate then
    916            // we've already added the sender's addresses to the
    917            // address table so just skip over that logic.  We
    918            // still need to do the sendReply because the sender
    919            // never received to previous reply.
    920            // unicast messages do not guarantee no duplicates
    921            // because of this, the node must check to make sure it
    922            // hasn't already received this message.
    923            addressTableIndex = findAddressTableLocation(eui);
   \   00000008   0x.... 0x....      BL       findAddressTableLocation
   \   0000000C   0x4605             MOV      R5,R0
    924            if (addressTableIndex != EMBER_NULL_ADDRESS_TABLE_INDEX) {
   \   0000000E   0x2DFF             CMP      R5,#+255
   \   00000010   0xD009             BEQ.N    ??handleSensorSelectSink_0
    925              emberSerialPrintf(APP_SERIAL,
    926                                "receive duplicate message from ");
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "receive duplicate mes...">`
   \   00000016   0x.... 0x....      BL       ??Subroutine0_0
    927              printEUI64(APP_SERIAL, (EmberEUI64 *)eui);
   \                     ??CrossCallReturnLabel_39:
   \   0000001A   0x.... 0x....      BL       ?Subroutine4
    928              emberSerialPrintf(APP_SERIAL, "\r\n");
   \                     ??CrossCallReturnLabel_115:
   \   0000001E   0x....             ADR.N    R1,??DataTable112  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000020   0x.... 0x....      BL       ??Subroutine0_0
    929            } else {
   \                     ??CrossCallReturnLabel_38:
   \   00000024   0xE024             B.N      ??CrossCallReturnLabel_90
    930              // find a free address table location to put this address
    931              addressTableIndex = findFreeAddressTableLocation();
   \                     ??handleSensorSelectSink_0:
   \   00000026   0x.... 0x....      BL       findFreeAddressTableLocation
   \   0000002A   0x4605             MOV      R5,R0
    932              if (addressTableIndex == EMBER_NULL_ADDRESS_TABLE_INDEX) {
   \   0000002C   0x2DFF             CMP      R5,#+255
   \   0000002E   0xD106             BNE.N    ??handleSensorSelectSink_1
    933                emberSerialPrintf(APP_SERIAL,
    934                                  "WARNING: no more free address table entries\r\n");
   \   00000030   0x.... 0x....      ADR.W    R1,`?<Constant "WARNING: no more free...">`
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   0000003A   0x.... 0x....      B.W      emberSerialPrintf
    935                return;
    936              }
    937          
    938              // add an address table entry
    939              status = emberSetAddressTableRemoteEui64(addressTableIndex, eui);
   \                     ??handleSensorSelectSink_1:
   \   0000003E   0x4631             MOV      R1,R6
   \   00000040   0x.... 0x....      BL       emberSetAddressTableRemoteEui64
   \   00000044   0x0004             MOVS     R4,R0
    940              if (status != EMBER_SUCCESS) {
   \   00000046   0xD003             BEQ.N    ??handleSensorSelectSink_2
    941                emberSerialPrintf(APP_SERIAL,
    942                                  "TX ERROR [sink ready], set remote EUI64 failure,"
    943                                  " status 0x%x\r\n",
    944                                  status);
   \   00000048   0x4622             MOV      R2,R4
   \   0000004A   0x.... 0x....      ADR.W    R1,`?<Constant "TX ERROR [sink ready]...">`
   \   0000004E   0xE040             B.N      ??handleSensorSelectSink_3
    945                return;
    946              }
    947              emberSetAddressTableRemoteNodeId(addressTableIndex, sender);
   \                     ??handleSensorSelectSink_2:
   \   00000050   0x4639             MOV      R1,R7
   \   00000052   0x4628             MOV      R0,R5
   \   00000054   0x.... 0x....      BL       emberSetAddressTableRemoteNodeId
    948          
    949              emberSerialPrintf(APP_SERIAL,
    950                                "EVENT: sink set address table entry %x to node [",
    951                                addressTableIndex );
   \   00000058   0x462A             MOV      R2,R5
   \   0000005A   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: sink set addre...">`
   \   0000005E   0x.... 0x....      BL       ??Subroutine2_0
    952              printEUI64(APP_SERIAL, (EmberEUI64 *)eui);
   \                     ??CrossCallReturnLabel_96:
   \   00000062   0x.... 0x....      BL       ?Subroutine4
    953              emberSerialPrintf(APP_SERIAL, "]\r\n");
   \                     ??CrossCallReturnLabel_114:
   \   00000066   0x....             ADR.N    R1,??DataTable112_1  ;; "]\r\n"
   \   00000068   0x.... 0x....      BL       ??Subroutine0_0
    954              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_37:
   \   0000006C   0x.... 0x....      BL       ?Subroutine1
    955            }
    956          
    957            ticksSinceLastHeard[addressTableIndex] = 0;
   \                     ??CrossCallReturnLabel_90:
   \   00000070   0x....             LDR.N    R7,??DataTable113_5
   \   00000072   0xEB07 0x0045      ADD      R0,R7,R5, LSL #+1
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x8181             STRH     R1,[R0, #+12]
    958          
    959            // send a message indicating success
    960            MEMCOPY(&(globalBuffer[0]), emberGetEui64(), EUI64_SIZE);
   \   0000007A   0x2208             MOVS     R2,#+8
   \   0000007C   0x....             LDR.N    R1,??DataTable113_1
   \   0000007E   0xF107 0x002C      ADD      R0,R7,#+44
   \   00000082   0x.... 0x....      BL       halCommonMemCopy
    961          
    962            // copy the data into a packet buffer
    963            buffer = emberFillLinkedBuffers((int8u*)globalBuffer, EUI64_SIZE);
   \   00000086   0x2108             MOVS     R1,#+8
   \   00000088   0xF107 0x002C      ADD      R0,R7,#+44
   \   0000008C   0x.... 0x....      BL       emberFillLinkedBuffers
   \   00000090   0x4607             MOV      R7,R0
    964          
    965            // check to make sure a buffer is available
    966            if (buffer == EMBER_NULL_MESSAGE_BUFFER) {
   \   00000092   0x2FFF             CMP      R7,#+255
   \   00000094   0xD112             BNE.N    ??handleSensorSelectSink_4
    967              emberSerialPrintf(APP_SERIAL,
    968                                "TX ERROR [sink ready], OUT OF BUFFERS\r\n");
   \   00000096   0x.... 0x....      ADR.W    R1,`?<Constant "TX ERROR [sink ready]...">_1`
   \   0000009A   0x.... 0x....      BL       ??Subroutine0_0
    969              emberSetAddressTableRemoteNodeId(addressTableIndex,
    970                                               EMBER_TABLE_ENTRY_UNUSED_NODE_ID);
   \                     ??CrossCallReturnLabel_36:
   \   0000009E   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000A2   0x4628             MOV      R0,R5
   \   000000A4   0x.... 0x....      BL       emberSetAddressTableRemoteNodeId
    971              emberSerialPrintf(APP_SERIAL,
    972                                "deleting address table index %x, status %x\r\n",
    973                                addressTableIndex, status);
   \   000000A8   0x4623             MOV      R3,R4
   \   000000AA   0x462A             MOV      R2,R5
   \   000000AC   0x.... 0x....      ADR.W    R1,`?<Constant "deleting address tabl...">`
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0xB001             ADD      SP,SP,#+4
   \   000000B4   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   000000B8   0x.... 0x....      B.W      emberSerialPrintf
    974              return;
    975            }
    976          
    977            // send the message
    978            status = emberSendReply(MSG_SINK_READY, buffer);
   \                     ??handleSensorSelectSink_4:
   \   000000BC   0x4639             MOV      R1,R7
   \   000000BE   0x2003             MOVS     R0,#+3
   \   000000C0   0x.... 0x....      BL       emberSendReply
   \   000000C4   0x4604             MOV      R4,R0
    979          
    980            // done with the packet buffer
    981            emberReleaseMessageBuffer(buffer);
   \   000000C6   0x4638             MOV      R0,R7
   \   000000C8   0x.... 0x....      BL       emReleaseMessageBuffer
    982          
    983            // status message
    984            emberSerialPrintf(APP_SERIAL,
    985                              "TX [sink ready], status:0x%x\r\n",
    986                              status);
   \   000000CC   0x4622             MOV      R2,R4
   \   000000CE   0x.... 0x....      ADR.W    R1,`?<Constant "TX [sink ready], stat...">`
   \                     ??handleSensorSelectSink_3:
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   000000D8   0x.... 0x....      B.W      emberSerialPrintf
    987          }
    988          
    989          // look through the address table for a free location.

   \                                 In section .text, align 2, keep-with-next
    990          int8u findFreeAddressTableLocation(void) {
   \                     findFreeAddressTableLocation:
   \   00000000   0xB510             PUSH     {R4,LR}
    991            int8u i;
    992          
    993            // note that this uses SINK_ADDRESS_TABLE_SIZE for the address table size
    994            // instead of the usual EMBER_ADDRESS_TABLE_SIZE, as some entries are
    995            // reserved for use by the trust center code.
    996            // See "app/sensor/sensor-configuration.h" for more details.
    997            for (i=0; i<SINK_ADDRESS_TABLE_SIZE; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
    998              if (emberGetAddressTableRemoteNodeId(i)
    999                  == EMBER_TABLE_ENTRY_UNUSED_NODE_ID) {
   \                     ??findFreeAddressTableLocation_0:
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      BL       emberGetAddressTableRemoteNodeId
   \   0000000A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD101             BNE.N    ??findFreeAddressTableLocation_1
   1000                return i;
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}
   1001              }
   1002            }
   \                     ??findFreeAddressTableLocation_1:
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \   00000018   0xB2E4             UXTB     R4,R4
   \   0000001A   0x2C0F             CMP      R4,#+15
   \   0000001C   0xD3F2             BCC.N    ??findFreeAddressTableLocation_0
   1003          
   1004            return EMBER_NULL_ADDRESS_TABLE_INDEX;
   \   0000001E   0x20FF             MOVS     R0,#+255
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
   1005          }
   1006          
   1007          // find an existing address table entry that matches the EUI64 passed in

   \                                 In section .text, align 2, keep-with-next
   1008          int8u findAddressTableLocation(EmberEUI64 eui64) {
   \                     findAddressTableLocation:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   1009            int8u i;
   1010          
   1011          
   1012            // note that this uses SINK_ADDRESS_TABLE_SIZE for the address table size
   1013            // instead of the usual EMBER_ADDRESS_TABLE_SIZE, as some entries are
   1014            // reserved for use by the trust center code.
   1015            // See "app/sensor/sensor-configuration.h" for more details.
   1016            for (i=0; i<SINK_ADDRESS_TABLE_SIZE; i++) {
   \   00000006   0x2500             MOVS     R5,#+0
   1017              if (emberGetAddressTableRemoteNodeId(i)
   1018                  != EMBER_TABLE_ENTRY_UNUSED_NODE_ID) {
   \                     ??findAddressTableLocation_0:
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       emberGetAddressTableRemoteNodeId
   \   0000000E   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD00B             BEQ.N    ??findAddressTableLocation_1
   1019                EmberEUI64 remoteEui64;
   1020                emberGetAddressTableRemoteEui64(i, remoteEui64);
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0x.... 0x....      BL       emberGetAddressTableRemoteEui64
   1021                if (MEMCOMPARE(eui64, remoteEui64, EUI64_SIZE) == 0)
   \   0000001E   0x2208             MOVS     R2,#+8
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       halCommonMemCompare
   \   00000028   0xB908             CBNZ.N   R0,??findAddressTableLocation_1
   1022                  return i;
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0xBD3E             POP      {R1-R5,PC}
   1023              }
   1024            }
   \                     ??findAddressTableLocation_1:
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \   00000030   0xB2ED             UXTB     R5,R5
   \   00000032   0x2D0F             CMP      R5,#+15
   \   00000034   0xD3E8             BCC.N    ??findAddressTableLocation_0
   1025          
   1026            return EMBER_NULL_ADDRESS_TABLE_INDEX;
   \   00000036   0x20FF             MOVS     R0,#+255
   \   00000038   0xBD3E             POP      {R1-R5,PC}       ;; return
   1027          }
   1028          
   1029          //
   1030          // *******************************************************************
   1031          
   1032          // *******************************************************************
   1033          // Callback from the HAL when a button state changes
   1034          // WARNING: this callback is an ISR so the best approach is to set a
   1035          // flag here when an action should be taken and then perform the action
   1036          // somewhere else. In this case the actions are serviced in the
   1037          // applicationTick function
   1038          #if     (defined(BUTTON0) || defined(BUTTON1))

   \                                 In section .text, align 2, keep-with-next
   1039          void halButtonIsr(int8u button, int8u state)
   1040          {
   1041          #ifdef  BUTTON0
   1042            // button 0 (button 0 on the dev board) was pushed down
   1043            if (button == BUTTON0 && state == BUTTON_PRESSED) {
   \                     halButtonIsr:
   \   00000000   0x....             LDR.N    R2,??DataTable113_5
   \   00000002   0x280E             CMP      R0,#+14
   \   00000004   0xD104             BNE.N    ??halButtonIsr_0
   \   00000006   0x2901             CMP      R1,#+1
   \   00000008   0xD107             BNE.N    ??halButtonIsr_1
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x7010             STRB     R0,[R2, #+0]
   \   0000000E   0x4770             BX       LR
   1044              buttonZeroPress = TRUE;
   1045            }
   1046          #endif//BUTTON0
   1047          
   1048          #ifdef  BUTTON1
   1049            // button 1 (button 1 on the dev board) was pushed down
   1050            if (button == BUTTON1 && state == BUTTON_PRESSED) {
   \                     ??halButtonIsr_0:
   \   00000010   0x2816             CMP      R0,#+22
   \   00000012   0xBF02             ITTT     EQ 
   \   00000014   0x2901             CMPEQ    R1,#+1
   \   00000016   0x2001             MOVEQ    R0,#+1
   \   00000018   0x7050             STRBEQ   R0,[R2, #+1]
   1051              buttonOnePress = TRUE;
   1052            }
   1053          #endif//BUTTON1
   1054          }
   \                     ??halButtonIsr_1:
   \   0000001A   0x4770             BX       LR               ;; return
   1055          #endif//(defined(BUTTON0) || defined(BUTTON1))
   1056          
   1057          //
   1058          // *******************************************************************
   1059          
   1060          
   1061          // *******************************************************************
   1062          // Utility functions
   1063          
   1064          
   1065          // **********************************************
   1066          // This function:
   1067          // - generates a new random key
   1068          // - broadcasts this new network key via a Transport Key message to the network
   1069          // - sets a flag so that 30 seconds later a Switch Key message is sent out
   1070          //
   1071          // if the switch key message doesnt go out for some reason attempts to send
   1072          // out another Transport Key message will fail. The application needs to send
   1073          // out the Switch Key message before sending out another new key. This can be
   1074          // done with the "&" command
   1075          // **********************************************

   \                                 In section .text, align 2, keep-with-next
   1076          void sinkAppSwitchNetworkKey(void)
   1077          {
   \                     sinkAppSwitchNetworkKey:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   1078            EmberStatus status;
   1079            EmberKeyData newKey;
   1080          
   1081            // generate a random key
   1082            emberSerialPrintf(APP_SERIAL, "keyswitch: generating new key\r\n");
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "keyswitch: generating...">`
   \   00000006   0x.... 0x....      BL       ??Subroutine0_0
   1083            status = emberGenerateRandomKey(&newKey);
   1084          
   1085            // abort on an error
   1086            if (status != EMBER_SUCCESS) {
   \                     ??CrossCallReturnLabel_35:
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       emberGenerateRandomKey
   \   00000010   0xB120             CBZ.N    R0,??sinkAppSwitchNetworkKey_0
   1087              emberSerialPrintf(APP_SERIAL, "keyswitch: key gen FAILED!\r\n");
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "keyswitch: key gen FA...">`
   \   00000016   0x.... 0x....      BL       ??Subroutine0_0
   1088              return;
   \                     ??CrossCallReturnLabel_34:
   \   0000001A   0xBD1F             POP      {R0-R4,PC}
   1089            }
   1090          
   1091            // print out the key
   1092            emberSerialPrintf(APP_SERIAL, "keyswitch: new key: ");
   \                     ??sinkAppSwitchNetworkKey_0:
   \   0000001C   0x.... 0x....      ADR.W    R1,`?<Constant "keyswitch: new key: ">`
   \   00000020   0x.... 0x....      BL       ??Subroutine0_0
   1093            sensorCommonPrint16ByteKey(newKey.contents);
   \                     ??CrossCallReturnLabel_33:
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0x.... 0x....      BL       sensorCommonPrint16ByteKey
   1094          
   1095            // broadcast the key out
   1096            status = emberBroadcastNextNetworkKey(&newKey);
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      BL       emberBroadcastNextNetworkKey
   \   00000030   0x4604             MOV      R4,R0
   1097            emberSerialPrintf(APP_SERIAL, "keyswitch: bcast new key status %x\r\n",
   1098                              status);
   \   00000032   0x4622             MOV      R2,R4
   \   00000034   0x.... 0x....      ADR.W    R1,`?<Constant "keyswitch: bcast new ...">`
   \   00000038   0x.... 0x....      BL       ??Subroutine2_0
   1099          
   1100            // if the broadcast key succeeded, set the flag for sending the key
   1101            // switch command
   1102            if (status == EMBER_SUCCESS) {
   \                     ??CrossCallReturnLabel_95:
   \   0000003C   0xB93C             CBNZ.N   R4,??sinkAppSwitchNetworkKey_1
   1103              emberSerialPrintf(APP_SERIAL,
   1104                   "keyswitch: waiting 30 seconds to send key switch command\r\n");
   \   0000003E   0x.... 0x....      ADR.W    R1,`?<Constant "keyswitch: waiting 30...">`
   \   00000042   0x.... 0x....      BL       ??Subroutine0_0
   1105              // set a flag so we know to send the key switch at a later time
   1106              sendNetworkKeyUpdateTimer = SENSORAPP_NETWORK_KEY_UPDATE_TIME;
   \                     ??CrossCallReturnLabel_32:
   \   00000046   0x....             LDR.N    R0,??DataTable113_5
   \   00000048   0x2178             MOVS     R1,#+120
   \   0000004A   0x7081             STRB     R1,[R0, #+2]
   \   0000004C   0xBD1F             POP      {R0-R4,PC}
   1107            }
   1108            // if the broadcast key failed with INVALID CALL that could mean we
   1109            // have sent a key update but not a switch key. Inform the user
   1110            else if (status == EMBER_INVALID_CALL) {
   \                     ??sinkAppSwitchNetworkKey_1:
   \   0000004E   0x2C70             CMP      R4,#+112
   \   00000050   0xD111             BNE.N    ??CrossCallReturnLabel_87
   1111              emberSerialPrintf(APP_SERIAL,
   1112                       "ERROR: this status could mean that the key update was sent\r\n");
   \   00000052   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: this status co...">`
   \   00000056   0x.... 0x....      BL       ??Subroutine0_0
   1113              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_31:
   \   0000005A   0x.... 0x....      BL       ?Subroutine1
   1114              emberSerialPrintf(APP_SERIAL,
   1115                       "       out but that the switch key wasnt sent out. Use the\r\n");
   \                     ??CrossCallReturnLabel_89:
   \   0000005E   0x.... 0x....      ADR.W    R1,`?<Constant "       out but that t...">`
   \   00000062   0x.... 0x....      BL       ??Subroutine0_0
   1116              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_30:
   \   00000066   0x.... 0x....      BL       ?Subroutine1
   1117              emberSerialPrintf(APP_SERIAL,
   1118                       "       command \"&\" to send the switch key command\r\n");
   \                     ??CrossCallReturnLabel_88:
   \   0000006A   0x.... 0x....      ADR.W    R1,`?<Constant "       command \\"&\\" to...">`
   \   0000006E   0x.... 0x....      BL       ??Subroutine0_0
   1119              emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_29:
   \   00000072   0x.... 0x....      BL       ?Subroutine1
   1120            }
   \                     ??CrossCallReturnLabel_87:
   \   00000076   0xBD1F             POP      {R0-R4,PC}       ;; return
   1121          
   1122          }
   1123          
   1124          // init common state for sensor and sink nodes

   \                                 In section .text, align 2, keep-with-next
   1125          void sinkInit(void) {
   1126            int8u i;
   1127          
   1128            // init the address table and the table that keeps track of when
   1129            // we last heard from an address in the address table.
   1130            // note that this uses SINK_ADDRESS_TABLE_SIZE for the address table size
   1131            // instead of the usual EMBER_ADDRESS_TABLE_SIZE, as some entries are
   1132            // reserved for use by the trust center code.
   1133            // See "app/sensor/sensor-configuration.h" for more details.
   1134            for (i=0; i<SINK_ADDRESS_TABLE_SIZE; i++) {
   \                     sinkInit:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xF64F 0x72FF      MOVW     R2,#+65535
   1135              ticksSinceLastHeard[i] = 0xFFFF;
   \                     ??sinkInit_0:
   \   00000006   0x....             LDR.N    R1,??DataTable113_5
   \   00000008   0xEB01 0x0140      ADD      R1,R1,R0, LSL #+1
   \   0000000C   0x818A             STRH     R2,[R1, #+12]
   1136            }
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x280F             CMP      R0,#+15
   \   00000012   0xD3F8             BCC.N    ??sinkInit_0
   1137          }
   \   00000014   0x4770             BX       LR               ;; return
   1138          
   1139          
   1140          // *****************************
   1141          // for processing serial cmds
   1142          // *****************************

   \                                 In section .text, align 2, keep-with-next
   1143          void processSerialInput(void) {
   \                     processSerialInput:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   1144            int8u cmd = '\0';
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1145          
   1146            if(emberSerialReadByte(APP_SERIAL, &cmd) == 0) {
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       emberSerialReadByte
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xF040 0x80D6      BNE.W    ??CrossCallReturnLabel_23
   1147              if (cmd != '\n') emberSerialPrintf(APP_SERIAL, "\r\n");
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0x280A             CMP      R0,#+10
   \   0000001C   0xF000 0x80D1      BEQ.W    ??CrossCallReturnLabel_23
   \   00000020   0x....             ADR.N    R1,??DataTable113  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000022   0x.... 0x....      BL       ??Subroutine0_0
   1148          
   1149              switch(cmd) {
   \                     ??CrossCallReturnLabel_28:
   \   00000026   0x....             LDR.N    R4,??DataTable113_5
   \   00000028   0xF64F 0x75FF      MOVW     R5,#+65535
   \   0000002C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000030   0x280A             CMP      R0,#+10
   \   00000032   0xBF18             IT       NE 
   \   00000034   0x280D             CMPNE    R0,#+13
   \   00000036   0xD030             BEQ.N    ??processSerialInput_0
   \   00000038   0x2826             CMP      R0,#+38
   \   0000003A   0xF000 0x80AF      BEQ.W    ??processSerialInput_1
   \   0000003E   0x282A             CMP      R0,#+42
   \   00000040   0xF000 0x80A9      BEQ.W    ??processSerialInput_2
   \   00000044   0x2830             CMP      R0,#+48
   \   00000046   0xF000 0x808F      BEQ.W    ??processSerialInput_3
   \   0000004A   0x2831             CMP      R0,#+49
   \   0000004C   0xF000 0x808F      BEQ.W    ??processSerialInput_4
   \   00000050   0x283F             CMP      R0,#+63
   \   00000052   0xD02A             BEQ.N    ??processSerialInput_5
   \   00000054   0x2842             CMP      R0,#+66
   \   00000056   0xD043             BEQ.N    ??processSerialInput_6
   \   00000058   0x2843             CMP      R0,#+67
   \   0000005A   0xD063             BEQ.N    ??processSerialInput_7
   \   0000005C   0x2851             CMP      R0,#+81
   \   0000005E   0xD06F             BEQ.N    ??processSerialInput_8
   \   00000060   0x2861             CMP      R0,#+97
   \   00000062   0xD076             BEQ.N    ??processSerialInput_9
   \   00000064   0x2862             CMP      R0,#+98
   \   00000066   0xD031             BEQ.N    ??processSerialInput_10
   \   00000068   0x2863             CMP      R0,#+99
   \   0000006A   0xF000 0x8089      BEQ.W    ??processSerialInput_11
   \   0000006E   0x2865             CMP      R0,#+101
   \   00000070   0xF000 0x8089      BEQ.W    ??processSerialInput_12
   \   00000074   0x2866             CMP      R0,#+102
   \   00000076   0xD011             BEQ.N    ??processSerialInput_13
   \   00000078   0x2869             CMP      R0,#+105
   \   0000007A   0xD00C             BEQ.N    ??processSerialInput_14
   \   0000007C   0x286A             CMP      R0,#+106
   \   0000007E   0xD07C             BEQ.N    ??processSerialInput_15
   \   00000080   0x286B             CMP      R0,#+107
   \   00000082   0xD015             BEQ.N    ??processSerialInput_16
   \   00000084   0x286C             CMP      R0,#+108
   \   00000086   0xD06C             BEQ.N    ??processSerialInput_17
   \   00000088   0x286D             CMP      R0,#+109
   \   0000008A   0xD066             BEQ.N    ??processSerialInput_18
   \   0000008C   0x2874             CMP      R0,#+116
   \   0000008E   0xD012             BEQ.N    ??processSerialInput_19
   \   00000090   0x2878             CMP      R0,#+120
   \   00000092   0xD06F             BEQ.N    ??processSerialInput_20
   \   00000094   0xE089             B.N      ??processSerialInput_21
   1150          #ifdef  PHY_BRIDGE
   1151                // Bridge Tx Control
   1152              case '>':
   1153              {
   1154                EmZigBrgControl txControl = (emZigBrgGetTxControl() + 1) % BRG_CONTROL_ITEMS;
   1155                (void) emZigBrgSetTxControl(txControl);
   1156                emberSerialPrintf(APP_SERIAL, "Bridge TxControl %p\r\n", brgControlNames[txControl]);
   1157                break;
   1158              }
   1159                // Bridge Rx Control
   1160              case '<':
   1161              {
   1162                EmZigBrgControl rxControl = (emZigBrgGetRxControl() + 1) % BRG_CONTROL_ITEMS;
   1163                (void) emZigBrgSetRxControl(rxControl);
   1164                emberSerialPrintf(APP_SERIAL, "Bridge RxControl %p\r\n", brgControlNames[rxControl]);
   1165                break;
   1166              }
   1167          #ifdef  BRIDGE_TRACE
   1168                // Toggle Bridge Tracing
   1169              case '#':
   1170                emZigBrgTrace = !emZigBrgTrace;
   1171                emberSerialPrintf(APP_SERIAL, "Bridge Trace %p\r\n", emZigBrgTrace ? "on" : "off");
   1172                break;
   1173          #endif//BRIDGE_TRACE
   1174          #endif//PHY_BRIDGE
   1175          
   1176                // info
   1177              case 'i':
   1178                printNodeInfo();
   \                     ??processSerialInput_14:
   \   00000096   0x.... 0x....      BL       printNodeInfo
   1179                break;
   \                     ??processSerialInput_0:
   \   0000009A   0xE08A             B.N      ??CrossCallReturnLabel_24
   1180          
   1181                // force sink advertisement
   1182              case 'f':
   1183                emberSerialPrintf(APP_SERIAL,
   1184                 "EVENT: serial input, force sink advertise\r\n");
   \                     ??processSerialInput_13:
   \   0000009C   0x.... 0x....      ADR.W    R1,`?<Constant "EVENT: serial input, ...">`
   \   000000A0   0x.... 0x....      BL       ??Subroutine0_0
   1185                // setting timer to 3 means next time it is checked, it will
   1186                // go to 2 and send a many-to-one route request, then two ticks later
   1187                // it will send the sink advertise
   1188                timeBeforeSinkAdvertise = 3;
   \                     ??CrossCallReturnLabel_27:
   \   000000A4   0x2003             MOVS     R0,#+3
   \   000000A6   0x80E0             STRH     R0,[R4, #+6]
   1189                break;
   \   000000A8   0xE083             B.N      ??CrossCallReturnLabel_24
   1190          
   1191                // help
   1192              case '?':
   1193                printHelp();
   \                     ??processSerialInput_5:
   \   000000AA   0x.... 0x....      BL       printHelp
   1194                break;
   \   000000AE   0xE080             B.N      ??CrossCallReturnLabel_24
   1195          
   1196          #if EMBER_SECURITY_LEVEL == 5
   1197               // print keys
   1198              case 'k':
   1199                sensorCommonPrintKeys();
   \                     ??processSerialInput_16:
   \   000000B0   0x.... 0x....      BL       sensorCommonPrintKeys
   1200                break;
   \   000000B4   0xE07D             B.N      ??CrossCallReturnLabel_24
   1201          #endif //EMBER_SECURITY_LEVEL == 5
   1202          
   1203                // identify tune
   1204              case 't':
   1205                halPlayTune_P(tune, 0);
   \                     ??processSerialInput_19:
   \   000000B6   0x.... 0x....      ADR.W    R4,tune
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0x4620             MOV      R0,R4
   \   000000BE   0x.... 0x....      BL       halPlayTune_P
   1206                halPlayTune_P(tune, 0);
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x4620             MOV      R0,R4
   \   000000C6   0x.... 0x....      BL       halPlayTune_P
   1207                break;
   \   000000CA   0xE072             B.N      ??CrossCallReturnLabel_24
   1208          
   1209                // bootloader
   1210              case 'b':
   1211                emberSerialPrintf(APP_SERIAL, "starting bootloader...\r\n");
   \                     ??processSerialInput_10:
   \   000000CC   0x.... 0x....      ADR.W    R1,`?<Constant "starting bootloader...\\r\\n">`
   \   000000D0   0x.... 0x....      BL       ??Subroutine0_0
   1212                emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_26:
   \   000000D4   0x.... 0x....      BL       ?Subroutine1
   1213                halLaunchStandaloneBootloader(STANDALONE_BOOTLOADER_NORMAL_MODE);
   \                     ??CrossCallReturnLabel_86:
   \   000000D8   0x2001             MOVS     R0,#+1
   \   000000DA   0x.... 0x....      BL       halLaunchStandaloneBootloader
   1214                break;
   \   000000DE   0xE068             B.N      ??CrossCallReturnLabel_24
   1215          
   1216          #ifdef USE_BOOTLOADER_LIB
   1217                // This command initiates a passthru bootloading of the first
   1218                // device in the address table
   1219              case 'B':
   1220                {
   1221                  int8u index;
   1222                  EmberEUI64 eui;
   1223                  if (emberGetAddressTableRemoteNodeId(0)
   1224                      == EMBER_TABLE_ENTRY_UNUSED_NODE_ID) {
   \                     ??processSerialInput_6:
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x.... 0x....      BL       emberGetAddressTableRemoteNodeId
   \   000000E6   0x42A8             CMP      R0,R5
   \   000000E8   0xBF08             IT       EQ 
   \   000000EA   0x.... 0x....      ADREQ.W  R1,`?<Constant "ERROR: no device in a...">`
   1225                    // error
   1226                    emberSerialPrintf(APP_SERIAL,
   1227                                      "ERROR: no device in address table at"
   1228                                      " location 0\r\n");
   \   000000EE   0xD05E             BEQ.N    ??processSerialInput_22
   1229                    break;
   1230                  }
   1231                  emberGetAddressTableRemoteEui64(0, eui);
   \   000000F0   0xA901             ADD      R1,SP,#+4
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x.... 0x....      BL       emberGetAddressTableRemoteEui64
   1232                  emberSerialPrintf(APP_SERIAL, "INFO : attempt BL\r\n");
   \   000000F8   0x.... 0x....      ADR.W    R1,`?<Constant "INFO : attempt BL\\r\\n">`
   \   000000FC   0x.... 0x....      BL       ??Subroutine0_0
   1233                  if (isMyChild(eui, &index)) {
   \                     ??CrossCallReturnLabel_25:
   \   00000100   0xF10D 0x0101      ADD      R1,SP,#+1
   \   00000104   0xA801             ADD      R0,SP,#+4
   \   00000106   0x.... 0x....      BL       isMyChild
   \   0000010A   0x2800             CMP      R0,#+0
   \   0000010C   0xA801             ADD      R0,SP,#+4
   \   0000010E   0xD114             BNE.N    ??processSerialInput_23
   1234                    bootloadMySleepyChild(eui);
   1235                  }
   1236                  else if (isMyNeighbor(eui)) {
   \   00000110   0x.... 0x....      BL       isMyNeighbor
   \   00000114   0xB118             CBZ.N    R0,??processSerialInput_24
   1237                    bootloadMyNeighborRouter(eui);
   \   00000116   0xA801             ADD      R0,SP,#+4
   \   00000118   0x.... 0x....      BL       bootloadMyNeighborRouter
   \   0000011C   0xE049             B.N      ??CrossCallReturnLabel_24
   1238                  }
   1239                  else {
   1240                    // error
   1241                    emberSerialPrintf(APP_SERIAL,
   1242                                      "ERROR: can't bootload device whose address is "
   1243                                      " stored at location 0 of the address table,"
   1244                                      " not neighbor or child\r\n");
   \                     ??processSerialInput_24:
   \   0000011E   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: can\\'t bootload...">`
   \   00000122   0xE044             B.N      ??processSerialInput_22
   1245                  }
   1246                }
   1247                break;
   1248          
   1249                // This command initiates a passthru bootloading of the first
   1250                // device in the child table
   1251              case 'C':
   1252                {
   1253                  EmberEUI64 eui;
   1254                  EmberNodeType type;
   1255                  EmberStatus status;
   1256                  status = emberGetChildData(0, eui, &type);
   1257                  if (status != EMBER_SUCCESS) {
   \                     ??processSerialInput_7:
   \   00000124   0xF10D 0x0201      ADD      R2,SP,#+1
   \   00000128   0xA901             ADD      R1,SP,#+4
   \   0000012A   0x2000             MOVS     R0,#+0
   \   0000012C   0x.... 0x....      BL       emberGetChildData
   \   00000130   0xB110             CBZ.N    R0,??processSerialInput_25
   1258                    emberSerialPrintf(APP_SERIAL,
   1259                                      "ERROR: first slot in child table is empty\r\n");
   \   00000132   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: first slot in ...">`
   \   00000136   0xE03A             B.N      ??processSerialInput_22
   1260                    break;
   1261                  }
   1262          
   1263                  bootloadMySleepyChild(eui);
   \                     ??processSerialInput_25:
   \   00000138   0xA801             ADD      R0,SP,#+4
   \                     ??processSerialInput_23:
   \   0000013A   0x.... 0x....      BL       bootloadMySleepyChild
   1264                }
   1265                break;
   \   0000013E   0xE038             B.N      ??CrossCallReturnLabel_24
   1266          
   1267              case 'Q': // send bootload query to neighbors
   1268                {
   1269                  // sending a query broadcast (mac only - so just neighbors)
   1270                  // gets responses into bootloadUtilQueryResponseHandler
   1271                  EmberEUI64 addr = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
   \                     ??processSerialInput_8:
   \   00000140   0xA801             ADD      R0,SP,#+4
   \   00000142   0x.... 0x....      ADR.W    R1,`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000146   0xC90C             LDM      R1!,{R2,R3}
   \   00000148   0xC00C             STM      R0!,{R2,R3}
   1272                  bootloadUtilSendQuery(addr);
   \   0000014A   0xA801             ADD      R0,SP,#+4
   \   0000014C   0x.... 0x....      BL       bootloadUtilSendQuery
   1273                }
   1274                break;
   \   00000150   0xE02F             B.N      ??CrossCallReturnLabel_24
   1275          #endif // USE_BOOTLOADER_LIB
   1276          
   1277                // print address table
   1278              case 'a':
   1279                // note that this uses SINK_ADDRESS_TABLE_SIZE for the address table
   1280                // size instead of the usual EMBER_ADDRESS_TABLE_SIZE, as some entries
   1281                // are reserved for use by the trust center code.
   1282                // See "app/sensor/sensor-configuration.h" for more details.
   1283                printAddressTable(SINK_ADDRESS_TABLE_SIZE);
   \                     ??processSerialInput_9:
   \   00000152   0x200F             MOVS     R0,#+15
   \   00000154   0x.... 0x....      BL       printAddressTable
   1284                break;
   \   00000158   0xE02B             B.N      ??CrossCallReturnLabel_24
   1285          
   1286                // print multicast table
   1287              case 'm':
   1288                printMulticastTable(EMBER_MULTICAST_TABLE_SIZE);
   \                     ??processSerialInput_18:
   \   0000015A   0x2001             MOVS     R0,#+1
   \   0000015C   0x.... 0x....      BL       printMulticastTable
   1289                break;
   \   00000160   0xE027             B.N      ??CrossCallReturnLabel_24
   1290          
   1291                // send hello - multicast msg
   1292              case 'l':
   1293                sendMulticastHello();
   \                     ??processSerialInput_17:
   \   00000162   0x.... 0x....      BL       sendMulticastHello
   1294                break;
   \   00000166   0xE024             B.N      ??CrossCallReturnLabel_24
   1295          
   1296                // 0 and 1 mean button presses
   1297              case '0':
   1298                buttonZeroPress = TRUE;
   \                     ??processSerialInput_3:
   \   00000168   0x2001             MOVS     R0,#+1
   \   0000016A   0x7020             STRB     R0,[R4, #+0]
   1299                break;
   \   0000016C   0xE025             B.N      ??processSerialInput_26
   1300              case '1':
   1301                buttonOnePress = TRUE;
   \                     ??processSerialInput_4:
   \   0000016E   0x2001             MOVS     R0,#+1
   \   00000170   0x7060             STRB     R0,[R4, #+1]
   1302                break;
   \   00000172   0xE022             B.N      ??processSerialInput_26
   1303          
   1304              case 'x':
   1305                printTokens();
   \                     ??processSerialInput_20:
   \   00000174   0x.... 0x....      BL       printTokens
   1306                break;
   \   00000178   0xE01B             B.N      ??CrossCallReturnLabel_24
   1307              case 'j':
   1308                jitMessageStatus();
   \                     ??processSerialInput_15:
   \   0000017A   0x.... 0x....      BL       jitMessageStatus
   1309                break;
   \   0000017E   0xE018             B.N      ??CrossCallReturnLabel_24
   1310          
   1311              case 'c':
   1312                printChildTable();
   \                     ??processSerialInput_11:
   \   00000180   0x.... 0x....      BL       printChildTable
   1313                break;
   \   00000184   0xE015             B.N      ??CrossCallReturnLabel_24
   1314          
   1315                // reset node
   1316              case 'e':
   1317                emberSerialGuaranteedPrintf(APP_SERIAL, "Resetting node...\r\n");
   \                     ??processSerialInput_12:
   \   00000186   0x.... 0x....      ADR.W    R1,`?<Constant "Resetting node...\\r\\n">`
   \   0000018A   0x2001             MOVS     R0,#+1
   \   0000018C   0x.... 0x....      BL       emberSerialGuaranteedPrintf
   1318                halReboot();
   \   00000190   0x.... 0x....      BL       halReboot
   1319                break;
   \   00000194   0xE00D             B.N      ??CrossCallReturnLabel_24
   1320          
   1321                // switch the network key by sending a new key and then sending a
   1322                // switch key command 30 seconds later
   1323              case '*':
   1324                sinkAppSwitchNetworkKey();
   \                     ??processSerialInput_2:
   \   00000196   0x.... 0x....      BL       sinkAppSwitchNetworkKey
   1325                break;
   \   0000019A   0xE00A             B.N      ??CrossCallReturnLabel_24
   1326          
   1327                // send the switch key command. This is only necessary if the device
   1328                // sent out the new key and then reset before it was able to send
   1329                // out the switch key command
   1330              case '&':
   1331                emberSerialPrintf(APP_SERIAL,
   1332                     "keyswitch: sending switch network key command, status %x\r\n",
   1333                                  emberBroadcastNetworkKeySwitch());
   \                     ??processSerialInput_1:
   \   0000019C   0x4628             MOV      R0,R5
   \   0000019E   0x.... 0x....      BL       emSendNetworkKeySwitch
   \   000001A2   0x4602             MOV      R2,R0
   \   000001A4   0x.... 0x....      BL       ?Subroutine2
   1334                break;
   \                     ??CrossCallReturnLabel_103:
   \   000001A8   0xE003             B.N      ??CrossCallReturnLabel_24
   1335          
   1336              case '\n':
   1337              case '\r':
   1338                break;
   1339          
   1340          
   1341              default:
   1342                emberSerialPrintf(APP_SERIAL, "unknown cmd\r\n");
   \                     ??processSerialInput_21:
   \   000001AA   0x.... 0x....      ADR.W    R1,`?<Constant "unknown cmd\\r\\n">`
   \                     ??processSerialInput_22:
   \   000001AE   0x.... 0x....      BL       ??Subroutine0_0
   1343                break;
   1344               }
   1345          
   1346              if (cmd != '\n') emberSerialPrintf(APP_SERIAL, "\r\nsink-node>");
   \                     ??CrossCallReturnLabel_24:
   \   000001B2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001B6   0x280A             CMP      R0,#+10
   \   000001B8   0xD003             BEQ.N    ??CrossCallReturnLabel_23
   \                     ??processSerialInput_26:
   \   000001BA   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\nsink-node>">`
   \   000001BE   0x.... 0x....      BL       ??Subroutine0_0
   1347            }
   1348          
   1349          }
   \                     ??CrossCallReturnLabel_23:
   \   000001C2   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
   1350          // *********************************
   1351          // print help
   1352          // *********************************
   1353          #define PRINT(x) emberSerialPrintf(APP_SERIAL, x); emberSerialWaitSend(APP_SERIAL)
   1354          

   \                                 In section .text, align 2, keep-with-next
   1355          void printHelp(void)
   1356          {
   \                     printHelp:
   \   00000000   0xB580             PUSH     {R7,LR}
   1357            PRINT("? = help\r\n");
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "? = help\\r\\n">`
   \   00000006   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_22:
   \   0000000A   0x.... 0x....      BL       ?Subroutine1
   1358            PRINT("i = print node info\r\n");
   \                     ??CrossCallReturnLabel_85:
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant "i = print node info\\r\\n">`
   \   00000012   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_21:
   \   00000016   0x.... 0x....      BL       ?Subroutine1
   1359          #if EMBER_SECURITY_LEVEL == 5
   1360            PRINT("k = print keys\r\n");
   \                     ??CrossCallReturnLabel_84:
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "k = print keys\\r\\n">`
   \   0000001E   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_20:
   \   00000022   0x.... 0x....      BL       ?Subroutine1
   1361          #endif //EMBER_SECURITY_LEVEL == 5
   1362            PRINT("b = bootloader\r\n");
   \                     ??CrossCallReturnLabel_83:
   \   00000026   0x.... 0x....      ADR.W    R1,`?<Constant "b = bootloader\\r\\n">`
   \   0000002A   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_19:
   \   0000002E   0x.... 0x....      BL       ?Subroutine1
   1363            PRINT("l = send multicast [hello]\r\n");
   \                     ??CrossCallReturnLabel_82:
   \   00000032   0x.... 0x....      ADR.W    R1,`?<Constant "l = send multicast [h...">`
   \   00000036   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_18:
   \   0000003A   0x.... 0x....      BL       ?Subroutine1
   1364            PRINT("t = play tune\r\n");
   \                     ??CrossCallReturnLabel_81:
   \   0000003E   0x.... 0x....      ADR.W    R1,`?<Constant "t = play tune\\r\\n">`
   \   00000042   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_17:
   \   00000046   0x.... 0x....      BL       ?Subroutine1
   1365            PRINT("a = print address table\r\n");
   \                     ??CrossCallReturnLabel_80:
   \   0000004A   0x.... 0x....      ADR.W    R1,`?<Constant "a = print address tab...">`
   \   0000004E   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_16:
   \   00000052   0x.... 0x....      BL       ?Subroutine1
   1366            PRINT("m = print multicast table\r\n");
   \                     ??CrossCallReturnLabel_79:
   \   00000056   0x.... 0x....      ADR.W    R1,`?<Constant "m = print multicast t...">`
   \   0000005A   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_15:
   \   0000005E   0x.... 0x....      BL       ?Subroutine1
   1367            PRINT("f = send sink advertisement\r\n");
   \                     ??CrossCallReturnLabel_78:
   \   00000062   0x.... 0x....      ADR.W    R1,`?<Constant "f = send sink adverti...">`
   \   00000066   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_14:
   \   0000006A   0x.... 0x....      BL       ?Subroutine1
   1368            PRINT("0 = button 0: turn allow join ON for 60 sec\r\n");
   \                     ??CrossCallReturnLabel_77:
   \   0000006E   0x.... 0x....      ADR.W    R1,`?<Constant "0 = button 0: turn al...">`
   \   00000072   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_13:
   \   00000076   0x.... 0x....      BL       ?Subroutine1
   1369            PRINT("1 = button 1: leave ZigBee network\r\n");
   \                     ??CrossCallReturnLabel_76:
   \   0000007A   0x.... 0x....      ADR.W    R1,`?<Constant "1 = button 1: leave Z...">`
   \   0000007E   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_12:
   \   00000082   0x.... 0x....      BL       ?Subroutine1
   1370            PRINT("e = reset node\r\n");
   \                     ??CrossCallReturnLabel_75:
   \   00000086   0x.... 0x....      ADR.W    R1,`?<Constant "e = reset node\\r\\n">`
   \   0000008A   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_11:
   \   0000008E   0x.... 0x....      BL       ?Subroutine1
   1371            PRINT("x = print node tokens\r\n");
   \                     ??CrossCallReturnLabel_74:
   \   00000092   0x.... 0x....      ADR.W    R1,`?<Constant "x = print node tokens\\r\\n">`
   \   00000096   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_10:
   \   0000009A   0x.... 0x....      BL       ?Subroutine1
   1372            PRINT("c = print child table\r\n");
   \                     ??CrossCallReturnLabel_73:
   \   0000009E   0x.... 0x....      ADR.W    R1,`?<Constant "c = print child table\\r\\n">`
   \   000000A2   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_9:
   \   000000A6   0x.... 0x....      BL       ?Subroutine1
   1373            PRINT("j = print JIT storage status\r\n");
   \                     ??CrossCallReturnLabel_72:
   \   000000AA   0x.... 0x....      ADR.W    R1,`?<Constant "j = print JIT storage...">`
   \   000000AE   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_8:
   \   000000B2   0x.... 0x....      BL       ?Subroutine1
   1374            PRINT("B = attempt to bootload the device whose EUI is stored at"
   1375                  " location 0 of the address table\r\n");
   \                     ??CrossCallReturnLabel_71:
   \   000000B6   0x.... 0x....      ADR.W    R1,`?<Constant "B = attempt to bootlo...">`
   \   000000BA   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_7:
   \   000000BE   0x.... 0x....      BL       ?Subroutine1
   1376            PRINT("C = attempt to bootload the first device in the child table\r\n");
   \                     ??CrossCallReturnLabel_70:
   \   000000C2   0x.... 0x....      ADR.W    R1,`?<Constant "C = attempt to bootlo...">`
   \   000000C6   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_6:
   \   000000CA   0x.... 0x....      BL       ?Subroutine1
   1377            PRINT("Q = send out a BOOTLOADER_QUERY message\r\n");
   \                     ??CrossCallReturnLabel_69:
   \   000000CE   0x.... 0x....      ADR.W    R1,`?<Constant "Q = send out a BOOTLO...">`
   \   000000D2   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_5:
   \   000000D6   0x.... 0x....      BL       ?Subroutine1
   1378            PRINT("* = switch the network key: send the key followed by a switch\r\n");
   \                     ??CrossCallReturnLabel_68:
   \   000000DA   0x.... 0x....      ADR.W    R1,`?<Constant "* = switch the networ...">`
   \   000000DE   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_4:
   \   000000E2   0x.... 0x....      BL       ?Subroutine1
   1379            PRINT("    key command 30 seconds later\r\n");
   \                     ??CrossCallReturnLabel_67:
   \   000000E6   0x.... 0x....      ADR.W    R1,`?<Constant "    key command 30 se...">`
   \   000000EA   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_3:
   \   000000EE   0x.... 0x....      BL       ?Subroutine1
   1380            PRINT("& = send a switch key command. This is needed only if the device\r\n");
   \                     ??CrossCallReturnLabel_66:
   \   000000F2   0x.... 0x....      ADR.W    R1,`?<Constant "& = send a switch key...">`
   \   000000F6   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_2:
   \   000000FA   0x.... 0x....      BL       ?Subroutine1
   1381            PRINT("    sent a new key and then reset before it was able to send the\r\n");
   \                     ??CrossCallReturnLabel_65:
   \   000000FE   0x.... 0x....      ADR.W    R1,`?<Constant "    sent a new key an...">`
   \   00000102   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_1:
   \   00000106   0x.... 0x....      BL       ?Subroutine1
   1382            PRINT("    switch key command\r\n");
   \                     ??CrossCallReturnLabel_64:
   \   0000010A   0x.... 0x....      ADR.W    R1,`?<Constant "    switch key command\\r\\n">`
   \   0000010E   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_0:
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0xE8BD 0x4002      POP      {R1,LR}
   \   00000118   0x.... 0x....      B.W      emberSerialWaitSend
   1383          #ifdef  PHY_BRIDGE
   1384            PRINT("> = cycle to next Bridge TxControl\r\n");
   1385            PRINT("< = cycle to next Bridge RxControl\r\n");
   1386          #ifdef  BRIDGE_TRACE
   1387            PRINT("# = toggle Bridge debug tracing\r\n");
   1388          #endif//BRIDGE_TRACE
   1389          #endif//PHY_BRIDGE
   1390          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_1:
   \   00000000   0x5D 0x0D          DC8      "]\r\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_1:
   \   00000000   0x........         DC32     emLocalEui64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_2:
   \   00000000   0x........         DC32     networkFormMethod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_3:
   \   00000000   0x........         DC32     emMessageBufferLengths

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_4:
   \   00000000   0x........         DC32     blState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_5:
   \   00000000   0x........         DC32     buttonZeroPress

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_6:
   \   00000000   0x........         DC32     emberMulticastTable

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "]\\r\\n">`:
   \   00000000   0x5D 0x0D          DC8 "]\015\012"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {115, 101, 110, 115, 111, 114, 0, 0`:
   \   00000000   0x73 0x65          DC8 115, 101, 110, 115, 111, 114, 0, 0
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "reset: %p\\r\\n">`:
   \   00000000   0x72 0x65          DC8 "reset: %p\015\012"
   \              0x73 0x65    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x70 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Build on: 21:36:48 Ju...">`:
   \   00000000   0x42 0x75          DC8 "Build on: 21:36:48 Jul  2 2013\015\012"
   \              0x69 0x6C    
   \              0x64 0x20    
   \              0x6F 0x6E    
   \              0x3A 0x20    
   \              0x32 0x31    
   \              0x3A 0x33    
   \              0x36 0x3A    
   \              0x34 0x38    
   \              0x20 0x4A    
   \              0x75 0x6C    
   \              0x20 0x20    
   \              0x32 0x20    
   \              0x32 0x30    
   \              0x31 0x33    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: emberInit 0x%x\\r\\n">`:
   \   00000000   0x45 0x52          DC8 "ERROR: emberInit 0x%x\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x65    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sink.c">`:
   \   00000000   0x73 0x69          DC8 "sink.c"
   \              0x6E 0x6B    
   \              0x2E 0x63    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: emberInit pass...">`:
   \   00000000   0x45 0x56          DC8 "EVENT: emberInit passed\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x65    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x20 0x70    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nINIT : sink app ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012INIT : sink app "
   \              0x49 0x4E    
   \              0x49 0x54    
   \              0x20 0x3A    
   \              0x20 0x73    
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x61 0x70    
   \              0x70 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FORM : attempting to ...">`:
   \   00000000   0x46 0x4F          DC8 "FORM : attempting to form network\015\012"
   \              0x52 0x4D    
   \              0x20 0x3A    
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x20    
   \              0x6E 0x65    
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     : using channel ...">`:
   \   00000000   0x20 0x20          DC8 "     : using channel 0x%x, panid 0x%2x, "
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x75    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x2C    
   \              0x20 0x70    
   \              0x61 0x6E    
   \              0x69 0x64    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x78    
   \              0x2C 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: from emberForm...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: from emberFormNetwork: 0x%x\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x65 0x6D    
   \              0x62 0x65    
   \              0x72 0x46    
   \              0x6F 0x72    
   \              0x6D 0x4E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [BL QUERY RESP] eui: ">`:
   \   00000000   0x52 0x58          DC8 "RX [BL QUERY RESP] eui: "
   \              0x20 0x5B    
   \              0x42 0x4C    
   \              0x20 0x51    
   \              0x55 0x45    
   \              0x52 0x59    
   \              0x20 0x52    
   \              0x45 0x53    
   \              0x50 0x5D    
   \              0x20 0x65    
   \              0x75 0x69    
   \              0x3A 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " running %p\\r\\n">`:
   \   00000000   0x20 0x72          DC8 " running %p\015\012"
   \              0x75 0x6E    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x70 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "bootloader">`:
   \   00000000   0x62 0x6F          DC8 "bootloader"
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "stack">`:
   \   00000000   0x73 0x74          DC8 "stack"
   \              0x61 0x63    
   \              0x6B 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [bad packet] clust...">`:
   \   00000000   0x52 0x58          DC8 "RX [bad packet] cluster 0x%2x of length %x\015\012"
   \              0x20 0x5B    
   \              0x62 0x61    
   \              0x64 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x5D 0x20    
   \              0x63 0x6C    
   \              0x75 0x73    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x20    
   \              0x6F 0x66    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX too short [sink ad...">`:
   \   00000000   0x52 0x58          DC8 "RX too short [sink advertise] from: "
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x61    
   \              0x64 0x76    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x73 0x65    
   \              0x5D 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x3A 0x20    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [sink advertise] f...">`:
   \   00000000   0x52 0x58          DC8 "RX [sink advertise] from: "
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x61    
   \              0x64 0x76    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x73 0x65    
   \              0x5D 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x3A 0x20    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "; ignoring\\r\\n">`:
   \   00000000   0x3B 0x20          DC8 "; ignoring\015\012"
   \              0x69 0x67    
   \              0x6E 0x6F    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [sensor select sin...">`:
   \   00000000   0x52 0x58          DC8 "RX [sensor select sink] from: "
   \              0x20 0x5B    
   \              0x73 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x73    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x5D 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x3A 0x20    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "; processing message\\r\\n">`:
   \   00000000   0x3B 0x20          DC8 "; processing message\015\012"
   \              0x70 0x72    
   \              0x6F 0x63    
   \              0x65 0x73    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [sink ready] from: ">`:
   \   00000000   0x52 0x58          DC8 "RX [sink ready] from: "
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x5D 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x3A 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "; this is an error]\\r\\n">`:
   \   00000000   0x3B 0x20          DC8 "; this is an error]\015\012"
   \              0x74 0x68    
   \              0x69 0x73    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x61 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x5D 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [sink query] from: ">`:
   \   00000000   0x52 0x58          DC8 "RX [sink query] from: "
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x71    
   \              0x75 0x65    
   \              0x72 0x79    
   \              0x5D 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x3A 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [DATA] from: ">`:
   \   00000000   0x52 0x58          DC8 "RX [DATA] from: "
   \              0x20 0x5B    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x5D 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "; len 0x%x / data NO ...">`:
   \   00000000   0x3B 0x20          DC8 "; len 0x%x / data NO DATA!\015\012"
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x2F    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x20    
   \              0x4E 0x4F    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "; len 0x%x / data 0x%...">`:
   \   00000000   0x3B 0x20          DC8 "; len 0x%x / data 0x%x%x\015\012"
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x2F    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sink received data: 0...">`:
   \   00000000   0x53 0x69          DC8 "Sink received data: 0x%x%x \015\012"
   \              0x6E 0x6B    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x64 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x25 0x78    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [multicast hello] ...">`:
   \   00000000   0x52 0x58          DC8 "RX [multicast hello] from: "
   \              0x20 0x5B    
   \              0x6D 0x75    
   \              0x6C 0x74    
   \              0x69 0x63    
   \              0x61 0x73    
   \              0x74 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x5D    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RX [unknown (%2x)] fr...">`:
   \   00000000   0x52 0x58          DC8 "RX [unknown (%2x)] from: "
   \              0x20 0x5B    
   \              0x75 0x6E    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x28 0x25    
   \              0x32 0x78    
   \              0x29 0x5D    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x3A    
   \              0x20 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: stackStatus no...">`:
   \   00000000   0x45 0x56          DC8 "EVENT: stackStatus now EMBER_NETWORK_UP\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x6E    
   \              0x6F 0x77    
   \              0x20 0x45    
   \              0x4D 0x42    
   \              0x45 0x52    
   \              0x5F 0x4E    
   \              0x45 0x54    
   \              0x57 0x4F    
   \              0x52 0x4B    
   \              0x5F 0x55    
   \              0x50 0x0D    
   \              0x0A 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FORM : network starte...">`:
   \   00000000   0x46 0x4F          DC8 "FORM : network started using network init\015\012"
   \              0x52 0x4D    
   \              0x20 0x3A    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x75    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FORM : new network fo...">`:
   \   00000000   0x46 0x4F          DC8 "FORM : new network formed\015\012"
   \              0x52 0x4D    
   \              0x20 0x3A    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x65    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FORM : new network fo...">_1`:
   \   00000000   0x46 0x4F          DC8 "FORM : new network formed by scanning\015\012"
   \              0x52 0x4D    
   \              0x20 0x3A    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x65    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x20 0x73    
   \              0x63 0x61    
   \              0x6E 0x6E    
   \              0x69 0x6E    
   \              0x67 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     : channel 0x%x, ...">`:
   \   00000000   0x20 0x20          DC8 "     : channel 0x%x, panid 0x%2x, "
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x2C    
   \              0x20 0x70    
   \              0x61 0x6E    
   \              0x69 0x64    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x78    
   \              0x2C 0x20    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: stackStatus no...">_1`:
   \   00000000   0x45 0x56          DC8 "EVENT: stackStatus now EMBER_NETWORK_DOWN\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x6E    
   \              0x6F 0x77    
   \              0x20 0x45    
   \              0x4D 0x42    
   \              0x45 0x52    
   \              0x5F 0x4E    
   \              0x45 0x54    
   \              0x57 0x4F    
   \              0x52 0x4B    
   \              0x5F 0x44    
   \              0x4F 0x57    
   \              0x4E 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: stackStatus no...">_2`:
   \   00000000   0x45 0x56          DC8 "EVENT: stackStatus now EMBER_JOIN_FAILED\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x6E    
   \              0x6F 0x77    
   \              0x20 0x45    
   \              0x4D 0x42    
   \              0x45 0x52    
   \              0x5F 0x4A    
   \              0x4F 0x49    
   \              0x4E 0x5F    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: stackStatus no...">_3`:
   \   00000000   0x45 0x56          DC8 "EVENT: stackStatus now 0x%x\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x6E    
   \              0x6F 0x77    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: could not find...">`:
   \   00000000   0x45 0x56          DC8 45H, 56H, 45H, 4EH, 54H, 3AH, 20H, 63H
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x63    
   \   00000008   0x6F 0x75          DC8 6FH, 75H, 6CH, 64H, 20H, 6EH, 6FH, 74H
   \              0x6C 0x64    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000010   0x20 0x66          DC8 20H, 66H, 69H, 6EH, 64H, 20H, 61H, 6EH
   \              0x69 0x6E    
   \              0x64 0x20    
   \              0x61 0x6E    
   \   00000018   0x20 0x61          DC8 20H, 61H, 76H, 61H, 69H, 6CH, 61H, 62H
   \              0x76 0x61    
   \              0x69 0x6C    
   \              0x61 0x62    
   \   00000020   0x6C 0x65          DC8 6CH, 65H, 20H, 63H, 68H, 61H, 6EH, 6EH
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \   00000028   0x65 0x6C          DC8 65H, 6CH, 20H, 61H, 6EH, 64H, 20H, 70H
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x70    
   \   00000030   0x61 0x6E          DC8 61H, 6EH, 69H, 64H, 20H, 2DH, 20H, 73H
   \              0x69 0x64    
   \              0x20 0x2D    
   \              0x20 0x73    
   \   00000038   0x74 0x61          DC8 74H, 61H, 74H, 75H, 73H, 3AH, 20H, 30H
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x30    
   \   00000040   0x78 0x25          DC8 78H, 25H, 78H, 0DH, 0AH, 0
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {115, 101, 110, 115, 111, 114, 0, 0_1`:
   \   00000000   0x73 0x65          DC8 115, 101, 110, 115, 111, 114, 0, 0
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: sink send many...">`:
   \   00000000   0x45 0x56          DC8 45H, 56H, 45H, 4EH, 54H, 3AH, 20H, 73H
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \   00000008   0x69 0x6E          DC8 69H, 6EH, 6BH, 20H, 73H, 65H, 6EH, 64H
   \              0x6B 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \   00000010   0x20 0x6D          DC8 20H, 6DH, 61H, 6EH, 79H, 2DH, 74H, 6FH
   \              0x61 0x6E    
   \              0x79 0x2D    
   \              0x74 0x6F    
   \   00000018   0x2D 0x6F          DC8 2DH, 6FH, 6EH, 65H, 20H, 72H, 6FH, 75H
   \              0x6E 0x65    
   \              0x20 0x72    
   \              0x6F 0x75    
   \   00000020   0x74 0x65          DC8 74H, 65H, 20H, 72H, 65H, 71H, 75H, 65H
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \   00000028   0x73 0x74          DC8 73H, 74H, 2CH, 20H, 73H, 74H, 61H, 74H
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \   00000030   0x75 0x73          DC8 75H, 73H, 20H, 30H, 78H, 25H, 78H, 0DH
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \   00000038   0x0A 0x00          DC8 0AH, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: sink automatic...">`:
   \   00000000   0x45 0x56          DC8 45H, 56H, 45H, 4EH, 54H, 3AH, 20H, 73H
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \   00000008   0x69 0x6E          DC8 69H, 6EH, 6BH, 20H, 61H, 75H, 74H, 6FH
   \              0x6B 0x20    
   \              0x61 0x75    
   \              0x74 0x6F    
   \   00000010   0x6D 0x61          DC8 6DH, 61H, 74H, 69H, 63H, 61H, 6CH, 6CH
   \              0x74 0x69    
   \              0x63 0x61    
   \              0x6C 0x6C    
   \   00000018   0x79 0x20          DC8 79H, 20H, 61H, 64H, 76H, 65H, 72H, 74H
   \              0x61 0x64    
   \              0x76 0x65    
   \              0x72 0x74    
   \   00000020   0x69 0x73          DC8 69H, 73H, 69H, 6EH, 67H, 20H, 74H, 6FH
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \   00000028   0x20 0x66          DC8 20H, 66H, 69H, 6EH, 64H, 20H, 73H, 65H
   \              0x69 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x73          DC8 6EH, 73H, 6FH, 72H, 73H, 0DH, 0AH, 0
   \              0x6F 0x72    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "keyswitch: sending sw...">`:
   \   00000000   0x6B 0x65          DC8 6BH, 65H, 79H, 73H, 77H, 69H, 74H, 63H
   \              0x79 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \   00000008   0x68 0x3A          DC8 68H, 3AH, 20H, 73H, 65H, 6EH, 64H, 69H
   \              0x20 0x73    
   \              0x65 0x6E    
   \              0x64 0x69    
   \   00000010   0x6E 0x67          DC8 6EH, 67H, 20H, 73H, 77H, 69H, 74H, 63H
   \              0x20 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \   00000018   0x68 0x20          DC8 68H, 20H, 6EH, 65H, 74H, 77H, 6FH, 72H
   \              0x6E 0x65    
   \              0x74 0x77    
   \              0x6F 0x72    
   \   00000020   0x6B 0x20          DC8 6BH, 20H, 6BH, 65H, 79H, 20H, 63H, 6FH
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x63 0x6F    
   \   00000028   0x6D 0x6D          DC8 6DH, 6DH, 61H, 6EH, 64H, 2CH, 20H, 73H
   \              0x61 0x6E    
   \              0x64 0x2C    
   \              0x20 0x73    
   \   00000030   0x74 0x61          DC8 74H, 61H, 74H, 75H, 73H, 20H, 25H, 78H
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x25 0x78    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: too long since...">`:
   \   00000000   0x45 0x56          DC8 "EVENT: too long since last heard, "
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x6C    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x73 0x69    
   \              0x6E 0x63    
   \              0x65 0x20    
   \              0x6C 0x61    
   \              0x73 0x74    
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x72 0x64    
   \              0x2C 0x20    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "deleting address tabl...">`:
   \   00000000   0x64 0x65          DC8 "deleting address table index %x, status %x\015\012"
   \              0x6C 0x65    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x20 0x74    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x69    
   \              0x6E 0x64    
   \              0x65 0x78    
   \              0x20 0x25    
   \              0x78 0x2C    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "BUTTON0: turn permit ...">`:
   \   00000000   0x42 0x55          DC8 "BUTTON0: turn permit join ON for 60 seconds\015\012"
   \              0x54 0x54    
   \              0x4F 0x4E    
   \              0x30 0x3A    
   \              0x20 0x74    
   \              0x75 0x72    
   \              0x6E 0x20    
   \              0x70 0x65    
   \              0x72 0x6D    
   \              0x69 0x74    
   \              0x20 0x6A    
   \              0x6F 0x69    
   \              0x6E 0x20    
   \              0x4F 0x4E    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x36    
   \              0x30 0x20    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "BUTTON1: leave networ...">`:
   \   00000000   0x42 0x55          DC8 "BUTTON1: leave network status 0x%x\015\012"
   \              0x54 0x54    
   \              0x4F 0x4E    
   \              0x31 0x3A    
   \              0x20 0x6C    
   \              0x65 0x61    
   \              0x76 0x65    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: setting multic...">`:
   \   00000000   0x45 0x56          DC8 "EVENT: setting multicast table entry\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x6D    
   \              0x75 0x6C    
   \              0x74 0x69    
   \              0x63 0x61    
   \              0x73 0x74    
   \              0x20 0x74    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x65    
   \              0x6E 0x74    
   \              0x72 0x79    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {104, 101, 108, 108, 111}>`:
   \   00000000   0x68 0x65          DC8 104, 101, 108, 108, 111, 0, 0, 0
   \              0x6C 0x6C    
   \              0x6F 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX ERROR [multicast h...">`:
   \   00000000   0x54 0x58          DC8 "TX ERROR [multicast hello], OUT OF BUFFERS\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x20 0x5B    
   \              0x6D 0x75    
   \              0x6C 0x74    
   \              0x69 0x63    
   \              0x61 0x73    
   \              0x74 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x5D    
   \              0x2C 0x20    
   \              0x4F 0x55    
   \              0x54 0x20    
   \              0x4F 0x46    
   \              0x20 0x42    
   \              0x55 0x46    
   \              0x46 0x45    
   \              0x52 0x53    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX [multicast hello],...">`:
   \   00000000   0x54 0x58          DC8 "TX [multicast hello], status 0x%x\015\012"
   \              0x20 0x5B    
   \              0x6D 0x75    
   \              0x6C 0x74    
   \              0x69 0x63    
   \              0x61 0x73    
   \              0x74 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x5D    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX ERROR [sink advert...">`:
   \   00000000   0x54 0x58          DC8 "TX ERROR [sink advertise], OUT OF BUFFERS\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x61    
   \              0x64 0x76    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x73 0x65    
   \              0x5D 0x2C    
   \              0x20 0x4F    
   \              0x55 0x54    
   \              0x20 0x4F    
   \              0x46 0x20    
   \              0x42 0x55    
   \              0x46 0x46    
   \              0x45 0x52    
   \              0x53 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX [sink advertise], ...">`:
   \   00000000   0x54 0x58          DC8 "TX [sink advertise], status 0x%x\015\012"
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x61    
   \              0x64 0x76    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x73 0x65    
   \              0x5D 0x2C    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "receive duplicate mes...">`:
   \   00000000   0x72 0x65          DC8 "receive duplicate message from "
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x20    
   \              0x64 0x75    
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WARNING: no more free...">`:
   \   00000000   0x57 0x41          DC8 "WARNING: no more free address table entries\015\012"
   \              0x52 0x4E    
   \              0x49 0x4E    
   \              0x47 0x3A    
   \              0x20 0x6E    
   \              0x6F 0x20    
   \              0x6D 0x6F    
   \              0x72 0x65    
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x65 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x74 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x65 0x6E    
   \              0x74 0x72    
   \              0x69 0x65    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX ERROR [sink ready]...">`:
   \   00000000   0x54 0x58          DC8 54H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000008   0x20 0x5B          DC8 20H, 5BH, 73H, 69H, 6EH, 6BH, 20H, 72H
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x72    
   \   00000010   0x65 0x61          DC8 65H, 61H, 64H, 79H, 5DH, 2CH, 20H, 73H
   \              0x64 0x79    
   \              0x5D 0x2C    
   \              0x20 0x73    
   \   00000018   0x65 0x74          DC8 65H, 74H, 20H, 72H, 65H, 6DH, 6FH, 74H
   \              0x20 0x72    
   \              0x65 0x6D    
   \              0x6F 0x74    
   \   00000020   0x65 0x20          DC8 65H, 20H, 45H, 55H, 49H, 36H, 34H, 20H
   \              0x45 0x55    
   \              0x49 0x36    
   \              0x34 0x20    
   \   00000028   0x66 0x61          DC8 66H, 61H, 69H, 6CH, 75H, 72H, 65H, 2CH
   \              0x69 0x6C    
   \              0x75 0x72    
   \              0x65 0x2C    
   \   00000030   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 75H, 73H, 20H
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \   00000038   0x30 0x78          DC8 30H, 78H, 25H, 78H, 0DH, 0AH, 0
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: sink set addre...">`:
   \   00000000   0x45 0x56          DC8 "EVENT: sink set address table entry %x to node ["
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x74 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x65 0x6E    
   \              0x74 0x72    
   \              0x79 0x20    
   \              0x25 0x78    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x20 0x5B    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX ERROR [sink ready]...">_1`:
   \   00000000   0x54 0x58          DC8 "TX ERROR [sink ready], OUT OF BUFFERS\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x5D 0x2C    
   \              0x20 0x4F    
   \              0x55 0x54    
   \              0x20 0x4F    
   \              0x46 0x20    
   \              0x42 0x55    
   \              0x46 0x46    
   \              0x45 0x52    
   \              0x53 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX [sink ready], stat...">`:
   \   00000000   0x54 0x58          DC8 "TX [sink ready], status:0x%x\015\012"
   \              0x20 0x5B    
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x5D 0x2C    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "keyswitch: generating...">`:
   \   00000000   0x6B 0x65          DC8 "keyswitch: generating new key\015\012"
   \              0x79 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \              0x68 0x3A    
   \              0x20 0x67    
   \              0x65 0x6E    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6E 0x65    
   \              0x77 0x20    
   \              0x6B 0x65    
   \              0x79 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "keyswitch: key gen FA...">`:
   \   00000000   0x6B 0x65          DC8 "keyswitch: key gen FAILED!\015\012"
   \              0x79 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \              0x68 0x3A    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x67    
   \              0x65 0x6E    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "keyswitch: new key: ">`:
   \   00000000   0x6B 0x65          DC8 "keyswitch: new key: "
   \              0x79 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \              0x68 0x3A    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "keyswitch: bcast new ...">`:
   \   00000000   0x6B 0x65          DC8 "keyswitch: bcast new key status %x\015\012"
   \              0x79 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \              0x68 0x3A    
   \              0x20 0x62    
   \              0x63 0x61    
   \              0x73 0x74    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "keyswitch: waiting 30...">`:
   \   00000000   0x6B 0x65          DC8 6BH, 65H, 79H, 73H, 77H, 69H, 74H, 63H
   \              0x79 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \   00000008   0x68 0x3A          DC8 68H, 3AH, 20H, 77H, 61H, 69H, 74H, 69H
   \              0x20 0x77    
   \              0x61 0x69    
   \              0x74 0x69    
   \   00000010   0x6E 0x67          DC8 6EH, 67H, 20H, 33H, 30H, 20H, 73H, 65H
   \              0x20 0x33    
   \              0x30 0x20    
   \              0x73 0x65    
   \   00000018   0x63 0x6F          DC8 63H, 6FH, 6EH, 64H, 73H, 20H, 74H, 6FH
   \              0x6E 0x64    
   \              0x73 0x20    
   \              0x74 0x6F    
   \   00000020   0x20 0x73          DC8 20H, 73H, 65H, 6EH, 64H, 20H, 6BH, 65H
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x6B 0x65    
   \   00000028   0x79 0x20          DC8 79H, 20H, 73H, 77H, 69H, 74H, 63H, 68H
   \              0x73 0x77    
   \              0x69 0x74    
   \              0x63 0x68    
   \   00000030   0x20 0x63          DC8 20H, 63H, 6FH, 6DH, 6DH, 61H, 6EH, 64H
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: this status co...">`:
   \   00000000   0x45 0x52          DC8 45H, 52H, 52H, 4FH, 52H, 3AH, 20H, 74H
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x74    
   \   00000008   0x68 0x69          DC8 68H, 69H, 73H, 20H, 73H, 74H, 61H, 74H
   \              0x73 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \   00000010   0x75 0x73          DC8 75H, 73H, 20H, 63H, 6FH, 75H, 6CH, 64H
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6C 0x64    
   \   00000018   0x20 0x6D          DC8 20H, 6DH, 65H, 61H, 6EH, 20H, 74H, 68H
   \              0x65 0x61    
   \              0x6E 0x20    
   \              0x74 0x68    
   \   00000020   0x61 0x74          DC8 61H, 74H, 20H, 74H, 68H, 65H, 20H, 6BH
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x6B    
   \   00000028   0x65 0x79          DC8 65H, 79H, 20H, 75H, 70H, 64H, 61H, 74H
   \              0x20 0x75    
   \              0x70 0x64    
   \              0x61 0x74    
   \   00000030   0x65 0x20          DC8 65H, 20H, 77H, 61H, 73H, 20H, 73H, 65H
   \              0x77 0x61    
   \              0x73 0x20    
   \              0x73 0x65    
   \   00000038   0x6E 0x74          DC8 6EH, 74H, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       out but that t...">`:
   \   00000000   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 6FH
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x6F    
   \   00000008   0x75 0x74          DC8 75H, 74H, 20H, 62H, 75H, 74H, 20H, 74H
   \              0x20 0x62    
   \              0x75 0x74    
   \              0x20 0x74    
   \   00000010   0x68 0x61          DC8 68H, 61H, 74H, 20H, 74H, 68H, 65H, 20H
   \              0x74 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \   00000018   0x73 0x77          DC8 73H, 77H, 69H, 74H, 63H, 68H, 20H, 6BH
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x20 0x6B    
   \   00000020   0x65 0x79          DC8 65H, 79H, 20H, 77H, 61H, 73H, 6EH, 74H
   \              0x20 0x77    
   \              0x61 0x73    
   \              0x6E 0x74    
   \   00000028   0x20 0x73          DC8 20H, 73H, 65H, 6EH, 74H, 20H, 6FH, 75H
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6F 0x75    
   \   00000030   0x74 0x2E          DC8 74H, 2EH, 20H, 55H, 73H, 65H, 20H, 74H
   \              0x20 0x55    
   \              0x73 0x65    
   \              0x20 0x74    
   \   00000038   0x68 0x65          DC8 68H, 65H, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       command \\"&\\" to...">`:
   \   00000000   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 63H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x63    
   \   00000008   0x6F 0x6D          DC8 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H, 22H
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x22    
   \   00000010   0x26 0x22          DC8 26H, 22H, 20H, 74H, 6FH, 20H, 73H, 65H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x73 0x65    
   \   00000018   0x6E 0x64          DC8 6EH, 64H, 20H, 74H, 68H, 65H, 20H, 73H
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x73    
   \   00000020   0x77 0x69          DC8 77H, 69H, 74H, 63H, 68H, 20H, 6BH, 65H
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x6B 0x65    
   \   00000028   0x79 0x20          DC8 79H, 20H, 63H, 6FH, 6DH, 6DH, 61H, 6EH
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \   00000030   0x64 0x0D          DC8 64H, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EVENT: serial input, ...">`:
   \   00000000   0x45 0x56          DC8 "EVENT: serial input, force sink advertise\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x69 0x61    
   \              0x6C 0x20    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x2C    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x63 0x65    
   \              0x20 0x73    
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x61 0x64    
   \              0x76 0x65    
   \              0x72 0x74    
   \              0x69 0x73    
   \              0x65 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "starting bootloader...\\r\\n">`:
   \   00000000   0x73 0x74          DC8 "starting bootloader...\015\012"
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x72 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: no device in a...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: no device in address table at location 0\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x6E    
   \              0x6F 0x20    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x74 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x61 0x74    
   \              0x20 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x30 0x0D    
   \              0x0A 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "INFO : attempt BL\\r\\n">`:
   \   00000000   0x49 0x4E          DC8 "INFO : attempt BL\015\012"
   \              0x46 0x4F    
   \              0x20 0x3A    
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x20 0x42    
   \              0x4C 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: can\\'t bootload...">`:
   \   00000000   0x45 0x52          DC8 45H, 52H, 52H, 4FH, 52H, 3AH, 20H, 63H
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x63    
   \   00000008   0x61 0x6E          DC8 61H, 6EH, 27H, 74H, 20H, 62H, 6FH, 6FH
   \              0x27 0x74    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \   00000010   0x74 0x6C          DC8 74H, 6CH, 6FH, 61H, 64H, 20H, 64H, 65H
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x64 0x65    
   \   00000018   0x76 0x69          DC8 76H, 69H, 63H, 65H, 20H, 77H, 68H, 6FH
   \              0x63 0x65    
   \              0x20 0x77    
   \              0x68 0x6F    
   \   00000020   0x73 0x65          DC8 73H, 65H, 20H, 61H, 64H, 64H, 72H, 65H
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \   00000028   0x73 0x73          DC8 73H, 73H, 20H, 69H, 73H, 20H, 20H, 73H
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x20 0x73    
   \   00000030   0x74 0x6F          DC8 74H, 6FH, 72H, 65H, 64H, 20H, 61H, 74H
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x61 0x74    
   \   00000038   0x20 0x6C          DC8 20H, 6CH, 6FH, 63H, 61H, 74H, 69H, 6FH
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \   00000040   0x6E 0x20          DC8 6EH, 20H, 30H, 20H, 6FH, 66H, 20H, 74H
   \              0x30 0x20    
   \              0x6F 0x66    
   \              0x20 0x74    
   \   00000048   0x68 0x65          DC8 68H, 65H, 20H, 61H, 64H, 64H, 72H, 65H
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \   00000050   0x73 0x73          DC8 73H, 73H, 20H, 74H, 61H, 62H, 6CH, 65H
   \              0x20 0x74    
   \              0x61 0x62    
   \              0x6C 0x65    
   \   00000058   0x2C 0x20          DC8 2CH, 20H, 6EH, 6FH, 74H, 20H, 6EH, 65H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x6E 0x65    
   \   00000060   0x69 0x67          DC8 69H, 67H, 68H, 62H, 6FH, 72H, 20H, 6FH
   \              0x68 0x62    
   \              0x6F 0x72    
   \              0x20 0x6F    
   \   00000068   0x72 0x20          DC8 72H, 20H, 63H, 68H, 69H, 6CH, 64H, 0DH
   \              0x63 0x68    
   \              0x69 0x6C    
   \              0x64 0x0D    
   \   00000070   0x0A 0x00          DC8 0AH, 0
   \   00000072   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: first slot in ...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: first slot in child table is empty\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x66    
   \              0x69 0x72    
   \              0x73 0x74    
   \              0x20 0x73    
   \              0x6C 0x6F    
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x20 0x63    
   \              0x68 0x69    
   \              0x6C 0x64    
   \              0x20 0x74    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x79 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Resetting node...\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Resetting node...\015\012"
   \              0x73 0x65    
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "unknown cmd\\r\\n">`:
   \   00000000   0x75 0x6E          DC8 "unknown cmd\015\012"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x63 0x6D    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nsink-node>">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012sink-node>"
   \              0x73 0x69    
   \              0x6E 0x6B    
   \              0x2D 0x6E    
   \              0x6F 0x64    
   \              0x65 0x3E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "? = help\\r\\n">`:
   \   00000000   0x3F 0x20          DC8 "? = help\015\012"
   \              0x3D 0x20    
   \              0x68 0x65    
   \              0x6C 0x70    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "i = print node info\\r\\n">`:
   \   00000000   0x69 0x20          DC8 "i = print node info\015\012"
   \              0x3D 0x20    
   \              0x70 0x72    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "k = print keys\\r\\n">`:
   \   00000000   0x6B 0x20          DC8 "k = print keys\015\012"
   \              0x3D 0x20    
   \              0x70 0x72    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x6B 0x65    
   \              0x79 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "b = bootloader\\r\\n">`:
   \   00000000   0x62 0x20          DC8 "b = bootloader\015\012"
   \              0x3D 0x20    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "l = send multicast [h...">`:
   \   00000000   0x6C 0x20          DC8 "l = send multicast [hello]\015\012"
   \              0x3D 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x20 0x6D    
   \              0x75 0x6C    
   \              0x74 0x69    
   \              0x63 0x61    
   \              0x73 0x74    
   \              0x20 0x5B    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x5D    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "t = play tune\\r\\n">`:
   \   00000000   0x74 0x20          DC8 "t = play tune\015\012"
   \              0x3D 0x20    
   \              0x70 0x6C    
   \              0x61 0x79    
   \              0x20 0x74    
   \              0x75 0x6E    
   \              0x65 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "a = print address tab...">`:
   \   00000000   0x61 0x20          DC8 "a = print address table\015\012"
   \              0x3D 0x20    
   \              0x70 0x72    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x74 0x61    
   \              0x62 0x6C    
   \              0x65 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "m = print multicast t...">`:
   \   00000000   0x6D 0x20          DC8 "m = print multicast table\015\012"
   \              0x3D 0x20    
   \              0x70 0x72    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x6D 0x75    
   \              0x6C 0x74    
   \              0x69 0x63    
   \              0x61 0x73    
   \              0x74 0x20    
   \              0x74 0x61    
   \              0x62 0x6C    
   \              0x65 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "f = send sink adverti...">`:
   \   00000000   0x66 0x20          DC8 "f = send sink advertisement\015\012"
   \              0x3D 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x20 0x73    
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x61 0x64    
   \              0x76 0x65    
   \              0x72 0x74    
   \              0x69 0x73    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "0 = button 0: turn al...">`:
   \   00000000   0x30 0x20          DC8 "0 = button 0: turn allow join ON for 60 sec\015\012"
   \              0x3D 0x20    
   \              0x62 0x75    
   \              0x74 0x74    
   \              0x6F 0x6E    
   \              0x20 0x30    
   \              0x3A 0x20    
   \              0x74 0x75    
   \              0x72 0x6E    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x77    
   \              0x20 0x6A    
   \              0x6F 0x69    
   \              0x6E 0x20    
   \              0x4F 0x4E    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x36    
   \              0x30 0x20    
   \              0x73 0x65    
   \              0x63 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1 = button 1: leave Z...">`:
   \   00000000   0x31 0x20          DC8 "1 = button 1: leave ZigBee network\015\012"
   \              0x3D 0x20    
   \              0x62 0x75    
   \              0x74 0x74    
   \              0x6F 0x6E    
   \              0x20 0x31    
   \              0x3A 0x20    
   \              0x6C 0x65    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x5A 0x69    
   \              0x67 0x42    
   \              0x65 0x65    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "e = reset node\\r\\n">`:
   \   00000000   0x65 0x20          DC8 "e = reset node\015\012"
   \              0x3D 0x20    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "x = print node tokens\\r\\n">`:
   \   00000000   0x78 0x20          DC8 "x = print node tokens\015\012"
   \              0x3D 0x20    
   \              0x70 0x72    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x20 0x74    
   \              0x6F 0x6B    
   \              0x65 0x6E    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "c = print child table\\r\\n">`:
   \   00000000   0x63 0x20          DC8 "c = print child table\015\012"
   \              0x3D 0x20    
   \              0x70 0x72    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x63 0x68    
   \              0x69 0x6C    
   \              0x64 0x20    
   \              0x74 0x61    
   \              0x62 0x6C    
   \              0x65 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "j = print JIT storage...">`:
   \   00000000   0x6A 0x20          DC8 "j = print JIT storage status\015\012"
   \              0x3D 0x20    
   \              0x70 0x72    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x4A 0x49    
   \              0x54 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "B = attempt to bootlo...">`:
   \   00000000   0x42 0x20          DC8 42H, 20H, 3DH, 20H, 61H, 74H, 74H, 65H
   \              0x3D 0x20    
   \              0x61 0x74    
   \              0x74 0x65    
   \   00000008   0x6D 0x70          DC8 6DH, 70H, 74H, 20H, 74H, 6FH, 20H, 62H
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x62    
   \   00000010   0x6F 0x6F          DC8 6FH, 6FH, 74H, 6CH, 6FH, 61H, 64H, 20H
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \   00000018   0x74 0x68          DC8 74H, 68H, 65H, 20H, 64H, 65H, 76H, 69H
   \              0x65 0x20    
   \              0x64 0x65    
   \              0x76 0x69    
   \   00000020   0x63 0x65          DC8 63H, 65H, 20H, 77H, 68H, 6FH, 73H, 65H
   \              0x20 0x77    
   \              0x68 0x6F    
   \              0x73 0x65    
   \   00000028   0x20 0x45          DC8 20H, 45H, 55H, 49H, 20H, 69H, 73H, 20H
   \              0x55 0x49    
   \              0x20 0x69    
   \              0x73 0x20    
   \   00000030   0x73 0x74          DC8 73H, 74H, 6FH, 72H, 65H, 64H, 20H, 61H
   \              0x6F 0x72    
   \              0x65 0x64    
   \              0x20 0x61    
   \   00000038   0x74 0x20          DC8 74H, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000040   0x6F 0x6E          DC8 6FH, 6EH, 20H, 30H, 20H, 6FH, 66H, 20H
   \              0x20 0x30    
   \              0x20 0x6F    
   \              0x66 0x20    
   \   00000048   0x74 0x68          DC8 74H, 68H, 65H, 20H, 61H, 64H, 64H, 72H
   \              0x65 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \   00000050   0x65 0x73          DC8 65H, 73H, 73H, 20H, 74H, 61H, 62H, 6CH
   \              0x73 0x20    
   \              0x74 0x61    
   \              0x62 0x6C    
   \   00000058   0x65 0x0D          DC8 65H, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "C = attempt to bootlo...">`:
   \   00000000   0x43 0x20          DC8 43H, 20H, 3DH, 20H, 61H, 74H, 74H, 65H
   \              0x3D 0x20    
   \              0x61 0x74    
   \              0x74 0x65    
   \   00000008   0x6D 0x70          DC8 6DH, 70H, 74H, 20H, 74H, 6FH, 20H, 62H
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x62    
   \   00000010   0x6F 0x6F          DC8 6FH, 6FH, 74H, 6CH, 6FH, 61H, 64H, 20H
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \   00000018   0x74 0x68          DC8 74H, 68H, 65H, 20H, 66H, 69H, 72H, 73H
   \              0x65 0x20    
   \              0x66 0x69    
   \              0x72 0x73    
   \   00000020   0x74 0x20          DC8 74H, 20H, 64H, 65H, 76H, 69H, 63H, 65H
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \   00000028   0x20 0x69          DC8 20H, 69H, 6EH, 20H, 74H, 68H, 65H, 20H
   \              0x6E 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \   00000030   0x63 0x68          DC8 63H, 68H, 69H, 6CH, 64H, 20H, 74H, 61H
   \              0x69 0x6C    
   \              0x64 0x20    
   \              0x74 0x61    
   \   00000038   0x62 0x6C          DC8 62H, 6CH, 65H, 0DH, 0AH, 0
   \              0x65 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Q = send out a BOOTLO...">`:
   \   00000000   0x51 0x20          DC8 "Q = send out a BOOTLOADER_QUERY message\015\012"
   \              0x3D 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x20 0x61    
   \              0x20 0x42    
   \              0x4F 0x4F    
   \              0x54 0x4C    
   \              0x4F 0x41    
   \              0x44 0x45    
   \              0x52 0x5F    
   \              0x51 0x55    
   \              0x45 0x52    
   \              0x59 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x0D    
   \              0x0A 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "* = switch the networ...">`:
   \   00000000   0x2A 0x20          DC8 2AH, 20H, 3DH, 20H, 73H, 77H, 69H, 74H
   \              0x3D 0x20    
   \              0x73 0x77    
   \              0x69 0x74    
   \   00000008   0x63 0x68          DC8 63H, 68H, 20H, 74H, 68H, 65H, 20H, 6EH
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x6E    
   \   00000010   0x65 0x74          DC8 65H, 74H, 77H, 6FH, 72H, 6BH, 20H, 6BH
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x20 0x6B    
   \   00000018   0x65 0x79          DC8 65H, 79H, 3AH, 20H, 73H, 65H, 6EH, 64H
   \              0x3A 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \   00000020   0x20 0x74          DC8 20H, 74H, 68H, 65H, 20H, 6BH, 65H, 79H
   \              0x68 0x65    
   \              0x20 0x6B    
   \              0x65 0x79    
   \   00000028   0x20 0x66          DC8 20H, 66H, 6FH, 6CH, 6CH, 6FH, 77H, 65H
   \              0x6F 0x6C    
   \              0x6C 0x6F    
   \              0x77 0x65    
   \   00000030   0x64 0x20          DC8 64H, 20H, 62H, 79H, 20H, 61H, 20H, 73H
   \              0x62 0x79    
   \              0x20 0x61    
   \              0x20 0x73    
   \   00000038   0x77 0x69          DC8 77H, 69H, 74H, 63H, 68H, 0DH, 0AH, 0
   \              0x74 0x63    
   \              0x68 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    key command 30 se...">`:
   \   00000000   0x20 0x20          DC8 "    key command 30 seconds later\015\012"
   \              0x20 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x33 0x30    
   \              0x20 0x73    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x20 0x6C    
   \              0x61 0x74    
   \              0x65 0x72    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "& = send a switch key...">`:
   \   00000000   0x26 0x20          DC8 26H, 20H, 3DH, 20H, 73H, 65H, 6EH, 64H
   \              0x3D 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \   00000008   0x20 0x61          DC8 20H, 61H, 20H, 73H, 77H, 69H, 74H, 63H
   \              0x20 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \   00000010   0x68 0x20          DC8 68H, 20H, 6BH, 65H, 79H, 20H, 63H, 6FH
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x63 0x6F    
   \   00000018   0x6D 0x6D          DC8 6DH, 6DH, 61H, 6EH, 64H, 2EH, 20H, 54H
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x20 0x54    
   \   00000020   0x68 0x69          DC8 68H, 69H, 73H, 20H, 69H, 73H, 20H, 6EH
   \              0x73 0x20    
   \              0x69 0x73    
   \              0x20 0x6E    
   \   00000028   0x65 0x65          DC8 65H, 65H, 64H, 65H, 64H, 20H, 6FH, 6EH
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x6F 0x6E    
   \   00000030   0x6C 0x79          DC8 6CH, 79H, 20H, 69H, 66H, 20H, 74H, 68H
   \              0x20 0x69    
   \              0x66 0x20    
   \              0x74 0x68    
   \   00000038   0x65 0x20          DC8 65H, 20H, 64H, 65H, 76H, 69H, 63H, 65H
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \   00000040   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000043   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    sent a new key an...">`:
   \   00000000   0x20 0x20          DC8 20H, 20H, 20H, 20H, 73H, 65H, 6EH, 74H
   \              0x20 0x20    
   \              0x73 0x65    
   \              0x6E 0x74    
   \   00000008   0x20 0x61          DC8 20H, 61H, 20H, 6EH, 65H, 77H, 20H, 6BH
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x6B    
   \   00000010   0x65 0x79          DC8 65H, 79H, 20H, 61H, 6EH, 64H, 20H, 74H
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x74    
   \   00000018   0x68 0x65          DC8 68H, 65H, 6EH, 20H, 72H, 65H, 73H, 65H
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x73 0x65    
   \   00000020   0x74 0x20          DC8 74H, 20H, 62H, 65H, 66H, 6FH, 72H, 65H
   \              0x62 0x65    
   \              0x66 0x6F    
   \              0x72 0x65    
   \   00000028   0x20 0x69          DC8 20H, 69H, 74H, 20H, 77H, 61H, 73H, 20H
   \              0x74 0x20    
   \              0x77 0x61    
   \              0x73 0x20    
   \   00000030   0x61 0x62          DC8 61H, 62H, 6CH, 65H, 20H, 74H, 6FH, 20H
   \              0x6C 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000038   0x73 0x65          DC8 73H, 65H, 6EH, 64H, 20H, 74H, 68H, 65H
   \              0x6E 0x64    
   \              0x20 0x74    
   \              0x68 0x65    
   \   00000040   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000043   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    switch key command\\r\\n">`:
   \   00000000   0x20 0x20          DC8 "    switch key command\015\012"
   \              0x20 0x20    
   \              0x73 0x77    
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1391          
   1392          
   1393          // End utility functions
   1394          // *******************************************************************
   1395          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  addMulticastGroup
              0 -> emberSerialPrintf
       32  applicationTick
             32 -> bootloadUtilTick
             32 -> emSendNetworkKeySwitch
             32 -> emberLeaveNetwork
             32 -> emberNetworkState
             32 -> emberPermitJoining
             32 -> emberSendManyToOneRouteRequest
              0 -> emberSerialPrintf
             32 -> emberSerialPrintf
             32 -> emberSetAddressTableRemoteNodeId
             32 -> halCommonGetInt16uMillisecondTick
             32 -> halToggleLed
             32 -> sinkAdvertise
             32 -> trustCenterIsPermittingJoins
             32 -> trustCenterPermitJoins
        0  bootloadUtilLaunchRequestHandler
       16  bootloadUtilQueryResponseHandler
             16 -> emberSerialPrintf
              0 -> emberSerialWaitSend
             16 -> printEUI64
       48  emberIncomingMessageHandler
             48 -> appAddJitForAllChildren
             48 -> emReallyCopyToLinkedBuffers
             48 -> emberDebugPrintf
             48 -> emberGetLinkedBuffersByte
             48 -> emberGetSender
             48 -> emberSerialPrintf
             48 -> findAddressTableLocation
             48 -> halCommonMemCompare
             48 -> handleSensorSelectSink
             48 -> handleSinkQuery
             48 -> printEUI64
        0  emberJoinableNetworkFoundHandler
        0  emberMessageSentHandler
        0  emberScanErrorHandler
              0 -> emberSerialGuaranteedPrintf
       32  emberStackStatusHandler
             32 -> addMulticastGroup
             32 -> emberGetNetworkParameters
             32 -> emberSerialPrintf
             32 -> emberSerialWaitSend
             32 -> printExtendedPanId
       48  emberUnusedPanIdFoundHandler
             48 -> emberFormNetwork
             48 -> halCommonMemCopy
       24  findAddressTableLocation
             24 -> emberGetAddressTableRemoteEui64
             24 -> emberGetAddressTableRemoteNodeId
             24 -> halCommonMemCompare
        8  findFreeAddressTableLocation
              8 -> emberGetAddressTableRemoteNodeId
        0  halButtonIsr
       24  handleSensorSelectSink
             24 -> emReleaseMessageBuffer
             24 -> emberFillLinkedBuffers
             24 -> emberSendReply
              0 -> emberSerialPrintf
             24 -> emberSerialPrintf
             24 -> emberSerialWaitSend
             24 -> emberSetAddressTableRemoteEui64
             24 -> emberSetAddressTableRemoteNodeId
             24 -> findAddressTableLocation
             24 -> findFreeAddressTableLocation
             24 -> halCommonMemCopy
             24 -> printEUI64
       40  main
             40 -> _enableBasePri
             40 -> applicationTick
             40 -> bootloadUtilInit
             40 -> emberFormAndJoinTick
             40 -> emberFormNetwork
             40 -> emberGetNodeType
             40 -> emberInit
             40 -> emberNetworkInit
             40 -> emberSerialBufferTick
             40 -> emberSerialGuaranteedPrintf
             40 -> emberSerialInit
             40 -> emberSerialPrintf
             40 -> emberSerialWaitSend
             40 -> emberTick
             40 -> halCommonMemCopy
             40 -> halGetResetString
             40 -> halInit
             40 -> halInternalAssertFailed
             40 -> halInternalResetWatchDog
             40 -> halToggleLed
             40 -> printEUI64
             40 -> printExtendedPanId
             40 -> processSerialInput
             40 -> securityAddressCacheInit
             40 -> sensorCommonSetupSecurity
             40 -> sinkInit
        8  printHelp
              8 -> emberSerialPrintf
              0 -> emberSerialWaitSend
              8 -> emberSerialWaitSend
       24  processSerialInput
             24 -> bootloadMyNeighborRouter
             24 -> bootloadMySleepyChild
             24 -> bootloadUtilSendQuery
             24 -> emSendNetworkKeySwitch
             24 -> emberGetAddressTableRemoteEui64
             24 -> emberGetAddressTableRemoteNodeId
             24 -> emberGetChildData
             24 -> emberSerialGuaranteedPrintf
             24 -> emberSerialPrintf
             24 -> emberSerialReadByte
             24 -> emberSerialWaitSend
             24 -> halLaunchStandaloneBootloader
             24 -> halPlayTune_P
             24 -> halReboot
             24 -> isMyChild
             24 -> isMyNeighbor
             24 -> jitMessageStatus
             24 -> printAddressTable
             24 -> printChildTable
             24 -> printHelp
             24 -> printMulticastTable
             24 -> printNodeInfo
             24 -> printTokens
             24 -> sendMulticastHello
             24 -> sensorCommonPrintKeys
             24 -> sinkAppSwitchNetworkKey
       32  sendMulticastHello
             32 -> emReleaseMessageBuffer
             32 -> emberFillLinkedBuffers
             32 -> emberSendMulticast
             32 -> emberSerialPrintf
             32 -> halCommonMemCopy
       24  sinkAdvertise
             24 -> emReleaseMessageBuffer
             24 -> emberFillLinkedBuffers
             24 -> emberGetNodeId
             24 -> emberSendMulticast
             24 -> emberSerialPrintf
             24 -> emberStoreLowHighInt16u
             24 -> halCommonMemCopy
       24  sinkAppSwitchNetworkKey
             24 -> emberBroadcastNextNetworkKey
             24 -> emberGenerateRandomKey
             24 -> emberSerialPrintf
             24 -> emberSerialWaitSend
             24 -> sensorCommonPrint16ByteKey
        0  sinkInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      52  ?<Constant "       command \"&\" to...">
      64  ?<Constant "       out but that t...">
      36  ?<Constant "     : channel 0x%x, ...">
      44  ?<Constant "     : using channel ...">
      36  ?<Constant "    key command 30 se...">
      68  ?<Constant "    sent a new key an...">
      28  ?<Constant "    switch key command\r\n">
      16  ?<Constant " running %p\r\n">
      68  ?<Constant "& = send a switch key...">
      64  ?<Constant "* = switch the networ...">
      48  ?<Constant "0 = button 0: turn al...">
      40  ?<Constant "1 = button 1: leave Z...">
      16  ?<Constant "; ignoring\r\n">
      28  ?<Constant "; len 0x%x / data 0x%...">
      32  ?<Constant "; len 0x%x / data NO ...">
      24  ?<Constant "; processing message\r\n">
      24  ?<Constant "; this is an error]\r\n">
      12  ?<Constant "? = help\r\n">
      92  ?<Constant "B = attempt to bootlo...">
      48  ?<Constant "BUTTON0: turn permit ...">
      40  ?<Constant "BUTTON1: leave networ...">
      36  ?<Constant "Build on: 21:36:48 Ju...">
      64  ?<Constant "C = attempt to bootlo...">
     116  ?<Constant "ERROR: can\'t bootload...">
      24  ?<Constant "ERROR: emberInit 0x%x\r\n">
      44  ?<Constant "ERROR: first slot in ...">
      40  ?<Constant "ERROR: from emberForm...">
      52  ?<Constant "ERROR: no device in a...">
      64  ?<Constant "ERROR: this status co...">
      72  ?<Constant "EVENT: could not find...">
      28  ?<Constant "EVENT: emberInit pass...">
      44  ?<Constant "EVENT: serial input, ...">
      40  ?<Constant "EVENT: setting multic...">
      56  ?<Constant "EVENT: sink automatic...">
      60  ?<Constant "EVENT: sink send many...">
      52  ?<Constant "EVENT: sink set addre...">
      44  ?<Constant "EVENT: stackStatus no...">
      44  ?<Constant "EVENT: stackStatus no...">_1
      44  ?<Constant "EVENT: stackStatus no...">_2
      32  ?<Constant "EVENT: stackStatus no...">_3
      36  ?<Constant "EVENT: too long since...">
      36  ?<Constant "FORM : attempting to ...">
      44  ?<Constant "FORM : network starte...">
      28  ?<Constant "FORM : new network fo...">
      40  ?<Constant "FORM : new network fo...">_1
      20  ?<Constant "INFO : attempt BL\r\n">
      44  ?<Constant "Q = send out a BOOTLO...">
      28  ?<Constant "RX [BL QUERY RESP] eui: ">
      20  ?<Constant "RX [DATA] from: ">
      48  ?<Constant "RX [bad packet] clust...">
      28  ?<Constant "RX [multicast hello] ...">
      32  ?<Constant "RX [sensor select sin...">
      28  ?<Constant "RX [sink advertise] f...">
      24  ?<Constant "RX [sink query] from: ">
      24  ?<Constant "RX [sink ready] from: ">
      28  ?<Constant "RX [unknown (%2x)] fr...">
      40  ?<Constant "RX too short [sink ad...">
      20  ?<Constant "Resetting node...\r\n">
      32  ?<Constant "Sink received data: 0...">
      48  ?<Constant "TX ERROR [multicast h...">
      44  ?<Constant "TX ERROR [sink advert...">
      64  ?<Constant "TX ERROR [sink ready]...">
      40  ?<Constant "TX ERROR [sink ready]...">_1
      36  ?<Constant "TX [multicast hello],...">
      36  ?<Constant "TX [sink advertise], ...">
      32  ?<Constant "TX [sink ready], stat...">
      48  ?<Constant "WARNING: no more free...">
       4  ?<Constant "\r\n">
      20  ?<Constant "\r\nINIT : sink app ">
      16  ?<Constant "\r\nsink-node>">
       4  ?<Constant "]\r\n">
      28  ?<Constant "a = print address tab...">
      20  ?<Constant "b = bootloader\r\n">
      12  ?<Constant "bootloader">
      24  ?<Constant "c = print child table\r\n">
      48  ?<Constant "deleting address tabl...">
      20  ?<Constant "e = reset node\r\n">
      32  ?<Constant "f = send sink adverti...">
      24  ?<Constant "i = print node info\r\n">
      32  ?<Constant "j = print JIT storage...">
      20  ?<Constant "k = print keys\r\n">
      40  ?<Constant "keyswitch: bcast new ...">
      32  ?<Constant "keyswitch: generating...">
      32  ?<Constant "keyswitch: key gen FA...">
      24  ?<Constant "keyswitch: new key: ">
      60  ?<Constant "keyswitch: sending sw...">
      60  ?<Constant "keyswitch: waiting 30...">
      32  ?<Constant "l = send multicast [h...">
      28  ?<Constant "m = print multicast t...">
      32  ?<Constant "receive duplicate mes...">
      12  ?<Constant "reset: %p\r\n">
       8  ?<Constant "sink.c">
       8  ?<Constant "stack">
      28  ?<Constant "starting bootloader...\r\n">
      16  ?<Constant "t = play tune\r\n">
      16  ?<Constant "unknown cmd\r\n">
      24  ?<Constant "x = print node tokens\r\n">
       8  ?<Constant {104, 101, 108, 108, 111}>
       8  ?<Constant {115, 101, 110, 115, 111, 114, 0, 0
       8  ?<Constant {115, 101, 110, 115, 111, 114, 0, 0_1
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       4  ??DataTable105
       4  ??DataTable112
       4  ??DataTable112_1
       4  ??DataTable113
       4  ??DataTable113_1
       4  ??DataTable113_2
       4  ??DataTable113_3
       4  ??DataTable113_4
       4  ??DataTable113_5
       4  ??DataTable113_6
       8  ?Subroutine0
       6  ?Subroutine1
      10  ?Subroutine2
       8  ?Subroutine3
       8  ?Subroutine4
       6  ?Subroutine5
      18  ?Subroutine6
      40  ?Subroutine7
      10  ?Subroutine8
      26  addMulticastGroup
     284  applicationTick
       4  bootloadUtilLaunchRequestHandler
      50  bootloadUtilQueryResponseHandler
     144  buttonZeroPress
          buttonOnePress
          sendNetworkKeyUpdateTimer
          concentratorType
          timeBeforeSinkAdvertise
          lastBlinkTime
          permitJoinsTimer
          ticksSinceLastHeard
          globalBuffer
       1  emberEndpointCount
      16  emberEndpoints
     396  emberIncomingMessageHandler
       2  emberJoinableNetworkFoundHandler
       2  emberMessageSentHandler
      12  emberScanErrorHandler
     144  emberStackStatusHandler
      50  emberUnusedPanIdFoundHandler
       8  endpointDescription
      58  findAddressTableLocation
      34  findFreeAddressTableLocation
      28  halButtonIsr
     220  handleSensorSelectSink
     354  main
       1  networkFormMethod
     284  printHelp
     452  processSerialInput
      98  sendMulticastHello
      84  sinkAdvertise
     120  sinkAppSwitchNetworkKey
      22  sinkInit
      16  tune

 
   162 bytes in section .data
    16 bytes in section .rodata
 6 458 bytes in section .text
 
 6 458 bytes of CODE  memory
    16 bytes of CONST memory
   162 bytes of DATA  memory

Errors: none
Warnings: none
