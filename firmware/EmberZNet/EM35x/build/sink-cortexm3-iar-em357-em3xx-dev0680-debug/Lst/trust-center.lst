###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.4.54170/W32 for ARM     02/Jul/2013  21:36:56 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\util\ #
#                    security\trust-center.c                                  #
#    Command line =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\util\ #
#                    security\trust-center.c -D DEBUG -D                      #
#                    "BOARD_HEADER=\"hal/micro/cortexm3/em35x/board/dev0680.h #
#                    \"" -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/ia #
#                    r.h\"" -D HAL_MICRO -D CORTEXM3 -D CORTEXM3_EM357 -D     #
#                    PHY_EM3XX -D BOARD_DEV0680 -D                            #
#                    "CONFIGURATION_HEADER=\"app/sensor/sensor-configuration. #
#                    h\"" -D SINK_APP -D EMBER_SERIAL1_MODE=EMBER_SERIAL_FIFO #
#                     -D EMBER_SERIAL1_TX_QUEUE_SIZE=128 -D                   #
#                    EMBER_SERIAL1_RX_QUEUE_SIZE=16 -D EMBER_SERIAL0_DEBUG    #
#                    -D EMBER_SERIAL0_MODE=EMBER_SERIAL_FIFO -D               #
#                    EMBER_SERIAL0_TX_QUEUE_SIZE=128 -D                       #
#                    EMBER_SERIAL0_RX_QUEUE_SIZE=64 -D                        #
#                    SCAN_DEBUG_PRINT_ENABLE -D USE_BOOTLOADER_LIB -D         #
#                    "__SOURCEFILE__=\"trust-center.c\"" -lC                  #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\            #
#                    --diag_suppress Pa050 -o F:\Firmware\emberZNet\firmware\ #
#                    EmberZNet\EM35x\build\sink-cortexm3-iar-em357-em3xx-dev0 #
#                    680-debug\Obj\ --debug --endian=little --cpu=Cortex-M3   #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I F:\Firmware\emberZNet\firmware\EmberZNet\EM35x #
#                    \app\util\security\ -I F:\Firmware\emberZNet\firmware\Em #
#                    berZNet\EM35x\app\sensor\ewb-em357\..\..\..\ -I          #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\STACK\ -I                           #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\HAL\ -I                             #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\ -Ohz --use_c++_inline              #
#    List file    =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\trust-cente #
#                    r.lst                                                    #
#    Object file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Obj\trust-cente #
#                    r.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\util\security\trust-center.c
      1          // *******************************************************************
      2          //  trust-center.c
      3          //
      4          //  functions for manipulating security for Trust Center nodes using
      5          //  the commercial security library.
      6          //
      7          //  The Trust Center operates in two basic modes:  allowing joins or  
      8          //  allowing rejoins.  A Trust Center cannot know whether the device
      9          //  is joining insecurily or rejoining insecurely, so it is up to the Trust 
     10          //  Center to decide out what to do based on its internal state.
     11          //
     12          //  Copyright 2007 by Ember Corporation. All rights reserved.              *80*
     13          // *******************************************************************
     14          
     15          //------------------------------------------------------------------------------
     16          // INCLUDES
     17          
     18          #include PLATFORM_HEADER //compiler/micro specifics, types
     19          
     20          #if defined EZSP_HOST
     21            #include "stack/include/ember-types.h"
     22            #include "stack/include/error.h"
     23          
     24            #include "app/util/ezsp/ezsp-protocol.h"
     25            #include "app/util/ezsp/ezsp.h"
     26            #include "app/util/ezsp/ezsp-utils.h"
     27            #include "app/util/ezsp/serial-interface.h"
     28          
     29          #else // Stack App
     30            #include "stack/include/ember.h"
     31          #endif
     32          
     33          #include "hal/hal.h"
     34          #include "app/util/serial/serial.h"
     35          #include "app/util/security/security.h"
     36          
     37          #if !defined APP_SERIAL
     38            #define APP_SERIAL 1
     39          #endif
     40          
     41          //------------------------------------------------------------------------------
     42          // GLOBALS
     43          

   \                                 In section .data, align 1
     44          static boolean trustCenterAllowJoins = FALSE;
   \                     trustCenterAllowJoins:
   \   00000000   0x00               DC8 0
   \   00000001   0x01               DC8 1
     45          static boolean trustCenterUsePreconfiguredKey = TRUE;
     46          
     47          #if defined EZSP_HOST
     48            static boolean generateRandomKey(EmberKeyData* result);
     49          #else
     50            #define generateRandomKey(result) \
     51              (EMBER_SUCCESS == emberGenerateRandomKey(result))
     52          #endif
     53          
     54          //------------------------------------------------------------------------------
     55          // FUNCTIONS
     56          
     57          static EmberStatus permitRequestingTrustCenterLinkKey(boolean allow);
     58          
     59          //------------------------------------------------------------------------------
     60          

   \                                 In section .text, align 2, keep-with-next
     61          boolean trustCenterInit(EmberKeyData* preconfiguredKey, 
     62                                  EmberKeyData* networkKey)
     63          {
   \                     trustCenterInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x460C             MOV      R4,R1
     64            EmberInitialSecurityState state;
     65          
     66            trustCenterUsePreconfiguredKey = ( preconfiguredKey != NULL );
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xBF14             ITE      NE 
   \   0000000A   0x2101             MOVNE    R1,#+1
   \   0000000C   0x2100             MOVEQ    R1,#+0
   \   0000000E   0x....             LDR.N    R2,??DataTable6
   \   00000010   0x7051             STRB     R1,[R2, #+1]
     67          
     68            if ( trustCenterUsePreconfiguredKey ) {
   \   00000012   0x7851             LDRB     R1,[R2, #+1]
   \   00000014   0x07C9             LSLS     R1,R1,#+31
   \   00000016   0xD511             BPL.N    ??trustCenterInit_0
     69              MEMCOPY(emberKeyContents(&state.preconfiguredKey), 
     70                      preconfiguredKey,
     71                      EMBER_ENCRYPTION_KEY_SIZE);
   \   00000018   0x2210             MOVS     R2,#+16
   \   0000001A   0x4601             MOV      R1,R0
   \   0000001C   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000020   0x.... 0x....      BL       halCommonMemCopy
     72              // When using pre-configured TC link keys, devices are not allowed to
     73              // request TC link keys.  Otherwise it exposes a security hole.
     74              if ( EMBER_SUCCESS != permitRequestingTrustCenterLinkKey(FALSE)) {
   \   00000024   0x....             LDR.N    R0,??DataTable6_1
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x7001             STRB     R1,[R0, #+0]
     75                emberSerialPrintfLine(APP_SERIAL, 
     76                                      "Failed to set policy for requesting TC link keys.");
     77                return FALSE;
     78              }
     79            } else {
     80              if ( ! generateRandomKey(&(state.preconfiguredKey) )) {
     81                emberSerialPrintf(APP_SERIAL, "Failed to generate random link key.\r\n");
     82                return FALSE;
     83              }
     84            }
     85          
     86            // The network key should be randomly generated to minimize the risk
     87            // where a network key obtained from one network can be used in another.
     88            // This library supports setting a particular (not random) network key.
     89            if ( networkKey == NULL) {
   \                     ??trustCenterInit_1:
   \   0000002A   0xB9A4             CBNZ.N   R4,??trustCenterInit_2
     90              if ( ! generateRandomKey(&(state.networkKey)) ) {
   \   0000002C   0xF10D 0x0012      ADD      R0,SP,#+18
   \   00000030   0x.... 0x....      BL       emberGenerateRandomKey
   \   00000034   0xB1A8             CBZ.N    R0,??trustCenterInit_3
     91                emberSerialPrintf(APP_SERIAL, 
     92                                  "Failed to generate random NWK key.\r\n");
   \   00000036   0x.... 0x....      ADR.W    R1,`?<Constant "Failed to generate ra...">_1`
   \   0000003A   0xE007             B.N      ??trustCenterInit_4
     93                return FALSE;
     94              }
     95            } else {
   \                     ??trustCenterInit_0:
   \   0000003C   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000040   0x.... 0x....      BL       emberGenerateRandomKey
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD0F0             BEQ.N    ??trustCenterInit_1
   \   00000048   0x.... 0x....      ADR.W    R1,`?<Constant "Failed to generate ra...">`
   \                     ??trustCenterInit_4:
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x.... 0x....      BL       emberSerialPrintf
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xE012             B.N      ??trustCenterInit_5
     96              MEMCOPY(emberKeyContents(&state.networkKey), 
     97                      networkKey,EMBER_ENCRYPTION_KEY_SIZE);
   \                     ??trustCenterInit_2:
   \   00000056   0x2210             MOVS     R2,#+16
   \   00000058   0x4621             MOV      R1,R4
   \   0000005A   0xF10D 0x0012      ADD      R0,SP,#+18
   \   0000005E   0x.... 0x....      BL       halCommonMemCopy
     98            }
     99            // EMBER_HAVE_PRECONFIGURED_KEY is always set on the TC regardless of whether
    100            // the Trust Center is expecting the device to have a preconfigured key.
    101            // This is the value for the Trust Center Link Key.
    102            state.bitmask = ( EMBER_HAVE_PRECONFIGURED_KEY  
    103                              | EMBER_STANDARD_SECURITY_MODE
    104                              | EMBER_TRUST_CENTER_GLOBAL_LINK_KEY
    105                              | EMBER_HAVE_NETWORK_KEY );
   \                     ??trustCenterInit_3:
   \   00000062   0xF44F 0x7041      MOV      R0,#+772
   \   00000066   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    106            state.networkKeySequenceNumber = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xF88D 0x0022      STRB     R0,[SP, #+34]
    107          
    108            return (EMBER_SUCCESS == emberSetInitialSecurityState(&state));
   \   00000070   0xA800             ADD      R0,SP,#+0
   \   00000072   0x.... 0x....      BL       emberSetInitialSecurityState
   \   00000076   0x1E40             SUBS     R0,R0,#+1
   \   00000078   0x4180             SBCS     R0,R0,R0
   \   0000007A   0x0FC0             LSRS     R0,R0,#+31
   \                     ??trustCenterInit_5:
   \   0000007C   0xB00C             ADD      SP,SP,#+48
   \   0000007E   0xBD10             POP      {R4,PC}          ;; return
    109          }
    110          
    111          //------------------------------------------------------------------------------
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void trustCenterPermitJoins(boolean allow)
    114          {
    115            trustCenterAllowJoins = allow;
   \                     trustCenterPermitJoins:
   \   00000000   0x....             LDR.N    R1,??DataTable6
   \   00000002   0x7008             STRB     R0,[R1, #+0]
    116          
    117          #if defined EZSP_HOST
    118            ezspSetPolicy(EZSP_TRUST_CENTER_POLICY,
    119                          (allow
    120                           ? ( trustCenterUsePreconfiguredKey
    121                               ? EZSP_ALLOW_PRECONFIGURED_KEY_JOINS
    122                               : EZSP_ALLOW_JOINS )
    123                           : EZSP_ALLOW_REJOINS_ONLY));
    124          #endif
    125          
    126            if (!trustCenterUsePreconfiguredKey) {
   \   00000004   0x784A             LDRB     R2,[R1, #+1]
   \   00000006   0xB932             CBNZ.N   R2,??trustCenterPermitJoins_0
    127              permitRequestingTrustCenterLinkKey(allow);
   \   00000008   0x....             LDR.N    R1,??DataTable6_1
   \   0000000A   0xB110             CBZ.N    R0,??trustCenterPermitJoins_1
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
   \   00000010   0x4770             BX       LR
   \                     ??trustCenterPermitJoins_1:
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   \   00000014   0xE000             B.N      ??trustCenterPermitJoins_2
    128            }
    129          
    130            if ( ! trustCenterAllowJoins )
   \                     ??trustCenterPermitJoins_0:
   \   00000016   0xB920             CBNZ.N   R0,??trustCenterPermitJoins_3
    131              emberSerialPrintf(APP_SERIAL, "Trust Center no longer allowing joins.\r\n");
   \                     ??trustCenterPermitJoins_2:
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "Trust Center no longe...">`
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      B.W      emberSerialPrintf
    132          }
   \                     ??trustCenterPermitJoins_3:
   \   00000022   0x4770             BX       LR               ;; return
    133          
    134          //------------------------------------------------------------------------------
    135          

   \                                 In section .text, align 2, keep-with-next
    136          boolean trustCenterIsPermittingJoins(void)
    137          {
    138            return trustCenterAllowJoins;
   \                     trustCenterIsPermittingJoins:
   \   00000000   0x....             LDR.N    R0,??DataTable6
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    139          }
    140          
    141          //------------------------------------------------------------------------------
    142          
    143          #if !defined EZSP_HOST

   \                                 In section .text, align 2, keep-with-next
    144          EmberJoinDecision emberTrustCenterJoinHandler(EmberNodeId newNodeId,
    145                                                        EmberEUI64 newNodeEui64,
    146                                                        EmberDeviceUpdate status,
    147                                                        EmberNodeId parentOfNewNode)
    148          {
    149            if ( status == EMBER_DEVICE_LEFT ) {
   \                     emberTrustCenterJoinHandler:
   \   00000000   0x2A02             CMP      R2,#+2
   \   00000002   0xBF18             IT       NE 
   \   00000004   0x2A00             CMPNE    R2,#+0
    150              return EMBER_NO_ACTION;
    151          
    152            } else if ( status == EMBER_STANDARD_SECURITY_SECURED_REJOIN ) {
   \   00000006   0xD101             BNE.N    ??emberTrustCenterJoinHandler_0
    153              // MAC Encryption is no longer supported by Zigbee.  Therefore this means
    154              // the device rejoined securely and has the Network Key.  
    155              
    156              return EMBER_NO_ACTION;
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x4770             BX       LR
    157          
    158            } else if ( trustCenterAllowJoins ) {
   \                     ??emberTrustCenterJoinHandler_0:
   \   0000000C   0x....             LDR.N    R0,??DataTable6
   \   0000000E   0x7801             LDRB     R1,[R0, #+0]
   \   00000010   0xB121             CBZ.N    R1,??emberTrustCenterJoinHandler_1
    159              // If we are using a preconfigured Link Key the Network Key is sent
    160              // APS encrypted using the Link Key.
    161              // If we are not using a preconfigured link key, then both
    162              // the Link and the Network Key are sent in the clear to the joining device.
    163              return (trustCenterUsePreconfiguredKey 
    164                      ? EMBER_USE_PRECONFIGURED_KEY
    165                      : EMBER_SEND_KEY_IN_THE_CLEAR );
   \   00000012   0x7841             LDRB     R1,[R0, #+1]
   \   00000014   0x1E48             SUBS     R0,R1,#+1
   \   00000016   0x4180             SBCS     R0,R0,R0
   \   00000018   0x0FC0             LSRS     R0,R0,#+31
   \   0000001A   0x4770             BX       LR
    166            }
    167          
    168            // Device rejoined insecurely.  Send it the updated Network Key
    169            // encrypted with the Link Key.
    170            return EMBER_USE_PRECONFIGURED_KEY;
   \                     ??emberTrustCenterJoinHandler_1:
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x4770             BX       LR               ;; return
    171          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     trustCenterAllowJoins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     emberTrustCenterLinkKeyRequestPolicy

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Failed to generate ra...">`:
   \   00000000   0x46 0x61          DC8 "Failed to generate random link key.\015\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x65    
   \              0x6E 0x65    
   \              0x72 0x61    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x61 0x6E    
   \              0x64 0x6F    
   \              0x6D 0x20    
   \              0x6C 0x69    
   \              0x6E 0x6B    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Failed to generate ra...">_1`:
   \   00000000   0x46 0x61          DC8 "Failed to generate random NWK key.\015\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x65    
   \              0x6E 0x65    
   \              0x72 0x61    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x61 0x6E    
   \              0x64 0x6F    
   \              0x6D 0x20    
   \              0x4E 0x57    
   \              0x4B 0x20    
   \              0x6B 0x65    
   \              0x79 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Trust Center no longe...">`:
   \   00000000   0x54 0x72          DC8 "Trust Center no longer allowing joins.\015\012"
   \              0x75 0x73    
   \              0x74 0x20    
   \              0x43 0x65    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x20 0x6E    
   \              0x6F 0x20    
   \              0x6C 0x6F    
   \              0x6E 0x67    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x77    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6A 0x6F    
   \              0x69 0x6E    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    172          #endif // !defined EZSP_HOST
    173          
    174          //------------------------------------------------------------------------------
    175          
    176          #if defined EZSP_HOST
    177          static EmberStatus permitRequestingTrustCenterLinkKey(boolean allow)
    178          {
    179            return ezspSetPolicy(EZSP_TC_KEY_REQUEST_POLICY,
    180                                 (allow
    181                                  ? EZSP_ALLOW_TC_KEY_REQUESTS
    182                                  : EZSP_DENY_TC_KEY_REQUESTS));
    183          }
    184          
    185          #else // EM250
    186          
    187          static EmberStatus permitRequestingTrustCenterLinkKey(boolean allow)
    188          {
    189            emberTrustCenterLinkKeyRequestPolicy = (allow
    190                                                    ? EMBER_ALLOW_KEY_REQUESTS
    191                                                    : EMBER_DENY_KEY_REQUESTS);
    192            return EMBER_SUCCESS;
    193          }
    194          
    195          #endif
    196          
    197          //------------------------------------------------------------------------------
    198          
    199          #if defined EZSP_HOST
    200          static boolean generateRandomKey(EmberKeyData* result)
    201          {
    202            int16u data;
    203            int8u* keyPtr = emberKeyContents(result);
    204            int8u i;
    205          
    206            // Since our EZSP command only generates a random 16-bit number,
    207            // we must call it repeatedly to get a 128-bit random number.
    208          
    209            for ( i = 0; i < 8; i++ ) {
    210              EmberStatus status = ezspGetRandomNumber(&data);
    211          
    212              if ( status != EMBER_SUCCESS ) {
    213                return FALSE;
    214              }
    215          
    216              emberStoreLowHighInt16u(keyPtr, data);
    217              keyPtr+=2;
    218            }
    219          
    220            return TRUE;
    221          }
    222          #endif // defined EZSP_HOST

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  emberTrustCenterJoinHandler
       56  trustCenterInit
             56 -> emberGenerateRandomKey
             56 -> emberSerialPrintf
             56 -> emberSetInitialSecurityState
             56 -> halCommonMemCopy
        0  trustCenterIsPermittingJoins
        0  trustCenterPermitJoins
              0 -> emberSerialPrintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant "Failed to generate ra...">
      40  ?<Constant "Failed to generate ra...">_1
      44  ?<Constant "Trust Center no longe...">
       4  ??DataTable6
       4  ??DataTable6_1
      32  emberTrustCenterJoinHandler
       2  trustCenterAllowJoins
          trustCenterUsePreconfiguredKey
     128  trustCenterInit
       6  trustCenterIsPermittingJoins
      36  trustCenterPermitJoins

 
   2 bytes in section .data
 334 bytes in section .text
 
 334 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
