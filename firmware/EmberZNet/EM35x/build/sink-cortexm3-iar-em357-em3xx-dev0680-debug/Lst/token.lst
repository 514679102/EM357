###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.4.54170/W32 for ARM     02/Jul/2013  21:36:55 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\hal\micro #
#                    \cortexm3\token.c                                        #
#    Command line =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\hal\micro #
#                    \cortexm3\token.c -D DEBUG -D                            #
#                    "BOARD_HEADER=\"hal/micro/cortexm3/em35x/board/dev0680.h #
#                    \"" -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/ia #
#                    r.h\"" -D HAL_MICRO -D CORTEXM3 -D CORTEXM3_EM357 -D     #
#                    PHY_EM3XX -D BOARD_DEV0680 -D                            #
#                    "CONFIGURATION_HEADER=\"app/sensor/sensor-configuration. #
#                    h\"" -D SINK_APP -D EMBER_SERIAL1_MODE=EMBER_SERIAL_FIFO #
#                     -D EMBER_SERIAL1_TX_QUEUE_SIZE=128 -D                   #
#                    EMBER_SERIAL1_RX_QUEUE_SIZE=16 -D EMBER_SERIAL0_DEBUG    #
#                    -D EMBER_SERIAL0_MODE=EMBER_SERIAL_FIFO -D               #
#                    EMBER_SERIAL0_TX_QUEUE_SIZE=128 -D                       #
#                    EMBER_SERIAL0_RX_QUEUE_SIZE=64 -D                        #
#                    SCAN_DEBUG_PRINT_ENABLE -D USE_BOOTLOADER_LIB -D         #
#                    "__SOURCEFILE__=\"token.c\"" -lC                         #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\            #
#                    --diag_suppress Pa050 -o F:\Firmware\emberZNet\firmware\ #
#                    EmberZNet\EM35x\build\sink-cortexm3-iar-em357-em3xx-dev0 #
#                    680-debug\Obj\ --debug --endian=little --cpu=Cortex-M3   #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I F:\Firmware\emberZNet\firmware\EmberZNet\EM35x #
#                    \hal\micro\cortexm3\ -I F:\Firmware\emberZNet\firmware\E #
#                    mberZNet\EM35x\app\sensor\ewb-em357\..\..\..\ -I         #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\STACK\ -I                           #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\HAL\ -I                             #
#                    F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\app\senso #
#                    r\ewb-em357\..\..\..\ -Ohz --use_c++_inline              #
#    List file    =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Lst\token.lst   #
#    Object file  =  F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\build\sin #
#                    k-cortexm3-iar-em357-em3xx-dev0680-debug\Obj\token.o     #
#                                                                             #
#                                                                             #
###############################################################################

F:\Firmware\emberZNet\firmware\EmberZNet\EM35x\hal\micro\cortexm3\token.c
      1          /** @file hal/micro/cortexm3/token.c
      2           * @brief Token implementation for the Cortex-M3/EM3XX chip.
      3           * See token.h for details.
      4           *
      5           * Author(s): Brooks Barrett
      6           *
      7           * Copyright 2007 by Ember Corporation. All rights reserved.                *80*
      8           */
      9          #include PLATFORM_HEADER
     10          
     11          #include "stack/include/ember.h"
     12          #include "stack/include/error.h"
     13          #include "hal/hal.h"
     14          #include "app/util/serial/serial.h"
     15          #include "hal/micro/sim-eeprom.h"
     16          
     17          #ifndef SER232
     18            #define SER232 0
     19          #endif
     20          
     21          //prints debug data from the token access functions
     22          #define TOKENDBG(x)
     23          //#define TOKENDBG(x) x
     24          
     25          boolean tokensActive = FALSE;
     26          //[[ Strip emulator only code from official build
     27          #ifdef EMBER_EMU_TEST
     28            //On emulators, the CIB and FIB come up as 0x00 which can confuse code
     29            //that expects 0xFF for a token's erased state.  If we're on emulators
     30            //and the CIB/FIB is 0x00, fake 0xFF.
     31            boolean emuFib0x00 = TRUE;
     32            boolean emuCib0x00 = TRUE;
     33          #endif //EMBER_EMU_TEST
     34          //]]
     35          
     36          

   \                                 In section .text, align 2, keep-with-next
     37          EmberStatus halStackInitTokens(void)
     38          {
   \                     halStackInitTokens:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     39            #if !defined(BOOTLOADER) && !defined(EMBER_TEST)
     40              tokTypeMfgFibVersion tokMfg;
     41              EmberStatus status=EMBER_ERR_FATAL;
     42              tokTypeStackNvdataVersion tokStack;
     43              boolean mfgTokenVersionValid = FALSE;
   \   00000004   0x2400             MOVS     R4,#+0
     44              tokTypeMfgFibVersion validMfgTokens[] = VALID_MFG_TOKEN_VERSIONS;
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant {510, 765}>`
   \   0000000C   0x680A             LDR      R2,[R1, #0]
   \   0000000E   0x6002             STR      R2,[R0, #+0]
     45            #endif
     46            tokensActive = TRUE;
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable7
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7028             STRB     R0,[R5, #+0]
     47          
     48            //[[ Strip emulator only code from official build
     49            #ifdef EMBER_EMU_TEST
     50              //If we're on an emu, scan the FIB and CIB MFG tokens to see if
     51              //we're in the emu's default state of 0x00.  This means MFG tokens have
     52              //not been loaded and we'll have to fake an erased, 0xFF, state.
     53              {
     54                int32u i;
     55                int8u * ptr;
     56                ptr = (int8u *)(DATA_BIG_INFO_BASE+0x077E);
     57                for(i=0;i<(0x07F8-0x077E);i++) {
     58                  if(ptr[i] != 0x00) {
     59                    emuFib0x00 = FALSE;
     60                    break;
     61                  }
     62                }
     63                ptr = (int8u *)(DATA_BIG_INFO_BASE+0x0810);
     64                for(i=0;i<(0x08F0-0x0810);i++) {
     65                  if(ptr[i] != 0x00) {
     66                    emuCib0x00 = FALSE;
     67                    break;
     68                  }
     69                }
     70              }
     71            #endif //EMBER_EMU_TEST
     72            //]]
     73          
     74            if(halInternalSimEeInit()!=EMBER_SUCCESS) {
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       halInternalSimEeStartup
   \   0000001E   0xB130             CBZ.N    R0,??halStackInitTokens_0
     75              TOKENDBG(emberSerialPrintf(SER232,"halInternalSimEeInit Attempt 1 fail\r\n");)
     76              if(halInternalSimEeInit()!=EMBER_SUCCESS) {
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       halInternalSimEeStartup
   \   00000026   0xB110             CBZ.N    R0,??halStackInitTokens_0
     77                TOKENDBG(emberSerialPrintf(SER232,"halInternalSimEeInit Attempt 2 fail\r\n");)
     78                tokensActive = FALSE;
   \   00000028   0x702C             STRB     R4,[R5, #+0]
     79                return EMBER_SIM_EEPROM_INIT_2_FAILED;
   \   0000002A   0x2049             MOVS     R0,#+73
   \   0000002C   0xBD3E             POP      {R1-R5,PC}
     80              }
     81              TOKENDBG(} else {emberSerialPrintf(SER232,"halInternalSimEeInit Successful\r\n");)
     82            }
     83          
     84            // TODO: remove emulator reference.
     85            #if !defined(BOOTLOADER) && !defined(EMBER_TEST) && !defined(EMBER_EMU_TEST)
     86              halCommonGetToken(&tokMfg, TOKEN_MFG_FIB_VERSION);
   \                     ??halStackInitTokens_0:
   \   0000002E   0x2302             MOVS     R3,#+2
   \   00000030   0x227F             MOVS     R2,#+127
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000036   0x8801             LDRH     R1,[R0, #+0]
   \   00000038   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000003C   0x.... 0x....      BL       halInternalGetTokenData
     87              halCommonGetToken(&tokStack, TOKEN_STACK_NVDATA_VERSION);
   \   00000040   0x2302             MOVS     R3,#+2
   \   00000042   0x227F             MOVS     R2,#+127
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0xA800             ADD      R0,SP,#+0
   \   00000048   0x.... 0x....      BL       halInternalGetTokenData
     88              
     89              // See if this manufacturing token version matches any known valid version
     90              {
     91                int32u i;
     92                for(i = 0; i < (sizeof(validMfgTokens)/sizeof(*validMfgTokens)); i++) {
   \   0000004C   0x4620             MOV      R0,R4
     93                  if(validMfgTokens[i] == tokMfg) {
   \                     ??halStackInitTokens_1:
   \   0000004E   0xA901             ADD      R1,SP,#+4
   \   00000050   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   00000054   0xF8BD 0x2002      LDRH     R2,[SP, #+2]
   \   00000058   0x4291             CMP      R1,R2
   \   0000005A   0xBF08             IT       EQ 
   \   0000005C   0x2401             MOVEQ    R4,#+1
     94                    mfgTokenVersionValid = TRUE;
     95                  }
     96                }
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
   \   00000060   0x2802             CMP      R0,#+2
   \   00000062   0xD3F4             BCC.N    ??halStackInitTokens_1
     97              }
     98          
     99              if (!mfgTokenVersionValid || CURRENT_STACK_TOKEN_VERSION != tokStack) {
   \   00000064   0x2C00             CMP      R4,#+0
   \   00000066   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000006A   0xD004             BEQ.N    ??halStackInitTokens_2
   \   0000006C   0xF5B0 0x7F7F      CMP      R0,#+1020
   \   00000070   0xD109             BNE.N    ??halStackInitTokens_3
    100                if(!mfgTokenVersionValid && (CURRENT_STACK_TOKEN_VERSION != tokStack)) {
    101                  status = EMBER_EEPROM_MFG_STACK_VERSION_MISMATCH;
    102                } else if(!mfgTokenVersionValid) {
    103                  status = EMBER_EEPROM_MFG_VERSION_MISMATCH;
    104                } else if(CURRENT_STACK_TOKEN_VERSION != tokStack) {
    105                  status = EMBER_EEPROM_STACK_VERSION_MISMATCH;
    106                }
    107                #if defined(DEBUG)
    108                  if(!mfgTokenVersionValid) {
    109                    //Even is we're a debug image, a bad manufacturing token version
    110                    //is a fatal error, so return the error status.
    111                    tokensActive = FALSE;
    112                    return status;
    113                  }
    114                  if (CURRENT_STACK_TOKEN_VERSION != tokStack) {
    115                    //Debug images with a bad stack token version should attempt to
    116                    //fix the SimEE before continuing on.
    117                    TOKENDBG(emberSerialPrintf(SER232,"Stack Version mismatch, reloading\r\n");)
    118                    halInternalSimEeRepair(TRUE);
    119                    if(halInternalSimEeInit()!=EMBER_SUCCESS) {
    120                      TOKENDBG(emberSerialPrintf(SER232,"halInternalSimEeInit Attempt 3 fail\r\n");)
    121                      tokensActive = FALSE;
    122                      return EMBER_SIM_EEPROM_INIT_3_FAILED;
    123                    }
    124                  }
    125                #else //  node release image
    126                  TOKENDBG(emberSerialPrintf(SER232,"EEPROM_x_VERSION_MISMATCH (%d)\r\n",status);)
    127                  tokensActive = FALSE;
    128                  #if defined(PLATFORMTEST) || defined(LEVEL_ONE_TEST)
    129                    tokensActive = TRUE;  //Keep tokens active for test code.
    130                  #endif //defined(PLATFORMTEST)
    131                  return status;
    132                #endif
    133              }
    134            #endif //!defined(BOOTLOADER) && !defined(EMBER_TEST) && !defined(EMBER_EMU_TEST)
    135          
    136            TOKENDBG(emberSerialPrintf(SER232,"TOKENS ACTIVE\r\n");)
    137            return EMBER_SUCCESS;
   \                     ??halStackInitTokens_4:
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xBD3E             POP      {R1-R5,PC}       ;; return
   \                     ??halStackInitTokens_2:
   \   00000076   0xF5B0 0x7F7F      CMP      R0,#+1020
   \   0000007A   0xBF14             ITE      NE 
   \   0000007C   0x2004             MOVNE    R0,#+4
   \   0000007E   0x2006             MOVEQ    R0,#+6
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x7029             STRB     R1,[R5, #+0]
   \   00000084   0xBD3E             POP      {R1-R5,PC}
   \                     ??halStackInitTokens_3:
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      BL       halInternalSimEeStartup
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      BL       halInternalSimEeStartup
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD0ED             BEQ.N    ??halStackInitTokens_4
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x7028             STRB     R0,[R5, #+0]
   \   0000009A   0x204A             MOVS     R0,#+74
   \   0000009C   0xBD3E             POP      {R1-R5,PC}
    138          }
    139          
    140          

   \                                 In section .text, align 2, keep-with-next
    141          void halInternalGetTokenData(void *data, int16u token, int8u index, int8u len)
    142          {
   \                     halInternalGetTokenData:
   \   00000000   0xB510             PUSH     {R4,LR}
    143            if(token < 256) {
   \   00000002   0xF5B1 0x7F80      CMP      R1,#+256
   \   00000006   0xD207             BCS.N    ??halInternalGetTokenData_0
    144              //the token ID is within the SimEEPROM's range, route to the SimEEPROM
    145              if(tokensActive) {
   \   00000008   0x....             LDR.N    R4,??DataTable7
   \   0000000A   0x7824             LDRB     R4,[R4, #+0]
   \   0000000C   0xB144             CBZ.N    R4,??halInternalGetTokenData_1
    146                halInternalSimEeGetData(data, token, index, len);
   \   0000000E   0xB2C9             UXTB     R1,R1
   \   00000010   0xE8BD 0x4010      POP      {R4,LR}
   \   00000014   0x.... 0x....      B.W      halInternalSimEeGetData
    147              } else {
    148                TOKENDBG(emberSerialPrintf(SER232, "getIdxToken supressed.\r\n");)
    149              }
    150            } else {
    151              #ifdef EMBER_TEST
    152                assert(FALSE);
    153              #else //EMBER_TEST
    154                halInternalGetMfgTokenData(data,token,index,len);
   \                     ??halInternalGetTokenData_0:
   \   00000018   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001C   0x.... 0x....      B.W      halInternalGetMfgTokenData
    155              #endif //EMBER_TEST
    156            }
    157          }
   \                     ??halInternalGetTokenData_1:
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    158          
    159          

   \                                 In section .text, align 2, keep-with-next
    160          void halInternalGetIdxTokenPtr(void *ptr, int16u ID, int8u index, int8u len)
    161          {
   \                     halInternalGetIdxTokenPtr:
   \   00000000   0xB510             PUSH     {R4,LR}
    162            if(ID < 256) {
   \   00000002   0xF5B1 0x7F80      CMP      R1,#+256
   \   00000006   0xD207             BCS.N    ??halInternalGetIdxTokenPtr_0
    163              //the ID is within the SimEEPROM's range, route to the SimEEPROM
    164              if(tokensActive) {
   \   00000008   0x....             LDR.N    R4,??DataTable7
   \   0000000A   0x7824             LDRB     R4,[R4, #+0]
   \   0000000C   0xB164             CBZ.N    R4,??halInternalGetIdxTokenPtr_1
    165                halInternalSimEeGetPtr(ptr, ID, index, len);
   \   0000000E   0xB2C9             UXTB     R1,R1
   \   00000010   0xE8BD 0x4010      POP      {R4,LR}
   \   00000014   0x.... 0x....      B.W      halInternalSimEeGetPtr
    166              } else {
    167                TOKENDBG(emberSerialPrintf(SER232, "getIdxToken supressed.\r\n");)
    168              }
    169            } else {
    170              #ifdef EMBER_TEST
    171                assert(FALSE);
    172              #else //EMBER_TEST
    173                int32u *ptrOut = (int32u *)ptr;
    174                int32u realAddress;
    175          
    176                //0x7F is a non-indexed token.  Remap to 0 for the address calculation
    177                index = (index==0x7F) ? 0 : index;
   \                     ??halInternalGetIdxTokenPtr_0:
   \   00000018   0x2A7F             CMP      R2,#+127
   \   0000001A   0xBF08             IT       EQ 
   \   0000001C   0x2200             MOVEQ    R2,#+0
    178          
    179                realAddress = (DATA_BIG_INFO_BASE|ID) + (len*index);
    180          
    181                *ptrOut = realAddress;
   \   0000001E   0x....             LDR.N    R4,??DataTable7_2  ;; 0x8040000
   \   00000020   0x4321             ORRS     R1,R4,R1
   \   00000022   0xFB02 0x1103      MLA      R1,R2,R3,R1
   \   00000026   0x6001             STR      R1,[R0, #+0]
    182              #endif //EMBER_TEST
    183            }
    184          }
   \                     ??halInternalGetIdxTokenPtr_1:
   \   00000028   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 1
   \                     tokensActive:
   \   00000000                      DS8 1
    185          
    186          
    187          boolean simEeSetDataActiveSemaphore = FALSE;
   \                     simEeSetDataActiveSemaphore:
   \   00000001                      DS8 1

   \                                 In section .text, align 4, keep-with-next
    188          void halInternalSetTokenData(int16u token, int8u index, void *data, int8u len)
    189          {
   \                     halInternalSetTokenData:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
    190            if(token < 256) {
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "token.c">`
   \   00000010   0xF5B5 0x7F80      CMP      R5,#+256
   \   00000014   0xD213             BCS.N    ??halInternalSetTokenData_0
    191              //the token ID is within the SimEEPROM's range, route to the SimEEPROM
    192              if(tokensActive) {
   \   00000016   0x....             LDR.N    R4,??DataTable7
   \   00000018   0x7821             LDRB     R1,[R4, #+0]
   \   0000001A   0xB1B1             CBZ.N    R1,??halInternalSetTokenData_1
    193                //You cannot interrupt SetData with another SetData!
    194                assert(!simEeSetDataActiveSemaphore);
   \   0000001C   0x7861             LDRB     R1,[R4, #+1]
   \   0000001E   0xB119             CBZ.N    R1,??halInternalSetTokenData_2
   \   00000020   0xB507             PUSH {R0,R1,R2,LR}
   \   00000022   0x21C2             MOVS     R1,#+194
   \   00000024   0x.... 0x....      BL       halInternalAssertFailed
    195                simEeSetDataActiveSemaphore = TRUE;
   \                     ??halInternalSetTokenData_2:
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x7060             STRB     R0,[R4, #+1]
    196                halInternalSimEeSetData(token, data, index, len);
   \   0000002C   0x4643             MOV      R3,R8
   \   0000002E   0x4632             MOV      R2,R6
   \   00000030   0x4639             MOV      R1,R7
   \   00000032   0xB2E8             UXTB     R0,R5
   \   00000034   0x.... 0x....      BL       halInternalSimEeSetData
    197                simEeSetDataActiveSemaphore = FALSE;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x7060             STRB     R0,[R4, #+1]
   \   0000003C   0xE005             B.N      ??halInternalSetTokenData_1
    198              } else {
    199                TOKENDBG(emberSerialPrintf(SER232, "setIdxToken supressed.\r\n");)
    200              }
    201            } else {
    202              //The Information Blocks can only be written by an external tool!
    203              //Something is making a set token call on a manufacturing token, and that
    204              //is not allowed!
    205              assert(0);
   \                     ??halInternalSetTokenData_0:
   \   0000003E   0xB507             PUSH {R0,R1,R2,LR}
   \   00000040   0x21CD             MOVS     R1,#+205
   \   00000042   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000046   0x.... 0x....      B.W      halInternalAssertFailed
    206            }
    207          }
   \                     ??halInternalSetTokenData_1:
   \   0000004A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    208          
    209          

   \                                 In section .text, align 2, keep-with-next
    210          void halInternalIncrementCounterToken(int8u token)
    211          {
    212            if(tokensActive) {
   \                     halInternalIncrementCounterToken:
   \   00000000   0x....             LDR.N    R1,??DataTable7
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xBF18             IT       NE 
   \   00000008   0x.... 0x....      BNE.W    halInternalSimEeIncrementCounter
    213              halInternalSimEeIncrementCounter(token);
    214            } else {
    215              TOKENDBG(emberSerialPrintf(SER232, "IncrementCounter supressed.\r\n");)
    216            }
    217          }
   \   0000000C   0x4770             BX       LR               ;; return
    218          
    219          
    220          #ifndef EMBER_TEST
    221          
    222          // The following interfaces are admittedly code space hogs but serve
    223          // as glue interfaces to link creator codes to tokens for test code.
    224          

   \                                 In section .text, align 2, keep-with-next
    225          int16u getTokenAddress(int16u creator)
    226          {
    227            #define DEFINETOKENS
    228            switch (creator) {
   \                     getTokenAddress:
   \   00000000   0xF24B 0x2153      MOVW     R1,#+45651
   \   00000004   0x1A40             SUBS     R0,R0,R1
   \   00000006   0xF000 0x80EE      BEQ.W    ??getTokenAddress_0
   \   0000000A   0x1E40             SUBS     R0,R0,#+1
   \   0000000C   0xF000 0x80E7      BEQ.W    ??getTokenAddress_1
   \   00000010   0xF44F 0x7178      MOV      R1,#+992
   \   00000014   0x1A40             SUBS     R0,R0,R1
   \   00000016   0xF000 0x80EE      BEQ.W    ??getTokenAddress_2
   \   0000001A   0xF640 0x310F      MOVW     R1,#+2831
   \   0000001E   0x1A40             SUBS     R0,R0,R1
   \   00000020   0xF000 0x80D7      BEQ.W    ??getTokenAddress_3
   \   00000024   0xF44F 0x7184      MOV      R1,#+264
   \   00000028   0x1A40             SUBS     R0,R0,R1
   \   0000002A   0xF000 0x80CE      BEQ.W    ??getTokenAddress_4
   \   0000002E   0x1EC0             SUBS     R0,R0,#+3
   \   00000030   0xF000 0x80C5      BEQ.W    ??getTokenAddress_5
   \   00000034   0x38F4             SUBS     R0,R0,#+244
   \   00000036   0xF000 0x80CE      BEQ.W    ??getTokenAddress_6
   \   0000003A   0x1E40             SUBS     R0,R0,#+1
   \   0000003C   0xF000 0x80D7      BEQ.W    ??getTokenAddress_7
   \   00000040   0x1E40             SUBS     R0,R0,#+1
   \   00000042   0xF000 0x8096      BEQ.W    ??getTokenAddress_8
   \   00000046   0x3812             SUBS     R0,R0,#+18
   \   00000048   0xF000 0x80B3      BEQ.W    ??getTokenAddress_9
   \   0000004C   0xF240 0x51ED      MOVW     R1,#+1517
   \   00000050   0x1A40             SUBS     R0,R0,R1
   \   00000052   0xF000 0x80C2      BEQ.W    ??getTokenAddress_10
   \   00000056   0x1E40             SUBS     R0,R0,#+1
   \   00000058   0xF000 0x80B3      BEQ.W    ??getTokenAddress_11
   \   0000005C   0xF240 0x410F      MOVW     R1,#+1039
   \   00000060   0x1A40             SUBS     R0,R0,R1
   \   00000062   0xF000 0x80B4      BEQ.W    ??getTokenAddress_12
   \   00000066   0xF44F 0x713C      MOV      R1,#+752
   \   0000006A   0x1A40             SUBS     R0,R0,R1
   \   0000006C   0xF000 0x80AB      BEQ.W    ??getTokenAddress_13
   \   00000070   0xF240 0x2102      MOVW     R1,#+514
   \   00000074   0x1A40             SUBS     R0,R0,R1
   \   00000076   0xF000 0x80D5      BEQ.W    ??getTokenAddress_14
   \   0000007A   0x38FD             SUBS     R0,R0,#+253
   \   0000007C   0xF000 0x80B9      BEQ.W    ??getTokenAddress_15
   \   00000080   0x1E40             SUBS     R0,R0,#+1
   \   00000082   0xF000 0x80B2      BEQ.W    ??getTokenAddress_16
   \   00000086   0x1EC0             SUBS     R0,R0,#+3
   \   00000088   0xF000 0x80AB      BEQ.W    ??getTokenAddress_17
   \   0000008C   0xF640 0x51DD      MOVW     R1,#+3549
   \   00000090   0x1A40             SUBS     R0,R0,R1
   \   00000092   0xF000 0x80B3      BEQ.W    ??getTokenAddress_18
   \   00000096   0x1E40             SUBS     R0,R0,#+1
   \   00000098   0xF000 0x80BE      BEQ.W    ??getTokenAddress_19
   \   0000009C   0x1E40             SUBS     R0,R0,#+1
   \   0000009E   0xF000 0x80BD      BEQ.W    ??getTokenAddress_20
   \   000000A2   0x1E40             SUBS     R0,R0,#+1
   \   000000A4   0xF000 0x80BC      BEQ.W    ??getTokenAddress_21
   \   000000A8   0x383C             SUBS     R0,R0,#+60
   \   000000AA   0xF000 0x80AF      BEQ.W    ??getTokenAddress_22
   \   000000AE   0x38AE             SUBS     R0,R0,#+174
   \   000000B0   0xF000 0x80BA      BEQ.W    ??getTokenAddress_23
   \   000000B4   0x1E40             SUBS     R0,R0,#+1
   \   000000B6   0xF000 0x80B9      BEQ.W    ??getTokenAddress_24
   \   000000BA   0x1E40             SUBS     R0,R0,#+1
   \   000000BC   0xF000 0x80B8      BEQ.W    ??getTokenAddress_25
   \   000000C0   0x1E40             SUBS     R0,R0,#+1
   \   000000C2   0xF000 0x80B7      BEQ.W    ??getTokenAddress_26
   \   000000C6   0x1E40             SUBS     R0,R0,#+1
   \   000000C8   0xF000 0x80B6      BEQ.W    ??getTokenAddress_27
   \   000000CC   0x1E40             SUBS     R0,R0,#+1
   \   000000CE   0xF000 0x80B5      BEQ.W    ??getTokenAddress_28
   \   000000D2   0x380B             SUBS     R0,R0,#+11
   \   000000D4   0xF000 0x80B4      BEQ.W    ??getTokenAddress_29
   \   000000D8   0x3843             SUBS     R0,R0,#+67
   \   000000DA   0xF000 0x8093      BEQ.W    ??getTokenAddress_30
   \   000000DE   0x3811             SUBS     R0,R0,#+17
   \   000000E0   0xF000 0x80B0      BEQ.W    ??getTokenAddress_31
   \   000000E4   0x38D1             SUBS     R0,R0,#+209
   \   000000E6   0xD066             BEQ.N    ??getTokenAddress_32
   \   000000E8   0x382A             SUBS     R0,R0,#+42
   \   000000EA   0xD060             BEQ.N    ??getTokenAddress_33
   \   000000EC   0x38E7             SUBS     R0,R0,#+231
   \   000000EE   0xF000 0x80AD      BEQ.W    ??getTokenAddress_34
   \   000000F2   0x381F             SUBS     R0,R0,#+31
   \   000000F4   0xF000 0x8084      BEQ.W    ??getTokenAddress_35
   \   000000F8   0x388B             SUBS     R0,R0,#+139
   \   000000FA   0xF000 0x80A9      BEQ.W    ??getTokenAddress_36
   \   000000FE   0x3845             SUBS     R0,R0,#+69
   \   00000100   0xD03D             BEQ.N    ??getTokenAddress_37
   \   00000102   0x381E             SUBS     R0,R0,#+30
   \   00000104   0xF000 0x8080      BEQ.W    ??getTokenAddress_38
   \   00000108   0xF44F 0x7180      MOV      R1,#+256
   \   0000010C   0x1A40             SUBS     R0,R0,R1
   \   0000010E   0xD04A             BEQ.N    ??getTokenAddress_39
   \   00000110   0x380C             SUBS     R0,R0,#+12
   \   00000112   0xD04A             BEQ.N    ??getTokenAddress_40
   \   00000114   0xF240 0x510A      MOVW     R1,#+1290
   \   00000118   0x1A40             SUBS     R0,R0,R1
   \   0000011A   0xD079             BEQ.N    ??getTokenAddress_41
   \   0000011C   0xF44F 0x71FD      MOV      R1,#+506
   \   00000120   0x1A40             SUBS     R0,R0,R1
   \   00000122   0xD04A             BEQ.N    ??getTokenAddress_42
   \   00000124   0x38F1             SUBS     R0,R0,#+241
   \   00000126   0xD075             BEQ.N    ??getTokenAddress_43
   \   00000128   0xF44F 0x7100      MOV      R1,#+512
   \   0000012C   0x1A40             SUBS     R0,R0,R1
   \   0000012E   0xD022             BEQ.N    ??getTokenAddress_44
   \   00000130   0xF44F 0x7104      MOV      R1,#+528
   \   00000134   0x1A40             SUBS     R0,R0,R1
   \   00000136   0xD02A             BEQ.N    ??getTokenAddress_45
   \   00000138   0x1E80             SUBS     R0,R0,#+2
   \   0000013A   0xD02A             BEQ.N    ??getTokenAddress_46
   \   0000013C   0xF44F 0x71E6      MOV      R1,#+460
   \   00000140   0x1A40             SUBS     R0,R0,R1
   \   00000142   0xD020             BEQ.N    ??getTokenAddress_47
   \   00000144   0x3820             SUBS     R0,R0,#+32
   \   00000146   0xD020             BEQ.N    ??getTokenAddress_48
   \   00000148   0x1E40             SUBS     R0,R0,#+1
   \   0000014A   0xD026             BEQ.N    ??getTokenAddress_49
   \   0000014C   0x1E40             SUBS     R0,R0,#+1
   \   0000014E   0xD014             BEQ.N    ??getTokenAddress_50
   \   00000150   0x380A             SUBS     R0,R0,#+10
   \   00000152   0xD016             BEQ.N    ??getTokenAddress_51
   \   00000154   0x1F80             SUBS     R0,R0,#+6
   \   00000156   0xD022             BEQ.N    ??getTokenAddress_52
   \   00000158   0xF240 0x2102      MOVW     R1,#+514
   \   0000015C   0x1A40             SUBS     R0,R0,R1
   \   0000015E   0xD01A             BEQ.N    ??getTokenAddress_53
   \   00000160   0xF640 0x018B      MOVW     R1,#+2187
   \   00000164   0x1A40             SUBS     R0,R0,R1
   \   00000166   0xD077             BEQ.N    ??getTokenAddress_54
   \   00000168   0x3808             SUBS     R0,R0,#+8
   \   0000016A   0xD01A             BEQ.N    ??getTokenAddress_55
   \   0000016C   0x1F00             SUBS     R0,R0,#+4
   \   0000016E   0xD06B             BEQ.N    ??getTokenAddress_56
   \   00000170   0xE070             B.N      ??getTokenAddress_57
    229              #define TOKEN_MFG TOKEN_DEF
    230              #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
    231                case creator: return TOKEN_##name;
    232              #include "hal/micro/cortexm3/token-manufacturing.h"
   \                     ??getTokenAddress_8:
   \   00000172   0x....             LDR.N    R0,??DataTable7_3
   \   00000174   0xE040             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_44:
   \   00000176   0x....             LDR.N    R0,??DataTable7_4
   \   00000178   0xE03E             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_50:
   \   0000017A   0x....             LDR.N    R0,??DataTable7_5
   \   0000017C   0xE03C             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_37:
   \   0000017E   0x....             LDR.N    R0,??DataTable7_6
   \   00000180   0xE03A             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_51:
   \   00000182   0x....             LDR.N    R0,??DataTable7_7
   \   00000184   0xE038             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_47:
   \   00000186   0x....             LDR.N    R0,??DataTable7_8
   \   00000188   0xE036             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_48:
   \   0000018A   0x....             LDR.N    R0,??DataTable7_9
   \   0000018C   0xE034             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_45:
   \   0000018E   0x....             LDR.N    R0,??DataTable7_10
   \   00000190   0xE032             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_46:
   \   00000192   0x....             LDR.N    R0,??DataTable7_11
   \   00000194   0xE030             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_53:
   \   00000196   0x....             LDR.N    R0,??DataTable7_12
   \   00000198   0xE02E             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_49:
   \   0000019A   0x....             LDR.N    R0,??DataTable7_13
   \   0000019C   0xE02C             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_52:
   \   0000019E   0x....             LDR.N    R0,??DataTable7_14
   \   000001A0   0xE02A             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_55:
   \   000001A2   0x....             LDR.N    R0,??DataTable7_1
   \   000001A4   0xE028             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_39:
   \   000001A6   0x....             LDR.N    R0,??DataTable7_15
   \   000001A8   0xE026             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_40:
   \   000001AA   0x....             LDR.N    R0,??DataTable7_16
   \   000001AC   0xE024             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_33:
   \   000001AE   0x....             LDR.N    R0,??DataTable7_17
   \   000001B0   0xE022             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_9:
   \   000001B2   0x....             LDR.N    R0,??DataTable7_18
   \   000001B4   0xE020             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_32:
   \   000001B6   0x....             LDR.N    R0,??DataTable7_19
   \   000001B8   0xE01E             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_42:
   \   000001BA   0x....             LDR.N    R0,??DataTable7_20
   \   000001BC   0xE01C             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_5:
   \   000001BE   0x....             LDR.N    R0,??DataTable7_21
   \   000001C0   0xE01A             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_11:
   \   000001C2   0x....             LDR.N    R0,??DataTable7_22
   \   000001C4   0xE018             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_13:
   \   000001C6   0x....             LDR.N    R0,??DataTable7_23
   \   000001C8   0xE016             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_4:
   \   000001CA   0x....             LDR.N    R0,??DataTable7_24
   \   000001CC   0xE014             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_12:
   \   000001CE   0x....             LDR.N    R0,??DataTable7_25
   \   000001D0   0xE012             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_3:
   \   000001D2   0x....             LDR.N    R0,??DataTable7_26
   \   000001D4   0xE010             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_6:
   \   000001D6   0x....             LDR.N    R0,??DataTable7_27
   \   000001D8   0xE00E             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_10:
   \   000001DA   0x....             LDR.N    R0,??DataTable7_28
   \   000001DC   0xE00C             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_1:
   \   000001DE   0x....             LDR.N    R0,??DataTable7_29
   \   000001E0   0xE00A             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_17:
   \   000001E2   0x....             LDR.N    R0,??DataTable7_30
   \   000001E4   0xE008             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_0:
   \   000001E6   0x....             LDR.N    R0,??DataTable7_31
   \   000001E8   0xE006             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_16:
   \   000001EA   0x....             LDR.N    R0,??DataTable7_32
   \   000001EC   0xE004             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_7:
   \   000001EE   0x....             LDR.N    R0,??DataTable7_33
   \   000001F0   0xE002             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_15:
   \   000001F2   0x....             LDR.N    R0,??DataTable7_34
   \   000001F4   0xE000             B.N      ??getTokenAddress_58
   \                     ??getTokenAddress_2:
   \   000001F6   0x....             LDR.N    R0,??DataTable7_35
   \                     ??getTokenAddress_58:
   \   000001F8   0x8800             LDRH     R0,[R0, #+0]
   \   000001FA   0x4770             BX       LR
    233              #include "stack/config/token-stack.h"
   \                     ??getTokenAddress_18:
   \   000001FC   0x2001             MOVS     R0,#+1
   \   000001FE   0x4770             BX       LR
   \                     ??getTokenAddress_35:
   \   00000200   0x2002             MOVS     R0,#+2
   \   00000202   0x4770             BX       LR
   \                     ??getTokenAddress_30:
   \   00000204   0x2003             MOVS     R0,#+3
   \   00000206   0x4770             BX       LR
   \                     ??getTokenAddress_38:
   \   00000208   0x2004             MOVS     R0,#+4
   \   0000020A   0x4770             BX       LR
   \                     ??getTokenAddress_22:
   \   0000020C   0x2005             MOVS     R0,#+5
   \   0000020E   0x4770             BX       LR
   \                     ??getTokenAddress_41:
   \   00000210   0x2006             MOVS     R0,#+6
   \   00000212   0x4770             BX       LR
   \                     ??getTokenAddress_43:
   \   00000214   0x2007             MOVS     R0,#+7
   \   00000216   0x4770             BX       LR
   \                     ??getTokenAddress_19:
   \   00000218   0x2008             MOVS     R0,#+8
   \   0000021A   0x4770             BX       LR
   \                     ??getTokenAddress_20:
   \   0000021C   0x2009             MOVS     R0,#+9
   \   0000021E   0x4770             BX       LR
   \                     ??getTokenAddress_21:
   \   00000220   0x200A             MOVS     R0,#+10
   \   00000222   0x4770             BX       LR
   \                     ??getTokenAddress_14:
   \   00000224   0x200B             MOVS     R0,#+11
   \   00000226   0x4770             BX       LR
   \                     ??getTokenAddress_23:
   \   00000228   0x200C             MOVS     R0,#+12
   \   0000022A   0x4770             BX       LR
   \                     ??getTokenAddress_24:
   \   0000022C   0x200D             MOVS     R0,#+13
   \   0000022E   0x4770             BX       LR
   \                     ??getTokenAddress_25:
   \   00000230   0x200E             MOVS     R0,#+14
   \   00000232   0x4770             BX       LR
   \                     ??getTokenAddress_26:
   \   00000234   0x200F             MOVS     R0,#+15
   \   00000236   0x4770             BX       LR
   \                     ??getTokenAddress_27:
   \   00000238   0x2010             MOVS     R0,#+16
   \   0000023A   0x4770             BX       LR
   \                     ??getTokenAddress_28:
   \   0000023C   0x2011             MOVS     R0,#+17
   \   0000023E   0x4770             BX       LR
   \                     ??getTokenAddress_29:
   \   00000240   0x2012             MOVS     R0,#+18
   \   00000242   0x4770             BX       LR
   \                     ??getTokenAddress_31:
   \   00000244   0x2013             MOVS     R0,#+19
   \   00000246   0x4770             BX       LR
   \                     ??getTokenAddress_56:
   \   00000248   0x2014             MOVS     R0,#+20
   \   0000024A   0x4770             BX       LR
   \                     ??getTokenAddress_34:
   \   0000024C   0x2015             MOVS     R0,#+21
   \   0000024E   0x4770             BX       LR
   \                     ??getTokenAddress_36:
   \   00000250   0x2016             MOVS     R0,#+22
   \   00000252   0x4770             BX       LR
    234              #undef TOKEN_MFG
    235              #undef TOKEN_DEF
    236            default: {
    237            }
    238            };
    239            #undef DEFINETOKENS
    240            return INVALID_EE_ADDRESS;
   \                     ??getTokenAddress_57:
   \   00000254   0xF64F 0x70FF      MOVW     R0,#+65535
   \                     ??getTokenAddress_54:
   \   00000258   0x4770             BX       LR               ;; return
    241          }
    242          

   \                                 In section .text, align 2, keep-with-next
    243          int8u getTokenSize(int16u creator)
    244          {
    245            #define DEFINETOKENS
    246            switch (creator) {
   \                     getTokenSize:
   \   00000000   0xF24B 0x2153      MOVW     R1,#+45651
   \   00000004   0x1A40             SUBS     R0,R0,R1
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xF240 0x8095      BLS.W    ??getTokenSize_0
   \   0000000C   0xF240 0x31E1      MOVW     R1,#+993
   \   00000010   0x1A40             SUBS     R0,R0,R1
   \   00000012   0xD01A             BEQ.N    ??getTokenSize_1
   \   00000014   0xF640 0x310F      MOVW     R1,#+2831
   \   00000018   0x1A40             SUBS     R0,R0,R1
   \   0000001A   0xD012             BEQ.N    ??getTokenSize_2
   \   0000001C   0xF44F 0x7184      MOV      R1,#+264
   \   00000020   0x1A40             SUBS     R0,R0,R1
   \   00000022   0xD01C             BEQ.N    ??getTokenSize_3
   \   00000024   0x1EC0             SUBS     R0,R0,#+3
   \   00000026   0xD01A             BEQ.N    ??getTokenSize_3
   \   00000028   0x38F4             SUBS     R0,R0,#+244
   \   0000002A   0xD044             BEQ.N    ??getTokenSize_4
   \   0000002C   0x1E40             SUBS     R0,R0,#+1
   \   0000002E   0xD008             BEQ.N    ??getTokenSize_2
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0xD07A             BEQ.N    ??getTokenSize_5
   \   00000034   0x3812             SUBS     R0,R0,#+18
   \   00000036   0xD004             BEQ.N    ??getTokenSize_2
   \   00000038   0xF240 0x51ED      MOVW     R1,#+1517
   \   0000003C   0x1A40             SUBS     R0,R0,R1
   \   0000003E   0xD078             BEQ.N    ??getTokenSize_6
   \   00000040   0x1E40             SUBS     R0,R0,#+1
   \                     ??getTokenSize_2:
   \   00000042   0xD078             BEQ.N    ??getTokenSize_0
   \   00000044   0xF240 0x410F      MOVW     R1,#+1039
   \   00000048   0x1A40             SUBS     R0,R0,R1
   \                     ??getTokenSize_1:
   \   0000004A   0xD07C             BEQ.N    ??getTokenSize_7
   \   0000004C   0xF44F 0x713C      MOV      R1,#+752
   \   00000050   0x1A40             SUBS     R0,R0,R1
   \   00000052   0xD070             BEQ.N    ??getTokenSize_0
   \   00000054   0xF240 0x2102      MOVW     R1,#+514
   \   00000058   0x1A40             SUBS     R0,R0,R1
   \   0000005A   0xD078             BEQ.N    ??getTokenSize_8
   \   0000005C   0x38FD             SUBS     R0,R0,#+253
   \                     ??getTokenSize_3:
   \   0000005E   0xD06C             BEQ.N    ??getTokenSize_9
   \   00000060   0x1E40             SUBS     R0,R0,#+1
   \   00000062   0xD068             BEQ.N    ??getTokenSize_0
   \   00000064   0x1EC0             SUBS     R0,R0,#+3
   \   00000066   0xD066             BEQ.N    ??getTokenSize_0
   \   00000068   0xF640 0x51DD      MOVW     R1,#+3549
   \   0000006C   0x1A40             SUBS     R0,R0,R1
   \   0000006E   0xD06E             BEQ.N    ??getTokenSize_8
   \   00000070   0x1E40             SUBS     R0,R0,#+1
   \   00000072   0xD066             BEQ.N    ??getTokenSize_10
   \   00000074   0x1E40             SUBS     R0,R0,#+1
   \   00000076   0xD066             BEQ.N    ??getTokenSize_7
   \   00000078   0x1E40             SUBS     R0,R0,#+1
   \   0000007A   0xD066             BEQ.N    ??getTokenSize_11
   \   0000007C   0x383C             SUBS     R0,R0,#+60
   \   0000007E   0xD05A             BEQ.N    ??getTokenSize_0
   \   00000080   0x38AE             SUBS     R0,R0,#+174
   \   00000082   0xD05C             BEQ.N    ??getTokenSize_12
   \   00000084   0x1E40             SUBS     R0,R0,#+1
   \   00000086   0xD058             BEQ.N    ??getTokenSize_9
   \   00000088   0x1E40             SUBS     R0,R0,#+1
   \   0000008A   0xD058             BEQ.N    ??getTokenSize_12
   \   0000008C   0x1E40             SUBS     R0,R0,#+1
   \   0000008E   0xD058             BEQ.N    ??getTokenSize_10
   \   00000090   0x1E40             SUBS     R0,R0,#+1
   \   00000092   0xD058             BEQ.N    ??getTokenSize_7
   \   00000094   0x1E40             SUBS     R0,R0,#+1
   \   00000096   0xD058             BEQ.N    ??getTokenSize_11
   \   00000098   0x380B             SUBS     R0,R0,#+11
   \   0000009A   0xD058             BEQ.N    ??getTokenSize_8
   \   0000009C   0x3843             SUBS     R0,R0,#+67
   \   0000009E   0xD04A             BEQ.N    ??getTokenSize_0
   \   000000A0   0x3811             SUBS     R0,R0,#+17
   \   000000A2   0xD056             BEQ.N    ??getTokenSize_13
   \   000000A4   0x38D1             SUBS     R0,R0,#+209
   \   000000A6   0xD04E             BEQ.N    ??getTokenSize_7
   \   000000A8   0x382A             SUBS     R0,R0,#+42
   \   000000AA   0xD046             BEQ.N    ??getTokenSize_9
   \   000000AC   0x38E7             SUBS     R0,R0,#+231
   \   000000AE   0xD054             BEQ.N    ??getTokenSize_14
   \   000000B0   0x381F             SUBS     R0,R0,#+31
   \   000000B2   0xD044             BEQ.N    ??getTokenSize_12
   \   000000B4   0x388B             SUBS     R0,R0,#+139
   \                     ??getTokenSize_4:
   \   000000B6   0xD052             BEQ.N    ??getTokenSize_15
   \   000000B8   0x3845             SUBS     R0,R0,#+69
   \   000000BA   0xD044             BEQ.N    ??getTokenSize_7
   \   000000BC   0x381E             SUBS     R0,R0,#+30
   \   000000BE   0xD046             BEQ.N    ??getTokenSize_8
   \   000000C0   0xF44F 0x7180      MOV      R1,#+256
   \   000000C4   0x1A40             SUBS     R0,R0,R1
   \   000000C6   0xD036             BEQ.N    ??getTokenSize_0
   \   000000C8   0x380C             SUBS     R0,R0,#+12
   \   000000CA   0xD03C             BEQ.N    ??getTokenSize_7
   \   000000CC   0xF240 0x510A      MOVW     R1,#+1290
   \   000000D0   0x1A40             SUBS     R0,R0,R1
   \   000000D2   0xD034             BEQ.N    ??getTokenSize_12
   \   000000D4   0xF44F 0x71FD      MOV      R1,#+506
   \   000000D8   0x1A40             SUBS     R0,R0,R1
   \   000000DA   0xD02E             BEQ.N    ??getTokenSize_9
   \   000000DC   0x38F1             SUBS     R0,R0,#+241
   \   000000DE   0xD02C             BEQ.N    ??getTokenSize_9
   \   000000E0   0xF44F 0x7100      MOV      R1,#+512
   \   000000E4   0x1A40             SUBS     R0,R0,R1
   \   000000E6   0xD022             BEQ.N    ??getTokenSize_16
   \   000000E8   0xF44F 0x7104      MOV      R1,#+528
   \   000000EC   0x1A40             SUBS     R0,R0,R1
   \   000000EE   0xD022             BEQ.N    ??getTokenSize_0
   \   000000F0   0x1E80             SUBS     R0,R0,#+2
   \   000000F2   0xD020             BEQ.N    ??getTokenSize_0
   \   000000F4   0xF44F 0x71E6      MOV      R1,#+460
   \   000000F8   0x1A40             SUBS     R0,R0,R1
   \   000000FA   0xD01A             BEQ.N    ??getTokenSize_6
   \   000000FC   0x3820             SUBS     R0,R0,#+32
   \   000000FE   0xD024             BEQ.N    ??getTokenSize_11
   \   00000100   0x1E40             SUBS     R0,R0,#+1
   \   00000102   0xD018             BEQ.N    ??getTokenSize_0
   \   00000104   0x1E40             SUBS     R0,R0,#+1
   \   00000106   0xD012             BEQ.N    ??getTokenSize_16
   \   00000108   0x380A             SUBS     R0,R0,#+10
   \   0000010A   0xD012             BEQ.N    ??getTokenSize_6
   \   0000010C   0x1F80             SUBS     R0,R0,#+6
   \   0000010E   0xD012             BEQ.N    ??getTokenSize_0
   \   00000110   0xF240 0x2102      MOVW     R1,#+514
   \   00000114   0x1A40             SUBS     R0,R0,R1
   \   00000116   0xD00E             BEQ.N    ??getTokenSize_0
   \   00000118   0xF640 0x018B      MOVW     R1,#+2187
   \   0000011C   0x1A40             SUBS     R0,R0,R1
   \   0000011E   0xD00A             BEQ.N    ??getTokenSize_0
   \   00000120   0x3808             SUBS     R0,R0,#+8
   \   00000122   0xD008             BEQ.N    ??getTokenSize_0
   \   00000124   0x1F00             SUBS     R0,R0,#+4
   \   00000126   0xD016             BEQ.N    ??getTokenSize_17
   \   00000128   0xE01B             B.N      ??getTokenSize_18
    247              #define TOKEN_MFG TOKEN_DEF
    248              #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
    249                case creator: return sizeof(type);
    250              #include "hal/micro/cortexm3/token-manufacturing.h"
   \                     ??getTokenSize_5:
   \   0000012A   0x2018             MOVS     R0,#+24
   \   0000012C   0x4770             BX       LR
   \                     ??getTokenSize_16:
   \   0000012E   0x2006             MOVS     R0,#+6
   \   00000130   0x4770             BX       LR
   \                     ??getTokenSize_6:
   \   00000132   0x2014             MOVS     R0,#+20
   \   00000134   0x4770             BX       LR
    251              #include "stack/config/token-stack.h"
   \                     ??getTokenSize_0:
   \   00000136   0x2002             MOVS     R0,#+2
   \   00000138   0x4770             BX       LR
   \                     ??getTokenSize_9:
   \   0000013A   0x2010             MOVS     R0,#+16
   \   0000013C   0x4770             BX       LR
   \                     ??getTokenSize_12:
   \   0000013E   0x2011             MOVS     R0,#+17
   \   00000140   0x4770             BX       LR
   \                     ??getTokenSize_10:
   \   00000142   0x201A             MOVS     R0,#+26
   \   00000144   0x4770             BX       LR
   \                     ??getTokenSize_7:
   \   00000146   0x2008             MOVS     R0,#+8
   \   00000148   0x4770             BX       LR
   \                     ??getTokenSize_11:
   \   0000014A   0x200A             MOVS     R0,#+10
   \   0000014C   0x4770             BX       LR
   \                     ??getTokenSize_8:
   \   0000014E   0x2004             MOVS     R0,#+4
   \   00000150   0x4770             BX       LR
   \                     ??getTokenSize_13:
   \   00000152   0x200D             MOVS     R0,#+13
   \   00000154   0x4770             BX       LR
   \                     ??getTokenSize_17:
   \   00000156   0x200B             MOVS     R0,#+11
   \   00000158   0x4770             BX       LR
   \                     ??getTokenSize_14:
   \   0000015A   0x2019             MOVS     R0,#+25
   \   0000015C   0x4770             BX       LR
   \                     ??getTokenSize_15:
   \   0000015E   0x205C             MOVS     R0,#+92
   \   00000160   0x4770             BX       LR
    252              #undef TOKEN_MFG
    253              #undef TOKEN_DEF
    254            default: {
    255            }
    256            };
    257            #undef DEFINETOKENS
    258            return 0;
   \                     ??getTokenSize_18:
   \   00000162   0x2000             MOVS     R0,#+0
   \   00000164   0x4770             BX       LR               ;; return
    259          }
    260          

   \                                 In section .text, align 2, keep-with-next
    261          int8u getTokenArraySize(int16u creator)
    262          {
    263            #define DEFINETOKENS
    264            switch (creator) {
   \                     getTokenArraySize:
   \   00000000   0xF24B 0x2153      MOVW     R1,#+45651
   \   00000004   0x1A40             SUBS     R0,R0,R1
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD975             BLS.N    ??getTokenArraySize_0
   \   0000000A   0xF240 0x31E1      MOVW     R1,#+993
   \   0000000E   0x1A40             SUBS     R0,R0,R1
   \   00000010   0xD071             BEQ.N    ??getTokenArraySize_0
   \   00000012   0xF640 0x310F      MOVW     R1,#+2831
   \   00000016   0x1A40             SUBS     R0,R0,R1
   \   00000018   0xD069             BEQ.N    ??getTokenArraySize_1
   \   0000001A   0xF44F 0x7184      MOV      R1,#+264
   \   0000001E   0x1A40             SUBS     R0,R0,R1
   \   00000020   0xD069             BEQ.N    ??getTokenArraySize_0
   \   00000022   0x1EC0             SUBS     R0,R0,#+3
   \   00000024   0xD067             BEQ.N    ??getTokenArraySize_0
   \   00000026   0x38F4             SUBS     R0,R0,#+244
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD964             BLS.N    ??getTokenArraySize_0
   \   0000002C   0x3814             SUBS     R0,R0,#+20
   \   0000002E   0xD062             BEQ.N    ??getTokenArraySize_0
   \   00000030   0xF240 0x51ED      MOVW     R1,#+1517
   \   00000034   0x1A40             SUBS     R0,R0,R1
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD95D             BLS.N    ??getTokenArraySize_0
   \   0000003A   0xF44F 0x6182      MOV      R1,#+1040
   \   0000003E   0x1A40             SUBS     R0,R0,R1
   \   00000040   0xD059             BEQ.N    ??getTokenArraySize_0
   \   00000042   0xF44F 0x713C      MOV      R1,#+752
   \   00000046   0x1A40             SUBS     R0,R0,R1
   \   00000048   0xD055             BEQ.N    ??getTokenArraySize_0
   \   0000004A   0xF240 0x2102      MOVW     R1,#+514
   \   0000004E   0x1A40             SUBS     R0,R0,R1
   \   00000050   0xD04F             BEQ.N    ??getTokenArraySize_2
   \   00000052   0x38FD             SUBS     R0,R0,#+253
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD94E             BLS.N    ??getTokenArraySize_0
   \   00000058   0x1F00             SUBS     R0,R0,#+4
   \   0000005A   0xD04C             BEQ.N    ??getTokenArraySize_0
   \   0000005C   0xF640 0x51DD      MOVW     R1,#+3549
   \   00000060   0x1A40             SUBS     R0,R0,R1
   \   00000062   0x2803             CMP      R0,#+3
   \   00000064   0xD947             BLS.N    ??getTokenArraySize_0
   \   00000066   0x383F             SUBS     R0,R0,#+63
   \   00000068   0xD045             BEQ.N    ??getTokenArraySize_0
   \   0000006A   0x38BE             SUBS     R0,R0,#+190
   \   0000006C   0xD043             BEQ.N    ??getTokenArraySize_0
   \   0000006E   0x3843             SUBS     R0,R0,#+67
   \   00000070   0xD041             BEQ.N    ??getTokenArraySize_0
   \   00000072   0x38E2             SUBS     R0,R0,#+226
   \   00000074   0xD03F             BEQ.N    ??getTokenArraySize_0
   \   00000076   0x382A             SUBS     R0,R0,#+42
   \   00000078   0xD03D             BEQ.N    ??getTokenArraySize_0
   \   0000007A   0xF44F 0x7183      MOV      R1,#+262
   \   0000007E   0x1A40             SUBS     R0,R0,R1
   \   00000080   0xD039             BEQ.N    ??getTokenArraySize_0
   \   00000082   0x38D0             SUBS     R0,R0,#+208
   \   00000084   0xD037             BEQ.N    ??getTokenArraySize_0
   \   00000086   0x381E             SUBS     R0,R0,#+30
   \   00000088   0xD035             BEQ.N    ??getTokenArraySize_0
   \   0000008A   0xF44F 0x7180      MOV      R1,#+256
   \   0000008E   0x1A40             SUBS     R0,R0,R1
   \   00000090   0xD031             BEQ.N    ??getTokenArraySize_0
   \   00000092   0x380C             SUBS     R0,R0,#+12
   \   00000094   0xD02F             BEQ.N    ??getTokenArraySize_0
   \   00000096   0xF240 0x510A      MOVW     R1,#+1290
   \   0000009A   0x1A40             SUBS     R0,R0,R1
   \   0000009C   0xD02B             BEQ.N    ??getTokenArraySize_0
   \   0000009E   0xF44F 0x71FD      MOV      R1,#+506
   \   000000A2   0x1A40             SUBS     R0,R0,R1
   \   000000A4   0xD027             BEQ.N    ??getTokenArraySize_0
   \   000000A6   0x38F1             SUBS     R0,R0,#+241
   \   000000A8   0xD025             BEQ.N    ??getTokenArraySize_0
   \   000000AA   0xF44F 0x7100      MOV      R1,#+512
   \   000000AE   0x1A40             SUBS     R0,R0,R1
   \   000000B0   0xD021             BEQ.N    ??getTokenArraySize_0
   \   000000B2   0xF44F 0x7104      MOV      R1,#+528
   \   000000B6   0x1A40             SUBS     R0,R0,R1
   \   000000B8   0xD01D             BEQ.N    ??getTokenArraySize_0
   \   000000BA   0x1E80             SUBS     R0,R0,#+2
   \   000000BC   0xD01B             BEQ.N    ??getTokenArraySize_0
   \   000000BE   0xF44F 0x71E6      MOV      R1,#+460
   \   000000C2   0x1A40             SUBS     R0,R0,R1
   \   000000C4   0xD017             BEQ.N    ??getTokenArraySize_0
   \   000000C6   0x3820             SUBS     R0,R0,#+32
   \   000000C8   0x2802             CMP      R0,#+2
   \   000000CA   0xD914             BLS.N    ??getTokenArraySize_0
   \   000000CC   0x380C             SUBS     R0,R0,#+12
   \   000000CE   0xD012             BEQ.N    ??getTokenArraySize_0
   \   000000D0   0x1F80             SUBS     R0,R0,#+6
   \   000000D2   0xD010             BEQ.N    ??getTokenArraySize_0
   \   000000D4   0xF240 0x2102      MOVW     R1,#+514
   \   000000D8   0x1A40             SUBS     R0,R0,R1
   \   000000DA   0xD00C             BEQ.N    ??getTokenArraySize_0
   \   000000DC   0xF640 0x018B      MOVW     R1,#+2187
   \   000000E0   0x1A40             SUBS     R0,R0,R1
   \   000000E2   0xD008             BEQ.N    ??getTokenArraySize_0
   \   000000E4   0x3808             SUBS     R0,R0,#+8
   \   000000E6   0xD006             BEQ.N    ??getTokenArraySize_0
   \   000000E8   0x1F00             SUBS     R0,R0,#+4
   \   000000EA   0xD006             BEQ.N    ??getTokenArraySize_3
   \   000000EC   0xE007             B.N      ??getTokenArraySize_4
    265              #define TOKEN_MFG TOKEN_DEF
    266              #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
    267                case creator: return arraysize;
    268              #include "hal/micro/cortexm3/token-manufacturing.h"
   \                     ??getTokenArraySize_1:
   \   000000EE   0x2014             MOVS     R0,#+20
   \   000000F0   0x4770             BX       LR
    269              #include "stack/config/token-stack.h"
   \                     ??getTokenArraySize_2:
   \   000000F2   0x2010             MOVS     R0,#+16
   \   000000F4   0x4770             BX       LR
   \                     ??getTokenArraySize_0:
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0x4770             BX       LR
   \                     ??getTokenArraySize_3:
   \   000000FA   0x2006             MOVS     R0,#+6
   \   000000FC   0x4770             BX       LR
    270              #undef TOKEN_MFG
    271              #undef TOKEN_DEF
    272            default: {
    273            }
    274            };
    275            #undef DEFINETOKENS
    276            return 0;
   \                     ??getTokenArraySize_4:
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x4770             BX       LR               ;; return
    277          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     tokensActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     TOKEN_MFG_FIB_VERSION

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x08040000         DC32     0x8040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     TOKEN_MFG_CHIP_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     TOKEN_MFG_PART_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     TOKEN_MFG_TESTER_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     TOKEN_MFG_EMBER_EUI_64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     TOKEN_MFG_ANALOG_TRIM_NORMAL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     TOKEN_MFG_ANALOG_TRIM_BOOST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     TOKEN_MFG_ANALOG_TRIM_BOTH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     TOKEN_MFG_REG_TRIM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     TOKEN_MFG_1V8_REG_VOLTAGE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     TOKEN_MFG_VREF_VOLTAGE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     TOKEN_MFG_TEMP_CAL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     TOKEN_MFG_TEST_TEMP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     TOKEN_MFG_FIB_CHECKSUM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     TOKEN_MFG_FIB_OBS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     TOKEN_MFG_CIB_OBS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     TOKEN_MFG_CUSTOM_VERSION

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     TOKEN_MFG_CUSTOM_EUI_64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     TOKEN_MFG_STRING

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x........         DC32     TOKEN_MFG_BOARD_NAME

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     TOKEN_MFG_MANUF_ID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     TOKEN_MFG_PHY_CONFIG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   0x........         DC32     TOKEN_MFG_BOOTLOAD_AES_KEY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   0x........         DC32     TOKEN_MFG_EZSP_STORAGE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   0x........         DC32     TOKEN_MFG_ASH_CONFIG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   0x........         DC32     TOKEN_MFG_CBKE_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   0x........         DC32     TOKEN_MFG_INSTALLATION_CODE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   0x........         DC32     TOKEN_MFG_OSC24M_BIAS_TRIM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   0x........         DC32     TOKEN_MFG_SYNTH_FREQ_OFFSET

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   0x........         DC32     TOKEN_MFG_OSC24M_SETTLE_DELAY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   0x........         DC32     TOKEN_MFG_SECURITY_CONFIG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_33:
   \   00000000   0x........         DC32     TOKEN_MFG_CCA_THRESHOLD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_34:
   \   00000000   0x........         DC32     TOKEN_MFG_SECURE_BOOTLOADER_KEY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_35:
   \   00000000   0x........         DC32     TOKEN_MFG_EUI_64

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {510, 765}>`:
   \   00000000   0x01FE 0x02FD      DC16 510, 765

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "token.c">`:
   \   00000000   0x74 0x6F          DC8 "token.c"
   \              0x6B 0x65    
   \              0x6E 0x2E    
   \              0x63 0x00    
    278          
    279          #endif //EMBER_TEST
    280          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  getTokenAddress
        0  getTokenArraySize
        0  getTokenSize
        8  halInternalGetIdxTokenPtr
              0 -> halInternalSimEeGetPtr
        8  halInternalGetTokenData
              0 -> halInternalGetMfgTokenData
              0 -> halInternalSimEeGetData
        0  halInternalIncrementCounterToken
              0 -> halInternalSimEeIncrementCounter
       24  halInternalSetTokenData
              0 -> halInternalAssertFailed
             24 -> halInternalAssertFailed
             24 -> halInternalSimEeSetData
       24  halStackInitTokens
             24 -> halInternalGetTokenData
             24 -> halInternalSimEeStartup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "token.c">
       4  ?<Constant {510, 765}>
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_32
       4  ??DataTable7_33
       4  ??DataTable7_34
       4  ??DataTable7_35
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     602  getTokenAddress
     258  getTokenArraySize
     358  getTokenSize
      42  halInternalGetIdxTokenPtr
      34  halInternalGetTokenData
      14  halInternalIncrementCounterToken
      78  halInternalSetTokenData
     158  halStackInitTokens
       2  tokensActive
          simEeSetDataActiveSemaphore

 
     2 bytes in section .bss
 1 700 bytes in section .text
 
 1 700 bytes of CODE memory
     2 bytes of DATA memory

Errors: none
Warnings: none
